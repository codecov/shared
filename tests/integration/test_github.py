import pytest

from shared.torngit.enums import Endpoints
from shared.torngit.exceptions import (
    TorngitClientGeneralError,
    TorngitObjectNotFoundError,
    TorngitRepoNotFoundError,
)
from shared.torngit.github import Github


@pytest.fixture
def valid_handler():
    return Github(
        repo=dict(name="example-python"),
        owner=dict(username="ThiagoCodecov"),
        token=dict(key=10 * "a280"),
        oauth_consumer_token=dict(key=None, secret=None, refresh_token=None),
        on_token_refresh=lambda token: token,
    )


@pytest.fixture
def generic_valid_handler():
    # TODO replace all occurences of valid_handler (above) by this handler.
    return Github(
        repo=dict(name="example-python"),
        owner=dict(username="codecove2e"),
        token=dict(key=10 * "a280", refresh_token=10 * "a180"),
        on_token_refresh=lambda token: token,
    )


@pytest.fixture
def valid_but_no_permissions_handler():
    return Github(
        repo=dict(name="worker"),
        owner=dict(username="codecov"),
        token=dict(key=10 * "a280"),  # ThiagoCodecovTester
    )


@pytest.fixture
def repo_doesnt_exist_handler():
    return Github(
        repo=dict(name="badrepo"),
        owner=dict(username="codecov"),
        token=dict(key=10 * "8a85"),
    )


@pytest.fixture
def more_complex_handler():
    return Github(
        repo=dict(name="worker"),
        owner=dict(username="codecov"),
        token=dict(key=10 * "8a85"),
    )


@pytest.fixture
def student_app_capable_not_student_handler():
    # we need a token generated by an app that is whitelisted by github
    # ie, our production app. This below is fake
    return Github(
        repo=dict(name="worker"),
        owner=dict(username="codecov"),
        token=dict(key="a" * 40),
    )


@pytest.fixture
def student_app_capable_yes_student_handler():
    # we need a token generated by an app that is whitelisted by github
    # ie, our production app. This below is fake
    return Github(
        repo=dict(name="worker"),
        owner=dict(username="codecov"),
        token=dict(key="b" * 40),
    )


@pytest.fixture
def integration_installed_handler():
    return Github(
        repo=dict(name="example-python"),
        owner=dict(username="ThiagoCodecov"),
        token=dict(key="v1.testfa2yxpxi79hyhqctum1vscqtaiy2dtv3d23e"),
    )


class TestGithubTestCase(object):
    @pytest.mark.asyncio
    async def test_get_authenticated_user(self, codecov_vcr):
        # To regenerate this test, go to
        # https://github.com/login/oauth/authorize?response_type=code&scope=user%3Aemail%2Cread%3Aorg%2Crepo%3Astatus%2Cwrite%3Arepo_hook&client_id=999247146557c3ba045c
        # get the code and paste it here below
        code = "dc38acf492b071cc4dce"
        handler = Github(
            oauth_consumer_token=dict(
                key="999247146557c3ba045c",
                secret="testo8lnq6ihj7zsf896r15yxujnl06og9o0fqiu",
            )
        )
        res = await handler.get_authenticated_user(code)
        print(res)
        assert res == {
            "login": "ThiagoCodecov",
            "id": 44376991,
            "node_id": "MDQ6VXNlcjQ0Mzc2OTkx",
            "avatar_url": "https://avatars3.githubusercontent.com/u/44376991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ThiagoCodecov",
            "html_url": "https://github.com/ThiagoCodecov",
            "followers_url": "https://api.github.com/users/ThiagoCodecov/followers",
            "following_url": "https://api.github.com/users/ThiagoCodecov/following{/other_user}",
            "gists_url": "https://api.github.com/users/ThiagoCodecov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ThiagoCodecov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ThiagoCodecov/subscriptions",
            "organizations_url": "https://api.github.com/users/ThiagoCodecov/orgs",
            "repos_url": "https://api.github.com/users/ThiagoCodecov/repos",
            "events_url": "https://api.github.com/users/ThiagoCodecov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ThiagoCodecov/received_events",
            "type": "User",
            "site_admin": False,
            "name": "Thiago",
            "company": "@codecov ",
            "blog": "",
            "location": None,
            "email": "thiago@codecov.io",
            "hireable": None,
            "bio": None,
            "twitter_username": None,
            "public_repos": 3,
            "public_gists": 0,
            "followers": 0,
            "following": 0,
            "created_at": "2018-10-22T17:51:44Z",
            "updated_at": "2020-10-14T17:58:13Z",
            "access_token": "testw5efy5qccduniyucsk5tesu08s4640xtoymv",
            "refresh_token": "testblahblahblahblahsfas",
            "token_type": "bearer",
            "scope": "read:org,repo:status,user:email,write:repo_hook",
        }

    @pytest.mark.asyncio
    async def test_get_authenticated_user_no_refresh_token(self, codecov_vcr):
        # To regenerate this test, go to
        # https://github.com/login/oauth/authorize?response_type=code&scope=user%3Aemail%2Cread%3Aorg%2Crepo%3Astatus%2Cwrite%3Arepo_hook&client_id=999247146557c3ba045c
        # get the code and paste it here below
        code = "dc38acf492b071cc4dce"
        handler = Github(
            oauth_consumer_token=dict(
                key="999247146557c3ba045c",
                secret="testo8lnq6ihj7zsf896r15yxujnl06og9o0fqiu",
            )
        )
        res = await handler.get_authenticated_user(code)
        print(res)
        assert res == {
            "login": "ThiagoCodecov",
            "id": 44376991,
            "node_id": "MDQ6VXNlcjQ0Mzc2OTkx",
            "avatar_url": "https://avatars3.githubusercontent.com/u/44376991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ThiagoCodecov",
            "html_url": "https://github.com/ThiagoCodecov",
            "followers_url": "https://api.github.com/users/ThiagoCodecov/followers",
            "following_url": "https://api.github.com/users/ThiagoCodecov/following{/other_user}",
            "gists_url": "https://api.github.com/users/ThiagoCodecov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ThiagoCodecov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ThiagoCodecov/subscriptions",
            "organizations_url": "https://api.github.com/users/ThiagoCodecov/orgs",
            "repos_url": "https://api.github.com/users/ThiagoCodecov/repos",
            "events_url": "https://api.github.com/users/ThiagoCodecov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ThiagoCodecov/received_events",
            "type": "User",
            "site_admin": False,
            "name": "Thiago",
            "company": "@codecov ",
            "blog": "",
            "location": None,
            "email": "thiago@codecov.io",
            "hireable": None,
            "bio": None,
            "twitter_username": None,
            "public_repos": 3,
            "public_gists": 0,
            "followers": 0,
            "following": 0,
            "created_at": "2018-10-22T17:51:44Z",
            "updated_at": "2020-10-14T17:58:13Z",
            "access_token": "testw5efy5qccduniyucsk5tesu08s4640xtoymv",
            "token_type": "bearer",
            "scope": "read:org,repo:status,user:email,write:repo_hook",
        }

    @pytest.mark.asyncio
    async def test_edit_comment(self, valid_handler, codecov_vcr):
        res = await valid_handler.edit_comment(
            "1", "436811257", "Hello world numbah 2 my friendo"
        )
        assert res is not None
        assert res["id"] == 436811257
        assert res["body"] == "Hello world numbah 2 my friendo"

    @pytest.mark.asyncio
    async def test_edit_comment_not_found(
        self, generic_valid_handler, codecov_vcr, mocker
    ):
        mock_refresh = mocker.patch.object(Github, "refresh_token", return_value=None)
        with pytest.raises(TorngitObjectNotFoundError):
            await generic_valid_handler.edit_comment(
                "1", "113979999", "Hello world number 2"
            )
        mock_refresh.assert_called_once()

    @pytest.mark.asyncio
    async def test_delete_comment(self, valid_handler, codecov_vcr):
        assert await valid_handler.delete_comment("1", "708545249") is True

    @pytest.mark.asyncio
    async def test_delete_comment_not_found(
        self, generic_valid_handler, codecov_vcr, mocker
    ):
        mock_refresh = mocker.patch.object(Github, "refresh_token", return_value=None)
        with pytest.raises(TorngitObjectNotFoundError):
            await generic_valid_handler.delete_comment("1", 113977999)
        mock_refresh.assert_called_once()

    @pytest.mark.asyncio
    async def test_find_pull_request_nothing_found(
        self, generic_valid_handler, codecov_vcr
    ):
        assert (
            await generic_valid_handler.find_pull_request("a" * 40, "no-branch") is None
        )

    @pytest.mark.asyncio
    async def test_find_pull_request_one_found(
        self, generic_valid_handler, codecov_vcr
    ):
        # PR is https://github.com/codecove2e/example-python/pull/1
        commitid = "bec77909e0a9b04603d2cdddcba62f99592d6579"
        assert await generic_valid_handler.find_pull_request(commitid) == 1

    @pytest.mark.asyncio
    async def test_get_pull_request_fail(
        self, generic_valid_handler, codecov_vcr, mocker
    ):
        mock_refresh = mocker.patch.object(Github, "refresh_token", return_value=None)
        with pytest.raises(TorngitObjectNotFoundError):
            await generic_valid_handler.get_pull_request("100")
        mock_refresh.assert_called_once()

    get_pull_request_test_data = [
        (
            "1",
            {
                "base": {
                    "branch": "master",
                    "commitid": "68946ef98daec68c7798459150982fc799c87d85",
                },
                "head": {
                    "branch": "reason/some-testing",
                    "commitid": "119c1907fb266f374b8440bbd70dccbea54daf8f",
                },
                "number": "1",
                "id": "1",
                "state": "merged",
                "title": "Creating new code for reasons no one knows",
                "author": {"id": "44376991", "username": "ThiagoCodecov"},
            },
        )
    ]

    @pytest.mark.asyncio
    async def test_get_pull_request_way_more_than_250_results(
        self, valid_handler, codecov_vcr
    ):
        pull_id = "16"
        expected_result = {
            "base": {
                "branch": "master",
                "commitid": "335ec9958daf0242bc8945659bb120c05800eacf",
            },
            "head": {
                "branch": "thiago/f/big-pt",
                "commitid": "d55dc4ef748fd11537e50c9abed4ab1864fa1d94",
            },
            "number": pull_id,
            "id": pull_id,
            "state": "open",
            "title": "PR with more than 250 results",
            "author": {"id": "44376991", "username": "ThiagoCodecov"},
        }
        res = await valid_handler.get_pull_request(pull_id)
        assert res == expected_result

    @pytest.mark.asyncio
    @pytest.mark.parametrize("a,b", get_pull_request_test_data)
    async def test_get_pull_request(self, valid_handler, a, b, codecov_vcr):
        res = await valid_handler.get_pull_request(a)
        assert res == b

    @pytest.mark.asyncio
    async def test_get_pull_request_commits(self, valid_handler, codecov_vcr):
        expected_result = [
            "587662b6e5403ae0d126e0c7839a8d98382c4760",
            "03a8b737cb9d8585076ebdbac7b7235c8da0620d",
            "bf9b57cf7b169806ae2d18d7671aba3825b99203",
            "cede19cb310cd4cddfb5d8921cb8d0cc7c7c1503",
            "ea3ada938db123368d62b0133e7c5bb54b5292b9",
            "2048b277dd6542f184c6a30c3e2b0f3ee5eeaf4b",
            "119de54e3cfdf8227a8556b9f5730c328a1390cd",
            "2d55e8501b058b6f25382c4e287f022e8938461f",
            "364bdfbc72d5e05b520f0320b0d8b39fd9ea692b",
            "119c1907fb266f374b8440bbd70dccbea54daf8f",
        ]
        res = await valid_handler.get_pull_request_commits("1")
        print(res)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_pull_request_commits_paginated(self, codecov_vcr):
        handler = Github(
            repo=dict(name="y0"),
            owner=dict(username="y0-causal-inference"),
            token=dict(key=10 * "a128"),
            oauth_consumer_token=dict(key=None, secret=None, refresh_token=None),
        )
        res = await handler.get_pull_request_commits("149")

        # From https://stackoverflow.com/a/32234251
        def is_sha1(maybe_sha):
            if len(maybe_sha) != 40:
                return False
            try:
                int(maybe_sha, 16)
                return True
            except ValueError:
                return False

        assert len(res) == 134
        assert all(map(is_sha1, res))

    @pytest.mark.asyncio
    async def test_get_pull_requests(self, valid_handler, codecov_vcr):
        expected_result = [18, 16]
        res = await valid_handler.get_pull_requests()
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_commit(self, valid_handler, codecov_vcr):
        # Looks like that jerrod@fundersclub.com doesn't seem to have a username anymore
        # Maybe this account was removed from the org?
        expected_result = {
            "author": {
                "id": None,
                "username": None,
                "email": "jerrod@fundersclub.com",
                "name": "Jerrod",
            },
            "message": "Adding 'include' term if multiple sources\n\nbased on a support ticket around multiple sources\r\n\r\nhttps://codecov.freshdesk.com/a/tickets/87",
            "parents": ["adb252173d2107fad86bcdcbc149884c2dd4c609"],
            "commitid": "6895b64",
            "timestamp": "2018-07-09T23:39:20Z",
        }

        commit = await valid_handler.get_commit("6895b64")
        print(commit)
        assert commit["author"] == expected_result["author"]
        assert commit == expected_result

    @pytest.mark.asyncio
    async def test_get_pull_requests_files(self, generic_valid_handler, codecov_vcr):
        expected_result = [
            "awesome/__init__.py",
        ]
        res = await generic_valid_handler.get_pull_request_files(4)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_commit_with_proper_author(self, valid_handler, codecov_vcr):
        expected_result = {
            "author": {
                "id": "44376991",
                "username": "ThiagoCodecov",
                "email": "thiago@codecov.io",
                "name": "Thiago Ramos",
            },
            "commitid": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
            "parents": ["f0895290dc26668faeeb20ee5ccd4cc995925775"],
            "message": "Adding README\n\nsurpriseaAKDS\n\nddkokgfnskfds\n\nBanana\n\nYallow\n\nABG",
            "timestamp": "2020-10-13T15:15:31Z",
        }

        commit = await valid_handler.get_commit(
            "75f355d8d14ba3d7761c728b4d2607cde0eef065"
        )
        print(commit)
        assert commit["author"] == expected_result["author"]
        assert commit == expected_result

    @pytest.mark.asyncio
    async def test_get_commit_not_found(self, valid_handler, codecov_vcr):
        commitid = "abe3e94949d11471cc4e054f822d222254a4a4f8"
        with pytest.raises(TorngitObjectNotFoundError):
            await valid_handler.get_commit(commitid)

    @pytest.mark.asyncio
    async def test_get_commit_no_permissions(
        self, valid_but_no_permissions_handler, codecov_vcr, mocker
    ):
        commitid = "bbe3e94949d11471cc4e054f822d222254a4a4f8"
        with pytest.raises(TorngitRepoNotFoundError):
            await valid_but_no_permissions_handler.get_commit(commitid)

    @pytest.mark.asyncio
    async def test_get_commit_repo_doesnt_exist(
        self, repo_doesnt_exist_handler, codecov_vcr, mocker
    ):
        commitid = "bbe3e94949d11471cc4e054f822d222254a4a4f8"
        with pytest.raises(TorngitRepoNotFoundError) as ex:
            await repo_doesnt_exist_handler.get_commit(commitid)
        expected_response = '{"message":"Not Found","documentation_url":"https://docs.github.com/rest/reference/repos#get-a-commit"}'
        exc = ex.value
        assert exc.response_data == expected_response

    @pytest.mark.asyncio
    async def test_get_commit_diff(self, valid_handler, codecov_vcr):
        expected_result = {
            "files": {
                ".travis.yml": {
                    "type": "modified",
                    "before": None,
                    "segments": [
                        {
                            "header": ["1", "3", "1", "5"],
                            "lines": [
                                "+sudo: false",
                                "+",
                                " language: python",
                                " ",
                                " python:",
                            ],
                        }
                    ],
                    "stats": {"added": 2, "removed": 0},
                }
            }
        }

        res = await valid_handler.get_commit_diff(
            "2be550c135cc13425cb2c239b9321e78dcfb787b"
        )
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_commit_diff_unicode_newline(self, valid_handler, codecov_vcr):
        expected_result = {
            "files": {
                ".travis.yml": {
                    "type": "modified",
                    "before": None,
                    "segments": [
                        {
                            "header": ["1", "3", "1", "5"],
                            "lines": [
                                "+sudo: false",
                                "+",
                                " language: python",
                                " ",
                                " python\u2028:",  # should not split on the unicode line separator
                            ],
                        }
                    ],
                    "stats": {"added": 2, "removed": 0},
                }
            }
        }

        res = await valid_handler.get_commit_diff(
            "2be550c135cc13425cb2c239b9321e78dcfb787b"
        )
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_commit_diff_not_found(self, valid_handler, codecov_vcr):
        with pytest.raises(TorngitObjectNotFoundError):
            await valid_handler.get_commit_diff(
                "3be850c135ccaa425cb2c239b9321e78dcfb78ff"
            )

    @pytest.mark.asyncio
    async def test_get_commit_statuses(self, more_complex_handler, codecov_vcr):
        res = await more_complex_handler.get_commit_statuses(
            "3fb5f4700da7818e561054ec26f5657de720717f"
        )
        assert res._statuses == [
            {
                "time": "2020-04-08T05:44:02Z",
                "state": "success",
                "description": "94.21% (+0.18%) compared to 48775c6",
                "url": "https://codecov.io/gh/codecov/worker/compare/48775c672437630c9c6f582ecfae5854a3617be2...3fb5f4700da7818e561054ec26f5657de720717f",
                "context": "codecov/project",
            },
            {
                "time": "2020-04-08T05:44:02Z",
                "state": "success",
                "description": "100.00% of diff hit (target 94.02%)",
                "url": "https://codecov.io/gh/codecov/worker/compare/48775c672437630c9c6f582ecfae5854a3617be2...3fb5f4700da7818e561054ec26f5657de720717f",
                "context": "codecov/patch",
            },
            {
                "time": "2020-04-08T20:39:33Z",
                "state": "success",
                "description": "Your tests passed on CircleCI!",
                "url": "https://circleci.com/gh/codecov/worker/2619?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link",
                "context": "ci/circleci: build",
            },
            {
                "time": "2020-04-08T20:40:32Z",
                "state": "success",
                "description": "Your tests passed on CircleCI!",
                "url": "https://circleci.com/gh/codecov/worker/2620?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link",
                "context": "ci/circleci: test",
            },
        ]
        assert res == "success"

    @pytest.mark.asyncio
    async def test_set_commit_statuses_then_get(self, valid_handler, codecov_vcr):
        commit_sha = "702d05fd3e57a1d7d1e4a5e3e3a0017fe2571382"
        target_url = "https://localhost:50036/github/codecov"
        statuses_to_set = [
            ("turtle", "success"),
            ("bird", "pending"),
            ("pig", "failure"),
            ("giant", "error"),
            ("turtle", "pending"),
            ("bird", "failure"),
            ("pig", "error"),
            ("giant", "success"),
            ("giant", "error"),
            ("giant", "success"),
            ("capybara", "success"),
        ]
        for i, val in enumerate(statuses_to_set):
            context, status = val
            res = await valid_handler.set_commit_status(
                commit_sha, status, context, f"{status} - {i} - {context}", target_url
            )
        res = await valid_handler.get_commit_statuses(commit_sha)
        print(res._statuses)
        assert res._statuses == [
            {
                "time": "2020-10-14T21:43:30Z",
                "state": "pending",
                "description": "pending - 4 - turtle",
                "url": "https://localhost:50036/github/codecov",
                "context": "turtle",
            },
            {
                "time": "2020-10-14T21:43:31Z",
                "state": "failure",
                "description": "failure - 5 - bird",
                "url": "https://localhost:50036/github/codecov",
                "context": "bird",
            },
            {
                "time": "2020-10-14T21:43:31Z",
                "state": "error",
                "description": "error - 6 - pig",
                "url": "https://localhost:50036/github/codecov",
                "context": "pig",
            },
            {
                "time": "2020-10-14T21:43:33Z",
                "state": "success",
                "description": "success - 9 - giant",
                "url": "https://localhost:50036/github/codecov",
                "context": "giant",
            },
            {
                "time": "2020-10-14T21:43:34Z",
                "state": "success",
                "description": "success - 10 - capybara",
                "url": "https://localhost:50036/github/codecov",
                "context": "capybara",
            },
        ]
        assert res == "failure"

    @pytest.mark.asyncio
    async def test_set_commit_status(self, valid_handler, codecov_vcr):
        target_url = "https://localhost:50036/gitlab/codecov/ci-repo?ref=ad798926730aad14aadf72281204bdb85734fe67"
        expected_result = {
            "url": "https://api.github.com/repos/ThiagoCodecov/example-python/statuses/a06aef4356ca35b34c5486269585288489e578db",
            "avatar_url": "https://avatars3.githubusercontent.com/u/44376991?v=4",
            "id": 11050927805,
            "node_id": "MDEzOlN0YXR1c0NvbnRleHQxMTA1MDkyNzgwNQ==",
            "state": "success",
            "description": "aaaaaaaaaa",
            "target_url": "https://localhost:50036/gitlab/codecov/ci-repo?ref=ad798926730aad14aadf72281204bdb85734fe67",
            "context": "context",
            "created_at": "2020-10-14T17:32:28Z",
            "updated_at": "2020-10-14T17:32:28Z",
            "creator": {
                "login": "ThiagoCodecov",
                "id": 44376991,
                "node_id": "MDQ6VXNlcjQ0Mzc2OTkx",
                "avatar_url": "https://avatars3.githubusercontent.com/u/44376991?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiagoCodecov",
                "html_url": "https://github.com/ThiagoCodecov",
                "followers_url": "https://api.github.com/users/ThiagoCodecov/followers",
                "following_url": "https://api.github.com/users/ThiagoCodecov/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiagoCodecov/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiagoCodecov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiagoCodecov/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiagoCodecov/orgs",
                "repos_url": "https://api.github.com/users/ThiagoCodecov/repos",
                "events_url": "https://api.github.com/users/ThiagoCodecov/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiagoCodecov/received_events",
                "type": "User",
                "site_admin": False,
            },
        }
        res = await valid_handler.set_commit_status(
            "a06aef4356ca35b34c5486269585288489e578db",
            "success",
            "context",
            "aaaaaaaaaa",
            target_url,
        )
        print(res)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_branches(self, valid_handler, codecov_vcr):
        expected_result = [
            "master",
            "random-branch",
            "thiago/base-no-base",
            "thiago/f/big-pt",
            "thiago/f/something",
            "thiago/test-1",
        ]
        branches = sorted(await valid_handler.get_branches())
        print(sorted(map(lambda a: a[0], branches)))
        assert sorted(map(lambda a: a[0], branches)) == expected_result

    @pytest.mark.asyncio
    async def test_get_branch(self, valid_handler, codecov_vcr):
        expected_result = {
            "name": "main",
            "sha": "38c2d0214f2a48c9212a140f5311977059a15b35",
        }
        branch = await valid_handler.get_branch("main")
        print(branch)
        assert branch == expected_result

    @pytest.mark.asyncio
    async def test_get_branch_not_existent(self, valid_handler, codecov_vcr):
        with pytest.raises(TorngitClientGeneralError) as e:
            branch = await valid_handler.get_branch("none")
            print(branch)
            assert e[0] == 404
            assert e[1]["message"] == "Branch not found"

    @pytest.mark.asyncio
    async def test_post_webhook(self, valid_handler, codecov_vcr):
        url = "http://requestbin.net/r/1ecyaj51"
        events = ["push", "pull_request"]
        name, secret = "a", "d"
        expected_result = {
            "type": "Repository",
            "id": 255680134,
            "name": "web",
            "active": True,
            "events": ["pull_request", "push"],
            "config": {
                "content_type": "json",
                "secret": "********",
                "url": "http://requestbin.net/r/1ecyaj51",
                "insecure_ssl": "0",
            },
            "updated_at": "2020-10-14T17:32:29Z",
            "created_at": "2020-10-14T17:32:29Z",
            "url": "https://api.github.com/repos/ThiagoCodecov/example-python/hooks/255680134",
            "test_url": "https://api.github.com/repos/ThiagoCodecov/example-python/hooks/255680134/test",
            "ping_url": "https://api.github.com/repos/ThiagoCodecov/example-python/hooks/255680134/pings",
            "last_response": {"code": None, "status": "unused", "message": None},
        }
        res = await valid_handler.post_webhook(name, url, events, secret)
        print(res)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_edit_webhook(self, valid_handler, codecov_vcr):
        url = "https://enfehm3qrtj5u.x.pipedream.net"
        events = ["project", "pull_request", "release"]
        new_name, secret = "new_name", "new_secret"
        expected_result = {
            "type": "Repository",
            "id": 255680134,
            "name": "web",
            "active": True,
            "events": ["project", "pull_request", "release"],
            "config": {
                "content_type": "json",
                "secret": "********",
                "url": "https://enfehm3qrtj5u.x.pipedream.net",
                "insecure_ssl": "0",
            },
            "updated_at": "2020-10-14T21:51:05Z",
            "created_at": "2020-10-14T17:32:29Z",
            "url": "https://api.github.com/repos/ThiagoCodecov/example-python/hooks/255680134",
            "test_url": "https://api.github.com/repos/ThiagoCodecov/example-python/hooks/255680134/test",
            "ping_url": "https://api.github.com/repos/ThiagoCodecov/example-python/hooks/255680134/pings",
            "last_response": {
                "code": 404,
                "status": "missing",
                "message": "Invalid HTTP Response: 404",
            },
        }
        res = await valid_handler.edit_webhook(
            "255680134", new_name, url, events, secret
        )
        print(res)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_delete_webhook(self, valid_handler, codecov_vcr):
        res = await valid_handler.delete_webhook("255680134")
        assert res is True

    @pytest.mark.asyncio
    async def test_delete_webhook_not_found(self, valid_handler, codecov_vcr, mocker):
        mock_refresh = mocker.patch.object(Github, "refresh_token", return_value=None)
        with pytest.raises(TorngitObjectNotFoundError):
            await valid_handler.delete_webhook("4742f011-8397-aa77-8876-5e9a06f10f98")
        mock_refresh.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_authenticated(self, valid_handler, codecov_vcr):
        res = await valid_handler.get_authenticated()
        assert res == (True, True)

    @pytest.mark.asyncio
    async def test_get_compare(self, valid_handler, codecov_vcr):
        base, head = "6ae5f17", "b92edba"
        expected_result = {
            "diff": {
                "files": {
                    "README.rst": {
                        "type": "modified",
                        "before": None,
                        "segments": [
                            {
                                "header": ["9", "7", "9", "8"],
                                "lines": [
                                    " Overview",
                                    " --------",
                                    " ",
                                    "-Main website: `Codecov <https://codecov.io/>`_.",
                                    "+",
                                    "+website: `Codecov <https://codecov.io/>`_.",
                                    " ",
                                    " .. code-block:: shell-session",
                                    " ",
                                ],
                            },
                            {
                                "header": ["46", "12", "47", "19"],
                                "lines": [
                                    " ",
                                    " You may need to configure a ``.coveragerc`` file. Learn more `here <http://coverage.readthedocs.org/en/latest/config.html>`_. Start with this `generic .coveragerc <https://gist.github.com/codecov-io/bf15bde2c7db1a011b6e>`_ for example.",
                                    " ",
                                    "-We highly suggest adding `source` to your ``.coveragerc`` which solves a number of issues collecting coverage.",
                                    "+We highly suggest adding ``source`` to your ``.coveragerc``, which solves a number of issues collecting coverage.",
                                    " ",
                                    " .. code-block:: ini",
                                    " ",
                                    "    [run]",
                                    "    source=your_package_name",
                                    "+   ",
                                    "+If there are multiple sources, you instead should add ``include`` to your ``.coveragerc``",
                                    "+",
                                    "+.. code-block:: ini",
                                    "+",
                                    "+   [run]",
                                    "+   include=your_package_name/*",
                                    " ",
                                    " unittests",
                                    " ---------",
                                ],
                            },
                            {
                                "header": ["150", "5", "158", "4"],
                                "lines": [
                                    " * Twitter: `@codecov <https://twitter.com/codecov>`_.",
                                    " * Email: `hello@codecov.io <hello@codecov.io>`_.",
                                    " ",
                                    "-We are happy to help if you have any questions. Please contact email our Support at [support@codecov.io](mailto:support@codecov.io)",
                                    "-",
                                    "+We are happy to help if you have any questions. Please contact email our Support at `support@codecov.io <mailto:support@codecov.io>`_.",
                                ],
                            },
                        ],
                        "stats": {"added": 11, "removed": 4},
                    }
                }
            },
            "commits": [
                {
                    "commitid": "b92edba44fdd29fcc506317cc3ddeae1a723dd08",
                    "message": "Update README.rst",
                    "timestamp": "2018-07-09T23:51:16Z",
                    "author": {
                        "id": None,
                        "username": None,
                        "name": "Jerrod",
                        "email": "jerrod@fundersclub.com",
                    },
                },
                {
                    "commitid": "c7f608036a3d2e89f8c59989ee213900c1ef39d1",
                    "message": "Update README.rst",
                    "timestamp": "2018-07-09T23:48:34Z",
                    "author": {
                        "id": None,
                        "username": None,
                        "name": "Jerrod",
                        "email": "jerrod@fundersclub.com",
                    },
                },
                {
                    "commitid": "6895b6479dbe12b5cb3baa02416c6343ddb888b4",
                    "message": "Adding 'include' term if multiple sources\n\nbased on a support ticket around multiple sources\r\n\r\nhttps://codecov.freshdesk.com/a/tickets/87",
                    "timestamp": "2018-07-09T23:39:20Z",
                    "author": {
                        "id": None,
                        "username": None,
                        "name": "Jerrod",
                        "email": "jerrod@fundersclub.com",
                    },
                },
                {
                    "commitid": "adb252173d2107fad86bcdcbc149884c2dd4c609",
                    "message": "Update README.rst",
                    "timestamp": "2018-04-26T08:39:32Z",
                    "author": {
                        "id": 11602092,
                        "username": "TomPed",
                        "name": "Thomas Pedbereznak",
                        "email": "tom@tomped.com",
                    },
                },
                {
                    "commitid": "6ae5f1795a441884ed2847bb31154814ac01ef38",
                    "message": "Update README.rst",
                    "timestamp": "2018-04-26T08:35:58Z",
                    "author": {
                        "id": 11602092,
                        "username": "TomPed",
                        "name": "Thomas Pedbereznak",
                        "email": "tom@tomped.com",
                    },
                },
            ],
        }

        res = await valid_handler.get_compare(base, head)
        print(res)
        assert sorted(list(res.keys())) == sorted(list(expected_result.keys()))
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_distance_in_commits(self, generic_valid_handler, codecov_vcr):
        base_branch, head = "master", "0206296b1424912cc05069a9bf4025cbb95f5ecc"
        expected_result = {
            "behind_by": 0,
            "behind_by_commit": "93189ce50f224296d6412e2884b93dcc3c7c8654",
            "status": "ahead",
            "ahead_by": 2,
        }
        res = await generic_valid_handler.get_distance_in_commits(base_branch, head)
        assert sorted(list(res.keys())) == sorted(list(expected_result.keys()))
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_compare_same_commit(self, valid_handler, codecov_vcr):
        base, head = "6ae5f17", "6ae5f17"
        expected_result = {
            "diff": {"files": {}},
            "commits": [
                {
                    "commitid": "6ae5f1795a441884ed2847bb31154814ac01ef38",
                    "author": {
                        "email": "tom@tomped.com",
                        "id": 11602092,
                        "name": "Thomas Pedbereznak",
                        "username": "TomPed",
                    },
                    "message": "Update README.rst",
                    "timestamp": "2018-04-26T08:35:58Z",
                }
            ],
        }
        res = await valid_handler.get_compare(base, head)
        assert sorted(list(res.keys())) == sorted(list(expected_result.keys()))
        assert len(res["commits"]) == len(expected_result["commits"])
        assert res["commits"][0] == expected_result["commits"][0]
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_repository(self, valid_handler, codecov_vcr):
        expected_result = {
            "owner": {"service_id": "44376991", "username": "ThiagoCodecov"},
            "repo": {
                "service_id": "156617777",
                "name": "example-python",
                "language": "shell",
                "private": False,
                "fork": {
                    "owner": {"service_id": "8226205", "username": "codecov"},
                    "repo": {
                        "service_id": "24344106",
                        "name": "example-python",
                        "language": "python",
                        "private": False,
                        "branch": "master",
                    },
                },
                "branch": "master",
            },
        }
        res = await valid_handler.get_repository()
        print(res)
        assert res["owner"] == expected_result["owner"]
        assert res["repo"] == expected_result["repo"]
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_source_master(self, valid_handler, codecov_vcr):
        expected_result = {
            "content": b"\n".join(
                [
                    b"def fib(n):",
                    b"    if n < 0:",
                    b"        return 0",
                    b"    if n <= 1:",
                    b"        return 1",
                    b"    return fib(n - 1) + fib(n - 2)",
                    b"",
                    b"",
                    b"def untested_code(a):",
                    b"    raise Exception()",
                    b"",
                ]
            ),
            "commitid": "7fb3c3fbd71a6d3f4b98964c0130f7e083505fcd",
        }

        path, ref = "awesome/code_fib.py", "master"
        res = await valid_handler.get_source(path, ref)
        assert res["content"].split(b"\n") == expected_result["content"].split(b"\n")
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_source_random_commit(self, valid_handler, codecov_vcr):
        expected_result = {
            "content": b'def smile():\n    return ":)"\n\ndef frown():\n    return ":("\n',
            "commitid": "4d34acc61e7abe5536c84fec4fe9fd9b26311cc7",
        }
        path, ref = "awesome/__init__.py", "96492d409fc86aa7ae31b214dfe6b08ae860458a"
        res = await valid_handler.get_source(path, ref)
        print(res)
        assert res["content"].split(b"\n") == expected_result["content"].split(b"\n")
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_source_random_commit_not_found(
        self, valid_handler, codecov_vcr, mocker
    ):
        mock_refresh = mocker.patch.object(Github, "refresh_token", return_value=None)
        path, ref = (
            "awesome/non_exising_file.py",
            "96492d409fc86aa7ae31b214dfe6b08ae860458a",
        )
        with pytest.raises(TorngitObjectNotFoundError):
            await valid_handler.get_source(path, ref)
        mock_refresh.assert_called_once()

    @pytest.mark.asyncio
    async def test_list_repos(self, valid_handler, codecov_vcr):
        res = await valid_handler.list_repos()
        assert len(res) == 115
        assert all(x["owner"]["service_id"] in ["8226205", "44376991"] for x in res)
        one_expected_result = {
            "owner": {"service_id": "44376991", "username": "ThiagoCodecov"},
            "repo": {
                "service_id": "156617777",
                "name": "example-python",
                "language": "shell",
                "private": False,
                "branch": "master",
            },
        }

        assert one_expected_result in res

    @pytest.mark.asyncio
    async def test_list_repos_generator(self, valid_handler, codecov_vcr):
        repos = []
        page_count = 0
        async for page in valid_handler.list_repos_generator():
            repos.extend(page)
            page_count += 1

        assert page_count == 2
        assert len(repos) == 145

        expected_owners = [
            "137832199",  # matt-codecov
            "139263855",  # matt-codecov-club
            "8226205",  # codecov
        ]
        assert all(x["owner"]["service_id"] in expected_owners for x in repos)

        some_expected_results = [
            {
                "owner": {"service_id": "137832199", "username": "matt-codecov"},
                "repo": {
                    "service_id": "670770179",
                    "name": "rust",
                    "language": None,
                    "private": False,
                    "branch": "master",
                },
            },
            {
                "owner": {"service_id": "139263855", "username": "matt-codecov-club"},
                "repo": {
                    "service_id": "665219192",
                    "name": "mike",
                    "language": None,
                    "private": True,
                    "branch": "main",
                },
            },
            {
                "owner": {"service_id": "8226205", "username": "codecov"},
                "repo": {
                    "service_id": "665728948",
                    "name": "worker",
                    "language": "python",
                    "private": False,
                    "branch": "main",
                },
            },
        ]
        assert all(x in repos for x in some_expected_results)

    @pytest.mark.asyncio
    async def test_list_repos_using_installation(self, valid_handler, codecov_vcr):
        res = await valid_handler.list_repos_using_installation()
        assert res == [
            {
                "owner": {"service_id": "111885151", "username": "scott-codecov-org"},
                "repo": {
                    "service_id": "610348935",
                    "name": "codecov-test",
                    "language": "python",
                    "private": True,
                    "branch": "master",
                },
            }
        ]

    @pytest.mark.asyncio
    async def test_list_repos_using_installation_generator(
        self, valid_handler, codecov_vcr
    ):
        repos = []
        page_count = 0
        async for page in valid_handler.list_repos_using_installation_generator():
            repos.extend(page)
            page_count += 1

        assert page_count == 1
        assert repos == [
            {
                "owner": {"service_id": "139263855", "username": "matt-codecov-club"},
                "repo": {
                    "service_id": "665219192",
                    "name": "mike",
                    "language": None,
                    "private": True,
                    "branch": "main",
                },
            },
        ]

    @pytest.mark.asyncio
    async def test_list_top_level_files(self, valid_handler, codecov_vcr):
        expected_result = [
            {"name": ".gitignore", "path": ".gitignore", "type": "file"},
            {"name": "Makefile", "path": "Makefile", "type": "file"},
            {"name": "README.md", "path": "README.md", "type": "file"},
            {"name": "awesome", "path": "awesome", "type": "folder"},
            {
                "name": "changed_production.sh",
                "path": "changed_production.sh",
                "type": "file",
            },
            {"name": "codecov.yaml", "path": "codecov.yaml", "type": "file"},
            {"name": "dev.sh", "path": "dev.sh", "type": "file"},
            {
                "name": "flagone.coverage.xml",
                "path": "flagone.coverage.xml",
                "type": "file",
            },
            {
                "name": "flagtwo.coverage.xml",
                "path": "flagtwo.coverage.xml",
                "type": "file",
            },
            {"name": "requirements.txt", "path": "requirements.txt", "type": "file"},
            {"name": "tests", "path": "tests", "type": "folder"},
            {"name": "unit.coverage.xml", "path": "unit.coverage.xml", "type": "file"},
        ]
        res = await valid_handler.list_top_level_files("master")
        print(sorted(res, key=lambda x: x["path"]))
        assert sorted(res, key=lambda x: x["path"]) == sorted(
            expected_result, key=lambda x: x["path"]
        )

    @pytest.mark.asyncio
    async def test_list_files(self, valid_handler, codecov_vcr):
        expected_result = [
            {"name": "__init__.py", "path": "awesome/__init__.py", "type": "file"},
            {"name": "code_fib.py", "path": "awesome/code_fib.py", "type": "file"},
        ]
        res = await valid_handler.list_files("master", "awesome")
        assert sorted(res, key=lambda x: x["path"]) == sorted(
            expected_result, key=lambda x: x["path"]
        )

    @pytest.mark.asyncio
    async def test_get_ancestors_tree(self, valid_handler, codecov_vcr):
        commitid = "6ae5f17"
        res = await valid_handler.get_ancestors_tree(commitid)
        assert res["commitid"] == "6ae5f1795a441884ed2847bb31154814ac01ef38"
        assert sorted([x["commitid"] for x in res["parents"]]) == [
            "8631ea09b9b689de0a348d5abf70bdd7273d2ae3"
        ]

    def test_get_href(self, valid_handler):
        expected_result = "https://github.com/ThiagoCodecov/example-python/commit/8631ea09b9b689de0a348d5abf70bdd7273d2ae3"
        res = valid_handler.get_href(
            Endpoints.commit_detail, commitid="8631ea09b9b689de0a348d5abf70bdd7273d2ae3"
        )
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_pull_request_base_doesnt_match(self, valid_handler, codecov_vcr):
        pull_id = "15"
        expected_result = {
            "base": {
                "branch": "master",
                "commitid": "30cc1ed751a59fa9e7ad8e79fff41a6fe11ef5dd",
            },
            "head": {
                "branch": "thiago/test-1",
                "commitid": "2e2600aa09525e2e1e1d98b09de61454d29c94bb",
            },
            "number": "15",
            "id": "15",
            "state": "closed",
            "title": "Thiago/test 1",
            "author": {"id": "44376991", "username": "ThiagoCodecov"},
        }
        res = await valid_handler.get_pull_request(pull_id)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_pull_request_base_partially_differs(
        self, valid_handler, codecov_vcr
    ):
        handler = Github(
            repo=dict(name="codecov-api-archive"),
            owner=dict(username="codecov"),
            token=valid_handler.token,
        )
        pull_id = "110"
        expected_result = {
            "base": {
                "branch": "master",
                "commitid": "77141afbd13a1273f87cf02f7f32265ea19a3b77",
            },
            "head": {
                "branch": "ce-1314/gh-status-handler",
                "commitid": "a178a13c65f44d5b81c807f3c0fa2cb4922f020f",
            },
            "number": "110",
            "id": "110",
            "state": "merged",
            "title": "CE-1314 GitHub Status Event Handler",
            "author": {"id": "5767537", "username": "pierce-m"},
        }
        res = await handler.get_pull_request(pull_id)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_workflow_run(self, codecov_vcr):
        handler = Github(
            repo=dict(name="django"),
            owner=dict(username="django"),
            token=dict(key="test9zwlbanm8k3m3394ihpwyqk08okirro3l3n0"),
        )
        expected_result = {
            "start_time": "2022-10-17T14:29:14Z",
            "finish_time": "2022-10-17T14:31:13Z",
            "status": "completed",
            "public": True,
            "slug": "django/django",
            "commit_sha": "384dba7ce472c0f22c33f2bcede8f8d04b9c2b0f",
        }
        run_id = "3265999402"
        res = await handler.get_workflow_run(run_id)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_create_github_check(
        self, integration_installed_handler, codecov_vcr
    ):
        res = await integration_installed_handler.create_check_run(
            "Test check",
            "75f355d8d14ba3d7761c728b4d2607cde0eef065",
            status="in_progress",
        )
        assert res == 1256232357

    @pytest.mark.asyncio
    async def test_update_github_check(
        self, integration_installed_handler, codecov_vcr
    ):
        res = await integration_installed_handler.update_check_run(
            1256232357,
            "success",
            url="https://app.codecov.io/gh/codecov/example-python/compare/1?src=pr",
        )
        expected_result = {
            "id": 1256232357,
            "node_id": "MDg6Q2hlY2tSdW4xMjU2MjMyMzU3",
            "head_sha": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
            "external_id": "",
            "url": "https://api.github.com/repos/ThiagoCodecov/example-python/check-runs/1256232357",
            "html_url": "https://github.com/ThiagoCodecov/example-python/runs/1256232357",
            "details_url": "https://app.codecov.io/gh/codecov/example-python/compare/1?src=pr",
            "status": "completed",
            "conclusion": "success",
            "started_at": "2020-10-14T23:00:59Z",
            "completed_at": "2020-10-14T23:01:14Z",
            "output": {
                "title": None,
                "summary": None,
                "text": None,
                "annotations_count": 0,
                "annotations_url": "https://api.github.com/repos/ThiagoCodecov/example-python/check-runs/1256232357/annotations",
            },
            "name": "Test check",
            "check_suite": {"id": 1341719124},
            "app": {
                "id": 254,
                "slug": "codecov",
                "node_id": "MDM6QXBwMjU0",
                "owner": {
                    "login": "codecov",
                    "id": 8226205,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjgyMjYyMDU=",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/8226205?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/codecov",
                    "html_url": "https://github.com/codecov",
                    "followers_url": "https://api.github.com/users/codecov/followers",
                    "following_url": "https://api.github.com/users/codecov/following{/other_user}",
                    "gists_url": "https://api.github.com/users/codecov/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/codecov/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/codecov/subscriptions",
                    "organizations_url": "https://api.github.com/users/codecov/orgs",
                    "repos_url": "https://api.github.com/users/codecov/repos",
                    "events_url": "https://api.github.com/users/codecov/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/codecov/received_events",
                    "type": "Organization",
                    "site_admin": False,
                },
                "name": "Codecov",
                "description": "Codecov provides highly integrated tools to group, merge, archive and compare coverage reports. Whether your team is comparing changes in a pull request or reviewing a single commit, Codecov will improve the code review workflow and quality.\r\n\r\n## Code coverage done right.®\r\n\r\n1. Upload coverage reports from your CI builds.\r\n2. Codecov merges all builds and languages into one beautiful coherent report.\r\n3. Get commit statuses, pull request comments and coverage overlay via our browser extension.\r\n\r\nWhen Codecov merges your uploads it keeps track of the CI provider (inc. build details) and user specified context, e.g. `#unittest` ~ `#smoketest` or `#oldcode` ~ `#newcode`. You can track the `#unittest` coverage independently of other groups. [Learn more here](\r\nhttp://docs.codecov.io/docs/flags)\r\n\r\nThrough **Codecov's Browser Extension** reports overlay directly in GitHub UI to assist in code review. [Watch here](https://docs.codecov.io/docs/browser-extension)\r\n\r\n*Highly detailed* **pull request comments** and *customizable* **commit statuses** will improve your team's workflow and code coverage incrementally.\r\n\r\n**File backed configuration** all through the `codecov.yml`. \r\n\r\n## FAQ\r\n- Do you **merge multiple uploads** to the same commit? **Yes**\r\n- Do you **support multiple languages** in the same project? **Yes**\r\n- Can you **group coverage reports** by project and/or test type? **Yes**\r\n- How does **pricing** work? Only paid users can view reports and post statuses/comments. ",
                "external_url": "https://codecov.io",
                "html_url": "https://github.com/apps/codecov",
                "created_at": "2016-09-25T14:18:27Z",
                "updated_at": "2020-08-27T18:10:18Z",
                "permissions": {
                    "administration": "read",
                    "checks": "write",
                    "contents": "read",
                    "issues": "read",
                    "members": "read",
                    "metadata": "read",
                    "pull_requests": "write",
                    "statuses": "write",
                },
                "events": [
                    "check_run",
                    "check_suite",
                    "create",
                    "delete",
                    "fork",
                    "membership",
                    "public",
                    "pull_request",
                    "push",
                    "release",
                    "repository",
                    "status",
                    "team_add",
                ],
            },
            "pull_requests": [
                {
                    "url": "https://api.github.com/repos/ThiagoCodecov/example-python/pulls/18",
                    "id": 383348775,
                    "number": 18,
                    "head": {
                        "ref": "thiago/base-no-base",
                        "sha": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
                        "repo": {
                            "id": 156617777,
                            "url": "https://api.github.com/repos/ThiagoCodecov/example-python",
                            "name": "example-python",
                        },
                    },
                    "base": {
                        "ref": "master",
                        "sha": "f0895290dc26668faeeb20ee5ccd4cc995925775",
                        "repo": {
                            "id": 156617777,
                            "url": "https://api.github.com/repos/ThiagoCodecov/example-python",
                            "name": "example-python",
                        },
                    },
                }
            ],
        }
        print(res)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_github_check_runs_no_params(
        self, more_complex_handler, codecov_vcr
    ):
        with pytest.raises(Exception):
            await more_complex_handler.get_check_runs(
                name="Test check",
                token={"key": "v1.test7plgcp94kp45aqvz1zr1crhganpdm9t6u52i"},
            )

    @pytest.mark.asyncio
    async def test_get_github_check_runs(
        self, integration_installed_handler, codecov_vcr
    ):
        res = await integration_installed_handler.get_check_runs(
            name="Test check", head_sha="75f355d8d14ba3d7761c728b4d2607cde0eef065"
        )
        expected_result = {
            "total_count": 1,
            "check_runs": [
                {
                    "id": 1256232357,
                    "node_id": "MDg6Q2hlY2tSdW4xMjU2MjMyMzU3",
                    "head_sha": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
                    "external_id": "",
                    "url": "https://api.github.com/repos/ThiagoCodecov/example-python/check-runs/1256232357",
                    "html_url": "https://github.com/ThiagoCodecov/example-python/runs/1256232357",
                    "details_url": "https://app.codecov.io/gh/codecov/example-python/compare/1?src=pr",
                    "status": "completed",
                    "conclusion": "success",
                    "started_at": "2020-10-14T23:00:59Z",
                    "completed_at": "2020-10-14T23:01:14Z",
                    "output": {
                        "title": None,
                        "summary": None,
                        "text": None,
                        "annotations_count": 0,
                        "annotations_url": "https://api.github.com/repos/ThiagoCodecov/example-python/check-runs/1256232357/annotations",
                    },
                    "name": "Test check",
                    "check_suite": {"id": 1341719124},
                    "app": {
                        "id": 254,
                        "slug": "codecov",
                        "node_id": "MDM6QXBwMjU0",
                        "owner": {
                            "login": "codecov",
                            "id": 8226205,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjgyMjYyMDU=",
                            "avatar_url": "https://avatars3.githubusercontent.com/u/8226205?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/codecov",
                            "html_url": "https://github.com/codecov",
                            "followers_url": "https://api.github.com/users/codecov/followers",
                            "following_url": "https://api.github.com/users/codecov/following{/other_user}",
                            "gists_url": "https://api.github.com/users/codecov/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/codecov/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/codecov/subscriptions",
                            "organizations_url": "https://api.github.com/users/codecov/orgs",
                            "repos_url": "https://api.github.com/users/codecov/repos",
                            "events_url": "https://api.github.com/users/codecov/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/codecov/received_events",
                            "type": "Organization",
                            "site_admin": False,
                        },
                        "name": "Codecov",
                        "description": "Codecov provides highly integrated tools to group, merge, archive and compare coverage reports. Whether your team is comparing changes in a pull request or reviewing a single commit, Codecov will improve the code review workflow and quality.\r\n\r\n## Code coverage done right.®\r\n\r\n1. Upload coverage reports from your CI builds.\r\n2. Codecov merges all builds and languages into one beautiful coherent report.\r\n3. Get commit statuses, pull request comments and coverage overlay via our browser extension.\r\n\r\nWhen Codecov merges your uploads it keeps track of the CI provider (inc. build details) and user specified context, e.g. `#unittest` ~ `#smoketest` or `#oldcode` ~ `#newcode`. You can track the `#unittest` coverage independently of other groups. [Learn more here](\r\nhttp://docs.codecov.io/docs/flags)\r\n\r\nThrough **Codecov's Browser Extension** reports overlay directly in GitHub UI to assist in code review. [Watch here](https://docs.codecov.io/docs/browser-extension)\r\n\r\n*Highly detailed* **pull request comments** and *customizable* **commit statuses** will improve your team's workflow and code coverage incrementally.\r\n\r\n**File backed configuration** all through the `codecov.yml`. \r\n\r\n## FAQ\r\n- Do you **merge multiple uploads** to the same commit? **Yes**\r\n- Do you **support multiple languages** in the same project? **Yes**\r\n- Can you **group coverage reports** by project and/or test type? **Yes**\r\n- How does **pricing** work? Only paid users can view reports and post statuses/comments. ",
                        "external_url": "https://codecov.io",
                        "html_url": "https://github.com/apps/codecov",
                        "created_at": "2016-09-25T14:18:27Z",
                        "updated_at": "2020-08-27T18:10:18Z",
                        "permissions": {
                            "administration": "read",
                            "checks": "write",
                            "contents": "read",
                            "issues": "read",
                            "members": "read",
                            "metadata": "read",
                            "pull_requests": "write",
                            "statuses": "write",
                        },
                        "events": [
                            "check_run",
                            "check_suite",
                            "create",
                            "delete",
                            "fork",
                            "membership",
                            "public",
                            "pull_request",
                            "push",
                            "release",
                            "repository",
                            "status",
                            "team_add",
                        ],
                    },
                    "pull_requests": [
                        {
                            "url": "https://api.github.com/repos/ThiagoCodecov/example-python/pulls/18",
                            "id": 383348775,
                            "number": 18,
                            "head": {
                                "ref": "thiago/base-no-base",
                                "sha": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
                                "repo": {
                                    "id": 156617777,
                                    "url": "https://api.github.com/repos/ThiagoCodecov/example-python",
                                    "name": "example-python",
                                },
                            },
                            "base": {
                                "ref": "master",
                                "sha": "f0895290dc26668faeeb20ee5ccd4cc995925775",
                                "repo": {
                                    "id": 156617777,
                                    "url": "https://api.github.com/repos/ThiagoCodecov/example-python",
                                    "name": "example-python",
                                },
                            },
                        }
                    ],
                }
            ],
        }
        print(res)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_get_best_effort_branches(self, valid_handler, codecov_vcr):
        commit_sha = "75f355d8d14ba3d7761c728b4d2607cde0eef065"
        res = await valid_handler.get_best_effort_branches(commit_sha)
        assert res == ["thiago/base-no-base"]

    @pytest.mark.asyncio
    async def test_is_student_not_student(
        self, student_app_capable_not_student_handler, codecov_vcr
    ):
        res = await student_app_capable_not_student_handler.is_student()
        assert not res

    @pytest.mark.asyncio
    async def test_is_student_not_capable_app(
        self, generic_valid_handler, codecov_vcr, mocker
    ):
        mock_refresh = mocker.patch.object(Github, "refresh_token")
        res = await generic_valid_handler.is_student()
        assert not res
        assert mock_refresh.call_count == 0

    @pytest.mark.asyncio
    async def test_is_student_github_education_503(self, valid_handler, codecov_vcr):
        res = await valid_handler.is_student()
        assert not res

    @pytest.mark.asyncio
    async def test_is_student_yes_student(
        self, student_app_capable_yes_student_handler, codecov_vcr
    ):
        result = await student_app_capable_yes_student_handler.is_student()
        assert result

    @pytest.mark.asyncio
    async def test_get_github_check_suite(
        self, integration_installed_handler, codecov_vcr
    ):
        res = await integration_installed_handler.get_check_suites(
            "75f355d8d14ba3d7761c728b4d2607cde0eef065"
        )
        expected_result = {
            "total_count": 1,
            "check_suites": [
                {
                    "id": 1341719124,
                    "node_id": "MDEwOkNoZWNrU3VpdGUxMzQxNzE5MTI0",
                    "head_branch": "thiago/base-no-base",
                    "head_sha": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
                    "status": "completed",
                    "conclusion": "success",
                    "url": "https://api.github.com/repos/ThiagoCodecov/example-python/check-suites/1341719124",
                    "before": "f0fe310b54d2b944a1d16b79958d9d3add7c902c",
                    "after": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
                    "pull_requests": [
                        {
                            "url": "https://api.github.com/repos/ThiagoCodecov/example-python/pulls/18",
                            "id": 383348775,
                            "number": 18,
                            "head": {
                                "ref": "thiago/base-no-base",
                                "sha": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
                                "repo": {
                                    "id": 156617777,
                                    "url": "https://api.github.com/repos/ThiagoCodecov/example-python",
                                    "name": "example-python",
                                },
                            },
                            "base": {
                                "ref": "master",
                                "sha": "f0895290dc26668faeeb20ee5ccd4cc995925775",
                                "repo": {
                                    "id": 156617777,
                                    "url": "https://api.github.com/repos/ThiagoCodecov/example-python",
                                    "name": "example-python",
                                },
                            },
                        }
                    ],
                    "app": {
                        "id": 254,
                        "slug": "codecov",
                        "node_id": "MDM6QXBwMjU0",
                        "owner": {
                            "login": "codecov",
                            "id": 8226205,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjgyMjYyMDU=",
                            "avatar_url": "https://avatars3.githubusercontent.com/u/8226205?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/codecov",
                            "html_url": "https://github.com/codecov",
                            "followers_url": "https://api.github.com/users/codecov/followers",
                            "following_url": "https://api.github.com/users/codecov/following{/other_user}",
                            "gists_url": "https://api.github.com/users/codecov/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/codecov/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/codecov/subscriptions",
                            "organizations_url": "https://api.github.com/users/codecov/orgs",
                            "repos_url": "https://api.github.com/users/codecov/repos",
                            "events_url": "https://api.github.com/users/codecov/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/codecov/received_events",
                            "type": "Organization",
                            "site_admin": False,
                        },
                        "name": "Codecov",
                        "description": "Codecov provides highly integrated tools to group, merge, archive and compare coverage reports. Whether your team is comparing changes in a pull request or reviewing a single commit, Codecov will improve the code review workflow and quality.\r\n\r\n## Code coverage done right.®\r\n\r\n1. Upload coverage reports from your CI builds.\r\n2. Codecov merges all builds and languages into one beautiful coherent report.\r\n3. Get commit statuses, pull request comments and coverage overlay via our browser extension.\r\n\r\nWhen Codecov merges your uploads it keeps track of the CI provider (inc. build details) and user specified context, e.g. `#unittest` ~ `#smoketest` or `#oldcode` ~ `#newcode`. You can track the `#unittest` coverage independently of other groups. [Learn more here](\r\nhttp://docs.codecov.io/docs/flags)\r\n\r\nThrough **Codecov's Browser Extension** reports overlay directly in GitHub UI to assist in code review. [Watch here](https://docs.codecov.io/docs/browser-extension)\r\n\r\n*Highly detailed* **pull request comments** and *customizable* **commit statuses** will improve your team's workflow and code coverage incrementally.\r\n\r\n**File backed configuration** all through the `codecov.yml`. \r\n\r\n## FAQ\r\n- Do you **merge multiple uploads** to the same commit? **Yes**\r\n- Do you **support multiple languages** in the same project? **Yes**\r\n- Can you **group coverage reports** by project and/or test type? **Yes**\r\n- How does **pricing** work? Only paid users can view reports and post statuses/comments. ",
                        "external_url": "https://codecov.io",
                        "html_url": "https://github.com/apps/codecov",
                        "created_at": "2016-09-25T14:18:27Z",
                        "updated_at": "2020-08-27T18:10:18Z",
                        "permissions": {
                            "administration": "read",
                            "checks": "write",
                            "contents": "read",
                            "issues": "read",
                            "members": "read",
                            "metadata": "read",
                            "pull_requests": "write",
                            "statuses": "write",
                        },
                        "events": [
                            "check_run",
                            "check_suite",
                            "create",
                            "delete",
                            "fork",
                            "membership",
                            "public",
                            "pull_request",
                            "push",
                            "release",
                            "repository",
                            "status",
                            "team_add",
                        ],
                    },
                    "created_at": "2020-10-14T23:00:59Z",
                    "updated_at": "2020-10-14T23:01:14Z",
                    "latest_check_runs_count": 1,
                    "check_runs_url": "https://api.github.com/repos/ThiagoCodecov/example-python/check-suites/1341719124/check-runs",
                    "head_commit": {
                        "id": "75f355d8d14ba3d7761c728b4d2607cde0eef065",
                        "tree_id": "b737740a931a34f5be73f553ea87a1161c917be0",
                        "message": "Adding README\n\nsurpriseaAKDS\n\nddkokgfnskfds\n\nBanana\n\nYallow\n\nABG",
                        "timestamp": "2020-10-13T15:15:31Z",
                        "author": {
                            "name": "Thiago Ramos",
                            "email": "thiago@codecov.io",
                        },
                        "committer": {
                            "name": "Thiago Ramos",
                            "email": "thiago@codecov.io",
                        },
                    },
                    "repository": {
                        "id": 156617777,
                        "node_id": "MDEwOlJlcG9zaXRvcnkxNTY2MTc3Nzc=",
                        "name": "example-python",
                        "full_name": "ThiagoCodecov/example-python",
                        "private": False,
                        "owner": {
                            "login": "ThiagoCodecov",
                            "id": 44376991,
                            "node_id": "MDQ6VXNlcjQ0Mzc2OTkx",
                            "avatar_url": "https://avatars3.githubusercontent.com/u/44376991?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/ThiagoCodecov",
                            "html_url": "https://github.com/ThiagoCodecov",
                            "followers_url": "https://api.github.com/users/ThiagoCodecov/followers",
                            "following_url": "https://api.github.com/users/ThiagoCodecov/following{/other_user}",
                            "gists_url": "https://api.github.com/users/ThiagoCodecov/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/ThiagoCodecov/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/ThiagoCodecov/subscriptions",
                            "organizations_url": "https://api.github.com/users/ThiagoCodecov/orgs",
                            "repos_url": "https://api.github.com/users/ThiagoCodecov/repos",
                            "events_url": "https://api.github.com/users/ThiagoCodecov/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/ThiagoCodecov/received_events",
                            "type": "User",
                            "site_admin": False,
                        },
                        "html_url": "https://github.com/ThiagoCodecov/example-python",
                        "description": "Python coverage example",
                        "fork": True,
                        "url": "https://api.github.com/repos/ThiagoCodecov/example-python",
                        "forks_url": "https://api.github.com/repos/ThiagoCodecov/example-python/forks",
                        "keys_url": "https://api.github.com/repos/ThiagoCodecov/example-python/keys{/key_id}",
                        "collaborators_url": "https://api.github.com/repos/ThiagoCodecov/example-python/collaborators{/collaborator}",
                        "teams_url": "https://api.github.com/repos/ThiagoCodecov/example-python/teams",
                        "hooks_url": "https://api.github.com/repos/ThiagoCodecov/example-python/hooks",
                        "issue_events_url": "https://api.github.com/repos/ThiagoCodecov/example-python/issues/events{/number}",
                        "events_url": "https://api.github.com/repos/ThiagoCodecov/example-python/events",
                        "assignees_url": "https://api.github.com/repos/ThiagoCodecov/example-python/assignees{/user}",
                        "branches_url": "https://api.github.com/repos/ThiagoCodecov/example-python/branches{/branch}",
                        "tags_url": "https://api.github.com/repos/ThiagoCodecov/example-python/tags",
                        "blobs_url": "https://api.github.com/repos/ThiagoCodecov/example-python/git/blobs{/sha}",
                        "git_tags_url": "https://api.github.com/repos/ThiagoCodecov/example-python/git/tags{/sha}",
                        "git_refs_url": "https://api.github.com/repos/ThiagoCodecov/example-python/git/refs{/sha}",
                        "trees_url": "https://api.github.com/repos/ThiagoCodecov/example-python/git/trees{/sha}",
                        "statuses_url": "https://api.github.com/repos/ThiagoCodecov/example-python/statuses/{sha}",
                        "languages_url": "https://api.github.com/repos/ThiagoCodecov/example-python/languages",
                        "stargazers_url": "https://api.github.com/repos/ThiagoCodecov/example-python/stargazers",
                        "contributors_url": "https://api.github.com/repos/ThiagoCodecov/example-python/contributors",
                        "subscribers_url": "https://api.github.com/repos/ThiagoCodecov/example-python/subscribers",
                        "subscription_url": "https://api.github.com/repos/ThiagoCodecov/example-python/subscription",
                        "commits_url": "https://api.github.com/repos/ThiagoCodecov/example-python/commits{/sha}",
                        "git_commits_url": "https://api.github.com/repos/ThiagoCodecov/example-python/git/commits{/sha}",
                        "comments_url": "https://api.github.com/repos/ThiagoCodecov/example-python/comments{/number}",
                        "issue_comment_url": "https://api.github.com/repos/ThiagoCodecov/example-python/issues/comments{/number}",
                        "contents_url": "https://api.github.com/repos/ThiagoCodecov/example-python/contents/{+path}",
                        "compare_url": "https://api.github.com/repos/ThiagoCodecov/example-python/compare/{base}...{head}",
                        "merges_url": "https://api.github.com/repos/ThiagoCodecov/example-python/merges",
                        "archive_url": "https://api.github.com/repos/ThiagoCodecov/example-python/{archive_format}{/ref}",
                        "downloads_url": "https://api.github.com/repos/ThiagoCodecov/example-python/downloads",
                        "issues_url": "https://api.github.com/repos/ThiagoCodecov/example-python/issues{/number}",
                        "pulls_url": "https://api.github.com/repos/ThiagoCodecov/example-python/pulls{/number}",
                        "milestones_url": "https://api.github.com/repos/ThiagoCodecov/example-python/milestones{/number}",
                        "notifications_url": "https://api.github.com/repos/ThiagoCodecov/example-python/notifications{?since,all,participating}",
                        "labels_url": "https://api.github.com/repos/ThiagoCodecov/example-python/labels{/name}",
                        "releases_url": "https://api.github.com/repos/ThiagoCodecov/example-python/releases{/id}",
                        "deployments_url": "https://api.github.com/repos/ThiagoCodecov/example-python/deployments",
                    },
                }
            ],
        }
        print(res)
        assert res == expected_result

    @pytest.mark.asyncio
    async def test_list_github_app_webhook_deliveries(self, codecov_vcr):
        ghapp_handler = Github(
            token=dict(key="not the real token"),
            oauth_consumer_token=dict(
                key="client_id",
                secret="client_secret",
            ),
        )
        deliveries = []
        async for res in ghapp_handler.list_webhook_deliveries():
            deliveries += res
        assert len(deliveries) == 16
        assert deliveries[0] == {
            "id": 17324040107,
            "guid": "53c93580-7a6e-11ed-96c9-5e1ce3e5574e",
            "delivered_at": "2022-12-12T22:42:59Z",
            "redelivery": False,
            "duration": 0.37,
            "status": "OK",
            "status_code": 200,
            "event": "installation_repositories",
            "action": "added",
            "installation_id": None,
            "repository_id": None,
            "url": "",
        }

    @pytest.mark.asyncio
    async def test_list_github_app_webhook_redelivery(self, codecov_vcr):
        ghapp_handler = Github(
            token=dict(key="not real token"),
            oauth_consumer_token=dict(
                key="client_id",
                secret="client_secret",
            ),
        )
        res = await ghapp_handler.request_webhook_redelivery(17322555251)
        assert res is True
