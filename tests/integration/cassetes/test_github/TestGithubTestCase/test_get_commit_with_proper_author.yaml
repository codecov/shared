interactions:
- request:
    body: ''
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - Default
    method: GET
    uri: https://api.github.com/repos/ThiagoCodecov/example-python/commits/75f355d8d14ba3d7761c728b4d2607cde0eef065
  response:
    content: '{"sha":"75f355d8d14ba3d7761c728b4d2607cde0eef065","node_id":"MDY6Q29tbWl0MTU2NjE3Nzc3Ojc1ZjM1NWQ4ZDE0YmEzZDc3NjFjNzI4YjRkMjYwN2NkZTBlZWYwNjU=","commit":{"author":{"name":"Thiago
      Ramos","email":"thiago@codecov.io","date":"2020-05-18T03:16:22Z"},"committer":{"name":"Thiago
      Ramos","email":"thiago@codecov.io","date":"2020-10-13T15:15:31Z"},"message":"Adding
      README\n\nsurpriseaAKDS\n\nddkokgfnskfds\n\nBanana\n\nYallow\n\nABG","tree":{"sha":"b737740a931a34f5be73f553ea87a1161c917be0","url":"https://api.github.com/repos/ThiagoCodecov/example-python/git/trees/b737740a931a34f5be73f553ea87a1161c917be0"},"url":"https://api.github.com/repos/ThiagoCodecov/example-python/git/commits/75f355d8d14ba3d7761c728b4d2607cde0eef065","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/ThiagoCodecov/example-python/commits/75f355d8d14ba3d7761c728b4d2607cde0eef065","html_url":"https://github.com/ThiagoCodecov/example-python/commit/75f355d8d14ba3d7761c728b4d2607cde0eef065","comments_url":"https://api.github.com/repos/ThiagoCodecov/example-python/commits/75f355d8d14ba3d7761c728b4d2607cde0eef065/comments","author":{"login":"ThiagoCodecov","id":44376991,"node_id":"MDQ6VXNlcjQ0Mzc2OTkx","avatar_url":"https://avatars3.githubusercontent.com/u/44376991?v=4","gravatar_id":"","url":"https://api.github.com/users/ThiagoCodecov","html_url":"https://github.com/ThiagoCodecov","followers_url":"https://api.github.com/users/ThiagoCodecov/followers","following_url":"https://api.github.com/users/ThiagoCodecov/following{/other_user}","gists_url":"https://api.github.com/users/ThiagoCodecov/gists{/gist_id}","starred_url":"https://api.github.com/users/ThiagoCodecov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ThiagoCodecov/subscriptions","organizations_url":"https://api.github.com/users/ThiagoCodecov/orgs","repos_url":"https://api.github.com/users/ThiagoCodecov/repos","events_url":"https://api.github.com/users/ThiagoCodecov/events{/privacy}","received_events_url":"https://api.github.com/users/ThiagoCodecov/received_events","type":"User","site_admin":false},"committer":{"login":"ThiagoCodecov","id":44376991,"node_id":"MDQ6VXNlcjQ0Mzc2OTkx","avatar_url":"https://avatars3.githubusercontent.com/u/44376991?v=4","gravatar_id":"","url":"https://api.github.com/users/ThiagoCodecov","html_url":"https://github.com/ThiagoCodecov","followers_url":"https://api.github.com/users/ThiagoCodecov/followers","following_url":"https://api.github.com/users/ThiagoCodecov/following{/other_user}","gists_url":"https://api.github.com/users/ThiagoCodecov/gists{/gist_id}","starred_url":"https://api.github.com/users/ThiagoCodecov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ThiagoCodecov/subscriptions","organizations_url":"https://api.github.com/users/ThiagoCodecov/orgs","repos_url":"https://api.github.com/users/ThiagoCodecov/repos","events_url":"https://api.github.com/users/ThiagoCodecov/events{/privacy}","received_events_url":"https://api.github.com/users/ThiagoCodecov/received_events","type":"User","site_admin":false},"parents":[{"sha":"f0895290dc26668faeeb20ee5ccd4cc995925775","url":"https://api.github.com/repos/ThiagoCodecov/example-python/commits/f0895290dc26668faeeb20ee5ccd4cc995925775","html_url":"https://github.com/ThiagoCodecov/example-python/commit/f0895290dc26668faeeb20ee5ccd4cc995925775"}],"stats":{"total":3593,"additions":38,"deletions":3555},"files":[{"sha":"1585e843d6b3bb9351592db62eddb2f0a0c4a484","filename":".gitignore","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/ThiagoCodecov/example-python/blob/75f355d8d14ba3d7761c728b4d2607cde0eef065/.gitignore","raw_url":"https://github.com/ThiagoCodecov/example-python/raw/75f355d8d14ba3d7761c728b4d2607cde0eef065/.gitignore","contents_url":"https://api.github.com/repos/ThiagoCodecov/example-python/contents/.gitignore?ref=75f355d8d14ba3d7761c728b4d2607cde0eef065","patch":"@@
      -8,6 +8,11 @@ __pycache__/\n \n .coverage\n coverage.xml\n+flagone.coverage.xml\n+flagtwo.coverage.xml\n+unit.coverage.xml\n+dev.sh\n+direct.sh\n
      \n # Distribution / packaging\n .Python"},{"sha":"0f9bd797f9e0a2be4f4e707d38c70553d2bb5ec8","filename":"Makefile","status":"modified","additions":30,"deletions":4,"changes":34,"blob_url":"https://github.com/ThiagoCodecov/example-python/blob/75f355d8d14ba3d7761c728b4d2607cde0eef065/Makefile","raw_url":"https://github.com/ThiagoCodecov/example-python/raw/75f355d8d14ba3d7761c728b4d2607cde0eef065/Makefile","contents_url":"https://api.github.com/repos/ThiagoCodecov/example-python/contents/Makefile?ref=75f355d8d14ba3d7761c728b4d2607cde0eef065","patch":"@@
      -1,5 +1,6 @@\n dev_token = ${LOCAL_TOKEN}\n production_token = ${PRODUCTION_TOKEN}\n+staging_token
      = ${STAGING_TOKEN}\n \n test:\n \trm coverage.xml || true\n@@ -12,16 +13,25
      @@ test.flagone:\n \tpython -m pytest --cov=./ tests/test_number_two.py --cov-report=xml:flagone.coverage.xml\n
      \n dev.report:\n-\t./dev.sh -t ${dev_token} -F flagtwo -f flagtwo.coverage.xml\n+\t./dev.sh
      -t ${dev_token} -F pt -f flagtwo.coverage.xml\n+\n+staging.report:\n+\t./production.sh
      -t ${staging_token} -F pt -f flagtwo.coverage.xml -u https://stage-web.codecov.dev\n+\n+direct.report:\n+\t./direct.sh
      -t ${dev_token} -F pt -f flagtwo.coverage.xml\n \n dev.report.flagone:\n-\t./dev.sh
      -t ${dev_token} -F flagone -f flagone.coverage.xml\n+\t./dev.sh -t ${dev_token}
      -F psdb -f flagone.coverage.xml\n \n production.report:\n-\t./production.sh
      -t ${production_token} -F flagtwo  -f flagtwo.coverage.xml\n+\t./production.sh
      -t ${production_token} -F pt  -f flagtwo.coverage.xml -b 123\n \n production.report.flagone:\n-\t./production.sh
      -t ${production_token} -F flagone  -f flagone.coverage.xml\n+\t./production.sh
      -t ${production_token} -F psdb  -f flagone.coverage.xml -b 654\n+\n+staging.report.flagone:\n+\t./production.sh
      -t ${staging_token} -F psdb  -f flagone.coverage.xml -u https://codecov.io\n
      \n dev.full:\n \t${MAKE} dev.download\n@@ -35,6 +45,11 @@ dev.partial:\n \t${MAKE}
      test\n \t${MAKE} dev.report\n \n+dev.flagone:\n+\t${MAKE} dev.download\n+\t${MAKE}
      test.flagone\n+\t${MAKE} dev.report.flagone\n+\n production.full:\n \t${MAKE}
      production.download\n \t${MAKE} test.flagone\n@@ -47,10 +62,21 @@ production.partial:\n
      \t${MAKE} test\n \t${MAKE} production.report\n \n+staging.full:\n+\t${MAKE}
      production.download\n+\t${MAKE} test.flagone\n+\t${MAKE} staging.report.flagone\n+\t${MAKE}
      test\n+\t${MAKE} staging.report\n+\n dev.download:\n \tcurl -s http://localhost/bash
      > dev.sh\n \tchmod +x ./dev.sh\n \n production.download:\n \tcurl -s https://codecov.io/bash
      > production.sh\n \tchmod +x ./production.sh\n+\n+staging.download:\n+\tcurl
      -s https://codecov.io/bash > staging.sh\n+\tchmod +x ./staging.sh"},{"sha":"f2a9f3e932bb13cb506de777ef2c0940feb9ee1c","filename":"README.md","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/ThiagoCodecov/example-python/blob/f0895290dc26668faeeb20ee5ccd4cc995925775/README.md","raw_url":"https://github.com/ThiagoCodecov/example-python/raw/f0895290dc26668faeeb20ee5ccd4cc995925775/README.md","contents_url":"https://api.github.com/repos/ThiagoCodecov/example-python/contents/README.md?ref=f0895290dc26668faeeb20ee5ccd4cc995925775","patch":"@@
      -1,74 +0,0 @@\n-Now this\n-704CE324-640A-4464-B8C3-E88AD3167C40\n-60C40C8C-0CC8-42EE-93C3-FFCDA777E328\n-83D8CF33-58C9-48A8-B013-D8D2A1B99FBA\n-094A8584-F366-47E6-8E86-4098F6450D8F\n-2FAFBE5F-E5D1-4D1E-AB4B-96700303585D\n-C8292636-FBBC-4F57-B94B-A74B779C99CA\n-663EB689-A841-40FC-B5C5-7153692D5CC4\n-053DE902-60F7-486F-B3B0-12FD053FF137\n-521407A7-B324-4D2D-89EE-6370D605B917\n-C2B1DDBC-DCBD-4D21-B44D-7E01277DA64F\n-20EE4D09-F49E-474B-B7AF-4E4916EF82FA\n-E0637A75-CED2-48C1-AE34-A1FAB6AAEF8A\n-888C5E8A-793B-4BF7-8E40-AC15CDCE314F\n-A6D5604D-6AB4-4E3F-9636-CDA27CD5B0E9\n-8C93D40F-9BD0-4C70-A474-3DE83B491330\n-5609B3F3-74E2-42AE-B298-51B8280371C6\n-C1B0D231-650E-4BA2-A5F1-A6EDB515B073\n-1ED35DC7-4E13-4F33-AD4C-658EB45CD85B\n-286EEB83-BD2B-40FE-9AF2-4EBA81297A48\n-1AACE5C5-E03B-40D9-AA32-375B0CB63865\n-E9CF0F03-6B73-4643-BD9F-10B7A037BEF3\n-A39C2BB3-44ED-4B62-A177-0AA29595BC99\n-95763FF2-95F9-45AB-B390-283A1975E8F0\n-A0192C74-D04F-49F0-8DB7-5AD6A575914F\n-41670326-FBE3-4E67-AAD1-29CA48E18659\n-1A61D4F1-C79F-4D29-BD9B-559B7FB17063\n-BBB63289-5667-4FAE-A403-A0CA61F1DC7C\n-51A26161-0F2C-4A10-A0DF-34F9600C8E8B\n-909720D6-CC5A-4F70-ACB1-3B13C22756F5\n-CE6BF3DF-D0D4-4899-A951-29F7EFAAF4D7\n-BA5677D4-EE49-4C2F-817E-BE26542063F5\n-02BD4F67-4902-4AB7-966D-F24C69A29303\n-42E5299B-6270-4259-BDBF-8E73A9784B4D\n-3E2B9185-DDB0-4683-8B75-A684C27EC113\n-8406E591-E8CE-40E8-A37C-D0A12114B88B\n-4E2CEA68-D2C0-4AE9-B91E-0F2EC4542918\n-B644C629-1C4D-4627-9DF0-DE9385CEAD71\n-27C6788F-0CAE-4EB1-B8F3-29857EC3FB2A\n-D5218308-1E5C-411E-9BB4-2A3D053D2EF9\n-7828F0A1-DF19-41D0-855C-F704C9F19ECC\n-C1F02001-117D-4EFB-B8C2-B6C6C474BD79\n-67CD977A-D6CB-4248-8528-3E7A340154C6\n-6663A943-C39A-4F60-AC84-D917A39EC74A\n-9A742E42-741A-4C46-87B6-EF8FD0FA8DE7\n-768A0A2C-4E79-4BB5-9815-C45316D88265\n-F0F82276-44D0-4A89-92D0-32BB652160EB\n-36BED83E-FC17-46A2-825D-BCCB5783ECE9\n-8AAB2B79-2543-4769-B4E5-C7F8DF996128\n-BC8B58F8-D84F-41DA-8411-D145DFBBCDF7\n-90E63F6E-2D82-4C95-B711-55F48F203062\n-6F2AA94B-B8B7-4E5D-89F2-4B781B58FE20\n-49C38017-A85B-4A35-9891-A9A8C929EBD1\n-75FF7739-474E-4F40-A1F5-DA644247777C\n-D91343F0-6020-451C-AE34-AE13C54768B7\n-86238B48-1C1A-404D-84F6-540BA12026D0\n-96F6A299-FA1B-40E7-97BD-BB78805B17E4\n-76E3FB43-76B6-4ED3-9315-818C4BB073D2\n-7574F3EA-731E-4605-A7E7-31DC93690FF5\n-7BBD2F88-35FB-4788-80DA-1A253AD2570B\n-EAF7489D-C2DD-4CB4-B53D-DD7781CE329E\n-F904B847-3311-42AC-A0A0-36A40EA7D488\n-E97F66AF-BBF5-47E8-8576-9148110A1E57\n-63C8D1C3-703F-40A1-8F7B-580A4D85D632\n-C989EE78-765E-479B-B8D5-8EDF99EAB6D0\n-F205752F-E9E5-4B41-8334-8366A8F44EA6\n-23F7D7DC-F29C-47A5-BEA9-D2C600255F32\n-FCFA1979-26B8-4048-AF74-FE6DA53C96B6\n-5B7972E5-0E8A-4134-B6F4-6AD44FE97085\n-44521915-9E24-4E78-A553-8696280B1CE2\n-EC5B1F9F-2293-4947-8E01-62F6F828E139\n-A8FC2A63-27CD-4C2F-868C-28F728EB8EEF\n-8E855C85-E884-4187-A673-0D77F3F379A1\n-182B7277-7D2C-420B-B005-92418CBD6F09"},{"sha":"622f906eac3a67c6f77f3a96149c555651ba6ac3","filename":"changed_production.sh","status":"removed","additions":0,"deletions":1660,"changes":1660,"blob_url":"https://github.com/ThiagoCodecov/example-python/blob/f0895290dc26668faeeb20ee5ccd4cc995925775/changed_production.sh","raw_url":"https://github.com/ThiagoCodecov/example-python/raw/f0895290dc26668faeeb20ee5ccd4cc995925775/changed_production.sh","contents_url":"https://api.github.com/repos/ThiagoCodecov/example-python/contents/changed_production.sh?ref=f0895290dc26668faeeb20ee5ccd4cc995925775","patch":"@@
      -1,1660 +0,0 @@\n-#!/usr/bin/env bash\n-\n-# Apache License Version 2.0, January
      2004\n-# https://github.com/codecov/codecov-bash/blob/main/LICENSE\n-\n-\n-set
      -e +o pipefail\n-\n-VERSION=\"20191211-b8db533\"\n-\n-url=\"https://codecov.io\"\n-env=\"$CODECOV_ENV\"\n-service=\"\"\n-token=\"\"\n-search_in=\"\"\n-flags=\"\"\n-exit_with=0\n-curlargs=\"\"\n-curlawsargs=\"\"\n-dump=\"0\"\n-clean=\"0\"\n-curl_s=\"-s\"\n-name=\"$CODECOV_NAME\"\n-include_cov=\"\"\n-exclude_cov=\"\"\n-ddp=\"$(echo
      ~)/Library/Developer/Xcode/DerivedData\"\n-xp=\"\"\n-files=\"\"\n-cacert=\"$CODECOV_CA_BUNDLE\"\n-gcov_ignore=\"-not
      -path ''./bower_components/**'' -not -path ''./node_modules/**'' -not -path
      ''./vendor/**''\"\n-gcov_include=\"\"\n-\n-ft_gcov=\"1\"\n-ft_coveragepy=\"1\"\n-ft_fix=\"1\"\n-ft_search=\"1\"\n-ft_s3=\"1\"\n-ft_network=\"1\"\n-ft_xcodellvm=\"1\"\n-ft_xcodeplist=\"0\"\n-ft_gcovout=\"1\"\n-\n-_git_root=$(git
      rev-parse --show-toplevel 2>/dev/null || hg root 2>/dev/null || echo $PWD)\n-git_root=\"$_git_root\"\n-codecov_yml=\"\"\n-remote_addr=\"\"\n-if
      [ \"$git_root\" = \"$PWD\" ];\n-then\n-  git_root=\".\"\n-fi\n-\n-url_o=\"\"\n-pr_o=\"\"\n-build_o=\"\"\n-commit_o=\"\"\n-search_in_o=\"\"\n-tag_o=\"\"\n-branch_o=\"\"\n-slug_o=\"\"\n-prefix_o=\"\"\n-\n-commit=\"$VCS_COMMIT_ID\"\n-branch=\"$VCS_BRANCH_NAME\"\n-pr=\"$VCS_PULL_REQUEST\"\n-slug=\"$VCS_SLUG\"\n-tag=\"$VCS_TAG\"\n-build_url=\"$CI_BUILD_URL\"\n-build=\"$CI_BUILD_ID\"\n-job=\"$CI_JOB_ID\"\n-\n-beta_xcode_partials=\"\"\n-\n-proj_root=\"$git_root\"\n-gcov_exe=\"gcov\"\n-gcov_arg=\"\"\n-\n-b=\"\\033[0;36m\"\n-g=\"\\033[0;32m\"\n-r=\"\\033[0;31m\"\n-e=\"\\033[0;90m\"\n-x=\"\\033[0m\"\n-\n-show_help()
      {\n-cat << EOF\n-\n-                Codecov Bash $VERSION\n-\n-          Global
      report uploading tool for Codecov\n-       Documentation at https://docs.codecov.io/docs\n-    Contribute
      at https://github.com/codecov/codecov-bash\n-\n-\n-    -h          Display this
      help and exit\n-    -f FILE     Target file(s) to upload\n-\n-                 -f
      \"path/to/file\"     only upload this file\n-                                       skips
      searching unless provided patterns below\n-\n-                 -f ''!*.bar''           ignore
      all files at pattern *.bar\n-                 -f ''*.foo''            include
      all files at pattern *.foo\n-                 Must use single quotes.\n-                 This
      is non-exclusive, use -s \"*.foo\" to match specific paths.\n-\n-    -s DIR       Directory
      to search for coverage reports.\n-                 Already searches project
      root and artifact folders.\n-    -t TOKEN     Set the private repository token\n-                 (option)
      set environment variable CODECOV_TOKEN=:uuid\n-\n-                 -t @/path/to/token_file\n-                 -t
      uuid\n-\n-    -n NAME      Custom defined name of the upload. Visible in Codecov
      UI\n-\n-    -e ENV       Specify environment variables to be included with this
      build\n-                 Also accepting environment variables: CODECOV_ENV=VAR,VAR2\n-\n-                 -e
      VAR,VAR2\n-\n-    -X feature   Toggle functionalities\n-\n-                 -X
      gcov          Disable gcov\n-                 -X coveragepy    Disable python
      coverage\n-                 -X fix           Disable report fixing\n-                 -X
      search        Disable searching for reports\n-                 -X xcode         Disable
      xcode processing\n-                 -X network       Disable uploading the file
      network\n-                 -X gcovout       Disable gcov output\n-\n-    -N           The
      commit SHA of the parent for which you are uploading coverage. If not present,\n-                 the
      parent will be determined using the API of your repository provider.\n-                 When
      using the repository provider''s API, the parent is determined via finding\n-                 the
      closest ancestor to the commit.\n-\n-    -R root dir  Used when not in git/hg
      project to identify project root directory\n-    -y conf file Used to specify
      the location of the .codecov.yml config file\n-    -F flag      Flag the upload
      to group coverage metrics\n-\n-                 -F unittests        This upload
      is only unittests\n-                 -F integration      This upload is only
      integration tests\n-                 -F ui,chrome        This upload is Chrome
      - UI tests\n-\n-    -c           Move discovered coverage reports to the trash\n-    -Z           Exit
      with 1 if not successful. Default will Exit with 0\n-\n-    -- xcode --\n-    -D           Custom
      Derived Data Path for Coverage.profdata and gcov processing\n-                 Default
      ''~/Library/Developer/Xcode/DerivedData''\n-    -J           Specify packages
      to build coverage.\n-                 This can significantly reduces time to
      build coverage reports.\n-\n-                 -J ''MyAppName''      Will match
      \"MyAppName\" and \"MyAppNameTests\"\n-                 -J ''^ExampleApp$''   Will
      match only \"ExampleApp\" not \"ExampleAppTests\"\n-\n-    -- gcov --\n-    -g
      GLOB      Paths to ignore during gcov gathering\n-    -G GLOB      Paths to
      include during gcov gathering\n-    -p dir       Project root directory\n-                 Also
      used when preparing gcov\n-    -k prefix    Prefix filepaths to help resolve
      path fixing: https://github.com/codecov/support/issues/472\n-    -x gcovexe   gcov
      executable to run. Defaults to ''gcov''\n-    -a gcovargs  extra arguments to
      pass to gcov\n-\n-    -- Override CI Environment Variables --\n-       These
      variables are automatically detected by popular CI providers\n-\n-    -B branch    Specify
      the branch name\n-    -C sha       Specify the commit sha\n-    -P pr        Specify
      the pull request number\n-    -b build     Specify the build number\n-    -T
      tag       Specify the git tag\n-\n-    -- Enterprise --\n-    -u URL       Set
      the target url for Enterprise customers\n-                 Not required when
      retrieving the bash uploader from your CCE\n-                 (option) Set environment
      variable CODECOV_URL=https://my-hosted-codecov.com\n-    -r SLUG      owner/repo
      slug used instead of the private repo token in Enterprise\n-                 (option)
      set environment variable CODECOV_SLUG=:owner/:repo\n-                 (option)
      set in your codecov.yml \"codecov.slug\"\n-    -S PATH      File path to your
      cacert.pem file used to verify ssl with Codecov Enterprise (optional)\n-                 (option)
      Set environment variable: CODECOV_CA_BUNDLE=\"/path/to/ca.pem\"\n-    -U curlargs  Extra
      curl arguments to communicate with Codecov. e.g., -U \"--proxy http://http-proxy\"\n-    -A
      curlargs  Extra curl arguments to communicate with AWS.\n-\n-    -- Debugging
      --\n-    -d           Don''t upload, but dump upload file to stdout\n-    -K           Remove
      color from the output\n-    -v           Verbose mode\n-\n-EOF\n-}\n-\n-\n-say()
      {\n-  echo -e \"$1\"\n-}\n-\n-\n-urlencode() {\n-  echo \"$1\" | curl -Gso /dev/null
      -w %{url_effective} --data-urlencode @- \"\" | cut -c 3- | sed -e ''s/%0A//''\n-}\n-\n-\n-swiftcov()
      {\n-  _dir=$(dirname \"$1\" | sed ''s/\\(Build\\).*/\\1/g'')\n-  for _type in
      app framework xctest\n-  do\n-    find \"$_dir\" -name \"*.$_type\" | while
      read f\n-    do\n-      _proj=${f##*/}\n-      _proj=${_proj%.\"$_type\"}\n-      if
      [ \"$2\" = \"\" ] || [ \"$(echo \"$_proj\" | grep -i \"$2\")\" != \"\" ];\n-      then\n-        say
      \"    $g+$x Building reports for $_proj $_type\"\n-        dest=$([ -f \"$f/$_proj\"
      ] && echo \"$f/$_proj\" || echo \"$f/Contents/MacOS/$_proj\")\n-        _proj_name=$(echo
      \"$_proj\" | sed -e ''s/[[:space:]]//g'')\n-        xcrun llvm-cov show $beta_xcode_partials
      -instr-profile \"$1\" \"$dest\" > \"$_proj_name.$_type.coverage.txt\" \\\n-         ||
      say \"    ${r}x>${x} llvm-cov failed to produce results for $dest\"\n-      fi\n-    done\n-  done\n-}\n-\n-\n-#
      Credits to: https://gist.github.com/pkuczynski/8665367\n-parse_yaml() {\n-   local
      prefix=$2\n-   local s=''[[:space:]]*'' w=''[a-zA-Z0-9_]*'' fs=$(echo @|tr @
      ''\\034'')\n-   sed -ne \"s|^\\($s\\)\\($w\\)$s:$s\\\"\\(.*\\)\\\"$s\\$|\\1$fs\\2$fs\\3|p\"
      \\\n-        -e \"s|^\\($s\\)\\($w\\)$s:$s\\(.*\\)$s\\$|\\1$fs\\2$fs\\3|p\"
      $1 |\n-   awk -F$fs ''{\n-      indent = length($1)/2;\n-      vname[indent]
      = $2;\n-      for (i in vname) {if (i > indent) {delete vname[i]}}\n-      if
      (length($3) > 0) {\n-         vn=\"\"; if (indent > 0) {vn=(vn)(vname[0])(\"_\")}\n-         printf(\"%s%s%s=\\\"%s\\\"\\n\",
      \"''$prefix''\",vn, $2, $3);\n-      }\n-   }''\n-}\n-\n-\n-if [ $# != 0 ];\n-then\n-  while
      getopts \"a:A:b:B:cC:dD:e:f:F:g:G:hJ:k:Kn:p:P:r:R:y:s:S:t:T:u:U:vx:X:ZN:\" o\n-  do\n-    case
      \"$o\" in\n-      \"N\")\n-        parent=$OPTARG\n-        ;;\n-      \"a\")\n-        gcov_arg=$OPTARG\n-        ;;\n-      \"A\")\n-        curlawsargs=\"$OPTARG\"\n-        ;;\n-      \"b\")\n-        build_o=\"$OPTARG\"\n-        ;;\n-      \"B\")\n-        branch_o=\"$OPTARG\"\n-        ;;\n-      \"c\")\n-        clean=\"1\"\n-        ;;\n-      \"C\")\n-        commit_o=\"$OPTARG\"\n-        ;;\n-      \"d\")\n-        dump=\"1\"\n-        ;;\n-      \"D\")\n-        ddp=\"$OPTARG\"\n-        ;;\n-      \"e\")\n-        env=\"$env,$OPTARG\"\n-        ;;\n-      \"f\")\n-        if
      [ \"${OPTARG::1}\" = \"!\" ];\n-        then\n-          exclude_cov=\"$exclude_cov
      -not -path ''${OPTARG:1}''\"\n-\n-        elif [[ \"$OPTARG\" = *\"*\"* ]];\n-        then\n-          include_cov=\"$include_cov
      -or -name ''$OPTARG''\"\n-\n-        else\n-          ft_search=0\n-          if
      [ \"$files\" = \"\" ];\n-          then\n-            files=\"$OPTARG\"\n-          else\n-            files=\"$files\n-$OPTARG\"\n-          fi\n-        fi\n-        ;;\n-      \"F\")\n-        if
      [ \"$flags\" = \"\" ];\n-        then\n-          flags=\"$OPTARG\"\n-        else\n-          flags=\"$flags,$OPTARG\"\n-        fi\n-        ;;\n-      \"g\")\n-        gcov_ignore=\"$gcov_ignore
      -not -path ''$OPTARG''\"\n-        ;;\n-      \"G\")\n-        gcov_include=\"$gcov_include
      -path ''$OPTARG''\"\n-        ;;\n-      \"h\")\n-        show_help\n-        exit
      0;\n-        ;;\n-      \"J\")\n-        ft_xcodellvm=\"1\"\n-        ft_xcodeplist=\"0\"\n-        if
      [ \"$xp\" = \"\" ];\n-        then\n-          xp=\"$OPTARG\"\n-        else\n-          xp=\"$xp\\|$OPTARG\"\n-        fi\n-        ;;\n-      \"k\")\n-        prefix_o=$(echo
      \"$OPTARG\" | sed -e ''s:^/*::'' -e ''s:/*$::'')\n-        ;;\n-      \"K\")\n-        b=\"\"\n-        g=\"\"\n-        r=\"\"\n-        e=\"\"\n-        x=\"\"\n-        ;;\n-      \"n\")\n-        name=\"$OPTARG\"\n-        ;;\n-      \"p\")\n-        proj_root=\"$OPTARG\"\n-        ;;\n-      \"P\")\n-        pr_o=\"$OPTARG\"\n-        ;;\n-      \"r\")\n-        slug_o=\"$OPTARG\"\n-        ;;\n-      \"R\")\n-        git_root=\"$OPTARG\"\n-        ;;\n-      \"s\")\n-        if
      [ \"$search_in_o\" = \"\" ];\n-        then\n-          search_in_o=\"$OPTARG\"\n-        else\n-          search_in_o=\"$search_in_o
      $OPTARG\"\n-        fi\n-        ;;\n-      \"S\")\n-        cacert=\"--cacert
      \\\"$OPTARG\\\"\"\n-        ;;\n-      \"t\")\n-        if [ \"${OPTARG::1}\"
      = \"@\" ];\n-        then\n-          token=$(cat \"${OPTARG:1}\" | tr -d ''
      \\n'')\n-        else\n-          token=\"$OPTARG\"\n-        fi\n-        ;;\n-      \"T\")\n-        tag_o=\"$OPTARG\"\n-        ;;\n-      \"u\")\n-        url_o=$(echo
      \"$OPTARG\" | sed -e ''s/\\/$//'')\n-        ;;\n-      \"U\")\n-        curlargs=\"$OPTARG\"\n-        ;;\n-      \"v\")\n-        set
      -x\n-        curl_s=\"\"\n-        ;;\n-      \"x\")\n-        gcov_exe=$OPTARG\n-        ;;\n-      \"X\")\n-        if
      [ \"$OPTARG\" = \"gcov\" ];\n-        then\n-          ft_gcov=\"0\"\n-        elif
      [ \"$OPTARG\" = \"coveragepy\" ] || [ \"$OPTARG\" = \"py\" ];\n-        then\n-          ft_coveragepy=\"0\"\n-        elif
      [ \"$OPTARG\" = \"gcovout\" ];\n-        then\n-          ft_gcovout=\"0\"\n-        elif
      [ \"$OPTARG\" = \"xcodellvm\" ];\n-        then\n-          ft_xcodellvm=\"1\"\n-          ft_xcodeplist=\"0\"\n-        elif
      [ \"$OPTARG\" = \"fix\" ] || [ \"$OPTARG\" = \"fixes\" ];\n-        then\n-          ft_fix=\"0\"\n-        elif
      [ \"$OPTARG\" = \"xcode\" ];\n-        then\n-          ft_xcodellvm=\"0\"\n-          ft_xcodeplist=\"0\"\n-        elif
      [ \"$OPTARG\" = \"search\" ];\n-        then\n-          ft_search=\"0\"\n-        elif
      [ \"$OPTARG\" = \"xcodepartials\" ];\n-        then\n-          beta_xcode_partials=\"-use-color\"\n-        elif
      [ \"$OPTARG\" = \"network\" ];\n-        then\n-          ft_network=\"0\"\n-        elif
      [ \"$OPTARG\" = \"s3\" ];\n-        then\n-          ft_s3=\"0\"\n-        fi\n-        ;;\n-      \"y\")\n-        codecov_yml=\"$OPTARG\"\n-        ;;\n-      \"Z\")\n-        exit_with=1\n-        ;;\n-    esac\n-  done\n-fi\n-\n-say
      \"\n-  _____          _\n- / ____|        | |\n-| |     ___   __| | ___  ___
      _____   __\n-| |    / _ \\\\ / _\\` |/ _ \\\\/ __/ _ \\\\ \\\\ / /\n-| |___|
      (_) | (_| |  __/ (_| (_) \\\\ V /\n- \\\\_____\\\\___/ \\\\__,_|\\\\___|\\\\___\\\\___/
      \\\\_/\n-                              Bash-$VERSION\n-\n-\"\n-\n-search_in=\"$proj_root\"\n-\n-if
      [ \"$JENKINS_URL\" != \"\" ];\n-then\n-  say \"$e==>$x Jenkins CI detected.\"\n-  #
      https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project\n-  #
      https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin#GitHubpullrequestbuilderplugin-EnvironmentVariables\n-  service=\"jenkins\"\n-\n-  if
      [ \"$ghprbSourceBranch\" != \"\" ];\n-  then\n-     branch=\"$ghprbSourceBranch\"\n-  elif
      [ \"$GIT_BRANCH\" != \"\" ];\n-  then\n-     branch=\"$GIT_BRANCH\"\n-  elif
      [ \"$BRANCH_NAME\" != \"\" ];\n-  then\n-    branch=\"$BRANCH_NAME\"\n-  fi\n-\n-  if
      [ \"$ghprbActualCommit\" != \"\" ];\n-  then\n-    commit=\"$ghprbActualCommit\"\n-  elif
      [ \"$GIT_COMMIT\" != \"\" ];\n-  then\n-    commit=\"$GIT_COMMIT\"\n-  fi\n-\n-  if
      [ \"$ghprbPullId\" != \"\" ];\n-  then\n-    pr=\"$ghprbPullId\"\n-  elif [
      \"$CHANGE_ID\" != \"\" ];\n-  then\n-    pr=\"$CHANGE_ID\"\n-  fi\n-\n-  build=\"$BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$BUILD_URL\")\n-\n-elif [ \"$CI\" = \"true\" ] && [ \"$TRAVIS\" = \"true\"
      ] && [ \"$SHIPPABLE\" != \"true\" ];\n-then\n-  say \"$e==>$x Travis CI detected.\"\n-  #
      https://docs.travis-ci.com/user/environment-variables/\n-  service=\"travis\"\n-  commit=\"${TRAVIS_PULL_REQUEST_SHA:-$TRAVIS_COMMIT}\"\n-  build=\"$TRAVIS_JOB_NUMBER\"\n-  pr=\"$TRAVIS_PULL_REQUEST\"\n-  job=\"$TRAVIS_JOB_ID\"\n-  slug=\"$TRAVIS_REPO_SLUG\"\n-  env=\"$env,TRAVIS_OS_NAME\"\n-  tag=\"$TRAVIS_TAG\"\n-  if
      [ \"$TRAVIS_BRANCH\" != \"$TRAVIS_TAG\" ];\n-  then\n-    branch=\"$TRAVIS_BRANCH\"\n-  fi\n-\n-  language=$(compgen
      -A variable | grep \"^TRAVIS_.*_VERSION$\" | head -1)\n-  if [ \"$language\"
      != \"\" ];\n-  then\n-    env=\"$env,${!language}\"\n-  fi\n-\n-elif [ \"$CODEBUILD_BUILD_ARN\"
      != \"\" ];\n-then\n-  say \"$e==>$x AWS Codebuild detected.\"\n-  # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n-  service=\"codebuild\"\n-  commit=\"$CODEBUILD_RESOLVED_SOURCE_VERSION\"\n-  build=\"$CODEBUILD_BUILD_ID\"\n-  branch=\"$(echo
      $CODEBUILD_WEBHOOK_HEAD_REF | sed ''s/^refs\\/heads\\///'')\"\n-  if [ \"${CODEBUILD_SOURCE_VERSION/pr}\"
      = \"$CODEBUILD_SOURCE_VERSION\" ] ; then\n-    pr=\"false\"\n-  else\n-    pr=\"$(echo
      $CODEBUILD_SOURCE_VERSION | sed ''s/^pr\\///'')\"\n-  fi\n-  job=\"$CODEBUILD_BUILD_ID\"\n-  slug=\"$(echo
      $CODEBUILD_SOURCE_REPO_URL | sed ''s/^.*github.com\\///'' | sed ''s/\\.git$//'')\"\n-\n-elif
      [ \"$DOCKER_REPO\" != \"\" ];\n-then\n-  say \"$e==>$x Docker detected.\"\n-  #
      https://docs.docker.com/docker-cloud/builds/advanced/\n-  service=\"docker\"\n-  branch=\"$SOURCE_BRANCH\"\n-  commit=\"$SOURCE_COMMIT\"\n-  slug=\"$DOCKER_REPO\"\n-  tag=\"$CACHE_TAG\"\n-  env=\"$env,IMAGE_NAME\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$CI_NAME\" = \"codeship\" ];\n-then\n-  say \"$e==>$x
      Codeship CI detected.\"\n-  # https://www.codeship.io/documentation/continuous-integration/set-environment-variables/\n-  service=\"codeship\"\n-  branch=\"$CI_BRANCH\"\n-  build=\"$CI_BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$CI_BUILD_URL\")\n-  commit=\"$CI_COMMIT_ID\"\n-\n-elif [ ! -z \"$CF_BUILD_URL\"
      ] && [ ! -z \"$CF_BUILD_ID\" ];\n-then\n-  say \"$e==>$x Codefresh CI detected.\"\n-  #
      https://docs.codefresh.io/v1.0/docs/variables\n-  service=\"codefresh\"\n-  branch=\"$CF_BRANCH\"\n-  build=\"$CF_BUILD_ID\"\n-  build_url=$(urlencode
      \"$CF_BUILD_URL\")\n-  commit=\"$CF_REVISION\"\n-\n-elif [ \"$TEAMCITY_VERSION\"
      != \"\" ];\n-then\n-  say \"$e==>$x TeamCity CI detected.\"\n-  # https://confluence.jetbrains.com/display/TCD8/Predefined+Build+Parameters\n-  #
      https://confluence.jetbrains.com/plugins/servlet/mobile#content/view/74847298\n-  if
      [ \"$TEAMCITY_BUILD_BRANCH\" = '''' ];\n-  then\n-    echo \"    Teamcity does
      not automatically make build parameters available as environment variables.\"\n-    echo
      \"    Add the following environment parameters to the build configuration\"\n-    echo
      \"    env.TEAMCITY_BUILD_BRANCH = %teamcity.build.branch%\"\n-    echo \"    env.TEAMCITY_BUILD_ID
      = %teamcity.build.id%\"\n-    echo \"    env.TEAMCITY_BUILD_URL = %teamcity.serverUrl%/viewLog.html?buildId=%teamcity.build.id%\"\n-    echo
      \"    env.TEAMCITY_BUILD_COMMIT = %system.build.vcs.number%\"\n-    echo \"    env.TEAMCITY_BUILD_REPOSITORY
      = %vcsroot.<YOUR TEAMCITY VCS NAME>.url%\"\n-  fi\n-  service=\"teamcity\"\n-  branch=\"$TEAMCITY_BUILD_BRANCH\"\n-  build=\"$TEAMCITY_BUILD_ID\"\n-  build_url=$(urlencode
      \"$TEAMCITY_BUILD_URL\")\n-  if [ \"$TEAMCITY_BUILD_COMMIT\" != \"\" ];\n-  then\n-    commit=\"$TEAMCITY_BUILD_COMMIT\"\n-  else\n-    commit=\"$BUILD_VCS_NUMBER\"\n-  fi\n-  remote_addr=\"$TEAMCITY_BUILD_REPOSITORY\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$CIRCLECI\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Circle CI detected.\"\n-  # https://circleci.com/docs/environment-variables\n-  service=\"circleci\"\n-  branch=\"$CIRCLE_BRANCH\"\n-  build=\"$CIRCLE_BUILD_NUM\"\n-  job=\"$CIRCLE_NODE_INDEX\"\n-  if
      [ \"$CIRCLE_PROJECT_REPONAME\" != \"\" ];\n-  then\n-    slug=\"$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME\"\n-  else\n-    #
      git@github.com:owner/repo.git\n-    slug=\"${CIRCLE_REPOSITORY_URL##*:}\"\n-    #
      owner/repo.git\n-    slug=\"${slug%%.git}\"\n-  fi\n-  pr=\"$CIRCLE_PR_NUMBER\"\n-  commit=\"$CIRCLE_SHA1\"\n-  search_in=\"$search_in
      $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS\"\n-\n-elif [ \"$BUDDYBUILD_BRANCH\"
      != \"\" ];\n-then\n-  say \"$e==>$x buddybuild detected\"\n-  # http://docs.buddybuild.com/v6/docs/custom-prebuild-and-postbuild-steps\n-  service=\"buddybuild\"\n-  branch=\"$BUDDYBUILD_BRANCH\"\n-  build=\"$BUDDYBUILD_BUILD_NUMBER\"\n-  build_url=\"https://dashboard.buddybuild.com/public/apps/$BUDDYBUILD_APP_ID/build/$BUDDYBUILD_BUILD_ID\"\n-  #
      BUDDYBUILD_TRIGGERED_BY\n-  if [ \"$ddp\" = \"$(echo ~)/Library/Developer/Xcode/DerivedData\"
      ];\n-  then\n-    ddp=\"/private/tmp/sandbox/${BUDDYBUILD_APP_ID}/bbtest\"\n-  fi\n-\n-elif
      [ \"${bamboo_planRepository_revision}\" != \"\" ];\n-then\n-  say \"$e==>$x
      Bamboo detected\"\n-  # https://confluence.atlassian.com/bamboo/bamboo-variables-289277087.html#Bamboovariables-Build-specificvariables\n-  service=\"bamboo\"\n-  commit=\"${bamboo_planRepository_revision}\"\n-  branch=\"${bamboo_planRepository_branch}\"\n-  build=\"${bamboo_buildNumber}\"\n-  build_url=\"${bamboo_buildResultsUrl}\"\n-  remote_addr=\"${bamboo_planRepository_repositoryUrl}\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$BITRISE_IO\" = \"true\" ];\n-then\n-  # http://devcenter.bitrise.io/faq/available-environment-variables/\n-  say
      \"$e==>$x Bitrise CI detected.\"\n-  service=\"bitrise\"\n-  branch=\"$BITRISE_GIT_BRANCH\"\n-  build=\"$BITRISE_BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$BITRISE_BUILD_URL\")\n-  pr=\"$BITRISE_PULL_REQUEST\"\n-  if [ \"$GIT_CLONE_COMMIT_HASH\"
      != \"\" ];\n-  then\n-    commit=\"$GIT_CLONE_COMMIT_HASH\"\n-  fi\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$SEMAPHORE\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Semaphore CI detected.\"\n-  # https://semaphoreapp.com/docs/available-environment-variables.html\n-  service=\"semaphore\"\n-  branch=\"$BRANCH_NAME\"\n-  build=\"$SEMAPHORE_BUILD_NUMBER\"\n-  job=\"$SEMAPHORE_CURRENT_THREAD\"\n-  pr=\"$PULL_REQUEST_NUMBER\"\n-  slug=\"$SEMAPHORE_REPO_SLUG\"\n-  commit=\"$REVISION\"\n-  env=\"$env,SEMAPHORE_TRIGGER_SOURCE\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$BUILDKITE\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Buildkite CI detected.\"\n-  # https://buildkite.com/docs/guides/environment-variables\n-  service=\"buildkite\"\n-  branch=\"$BUILDKITE_BRANCH\"\n-  build=\"$BUILDKITE_BUILD_NUMBER\"\n-  job=\"$BUILDKITE_JOB_ID\"\n-  build_url=$(urlencode
      \"$BUILDKITE_BUILD_URL\")\n-  slug=\"$BUILDKITE_PROJECT_SLUG\"\n-  commit=\"$BUILDKITE_COMMIT\"\n-  if
      [[ \"$BUILDKITE_PULL_REQUEST\" != \"false\" ]]; then\n-    pr=\"$BUILDKITE_PULL_REQUEST\"\n-  fi\n-  tag=\"$BUILDKITE_TAG\"\n-\n-elif
      [ \"$CI\" = \"drone\" ] || [ \"$DRONE\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Drone CI detected.\"\n-  # http://docs.drone.io/env.html\n-  # drone commits
      are not full shas\n-  service=\"drone.io\"\n-  branch=\"$DRONE_BRANCH\"\n-  build=\"$DRONE_BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"${DRONE_BUILD_LINK}\")\n-  pr=\"$DRONE_PULL_REQUEST\"\n-  job=\"$DRONE_JOB_NUMBER\"\n-  tag=\"$DRONE_TAG\"\n-\n-elif
      [ \"$HEROKU_TEST_RUN_BRANCH\" != \"\" ];\n-then\n-  say \"$e==>$x Heroku CI
      detected.\"\n-  # https://devcenter.heroku.com/articles/heroku-ci#environment-variables\n-  service=\"heroku\"\n-  branch=\"$HEROKU_TEST_RUN_BRANCH\"\n-  build=\"$HEROKU_TEST_RUN_ID\"\n-\n-elif
      [ \"$CI\" = \"True\" ] && [ \"$APPVEYOR\" = \"True\" ];\n-then\n-  say \"$e==>$x
      Appveyor CI detected.\"\n-  # http://www.appveyor.com/docs/environment-variables\n-  service=\"appveyor\"\n-  branch=\"$APPVEYOR_REPO_BRANCH\"\n-  build=$(urlencode
      \"$APPVEYOR_JOB_ID\")\n-  pr=\"$APPVEYOR_PULL_REQUEST_NUMBER\"\n-  job=\"$APPVEYOR_ACCOUNT_NAME%2F$APPVEYOR_PROJECT_SLUG%2F$APPVEYOR_BUILD_VERSION\"\n-  slug=\"$APPVEYOR_REPO_NAME\"\n-  commit=\"$APPVEYOR_REPO_COMMIT\"\n-  build_url=$(urlencode
      \"${APPVEYOR_URL}/project/${APPVEYOR_REPO_NAME}/builds/$APPVEYOR_BUILD_ID/job/${APPVEYOR_JOB_ID}\")\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$WERCKER_GIT_BRANCH\" != \"\" ];\n-then\n-  say
      \"$e==>$x Wercker CI detected.\"\n-  # http://devcenter.wercker.com/articles/steps/variables.html\n-  service=\"wercker\"\n-  branch=\"$WERCKER_GIT_BRANCH\"\n-  build=\"$WERCKER_MAIN_PIPELINE_STARTED\"\n-  slug=\"$WERCKER_GIT_OWNER/$WERCKER_GIT_REPOSITORY\"\n-  commit=\"$WERCKER_GIT_COMMIT\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$MAGNUM\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Magnum CI detected.\"\n-  # https://magnum-ci.com/docs/environment\n-  service=\"magnum\"\n-  branch=\"$CI_BRANCH\"\n-  build=\"$CI_BUILD_NUMBER\"\n-  commit=\"$CI_COMMIT\"\n-\n-elif
      [ \"$SHIPPABLE\" = \"true\" ];\n-then\n-  say \"$e==>$x Shippable CI detected.\"\n-  #
      http://docs.shippable.com/ci_configure/\n-  service=\"shippable\"\n-  branch=$([
      \"$HEAD_BRANCH\" != \"\" ] && echo \"$HEAD_BRANCH\" || echo \"$BRANCH\")\n-  build=\"$BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$BUILD_URL\")\n-  pr=\"$PULL_REQUEST\"\n-  slug=\"$REPO_FULL_NAME\"\n-  commit=\"$COMMIT\"\n-\n-elif
      [ \"$TDDIUM\" = \"true\" ];\n-then\n-  say \"Solano CI detected.\"\n-  # http://docs.solanolabs.com/Setup/tddium-set-environment-variables/\n-  service=\"solano\"\n-  commit=\"$TDDIUM_CURRENT_COMMIT\"\n-  branch=\"$TDDIUM_CURRENT_BRANCH\"\n-  build=\"$TDDIUM_TID\"\n-  pr=\"$TDDIUM_PR_ID\"\n-\n-elif
      [ \"$GREENHOUSE\" = \"true\" ];\n-then\n-  say \"$e==>$x Greenhouse CI detected.\"\n-  #
      http://docs.greenhouseci.com/docs/environment-variables-files\n-  service=\"greenhouse\"\n-  branch=\"$GREENHOUSE_BRANCH\"\n-  build=\"$GREENHOUSE_BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$GREENHOUSE_BUILD_URL\")\n-  pr=\"$GREENHOUSE_PULL_REQUEST\"\n-  commit=\"$GREENHOUSE_COMMIT\"\n-  search_in=\"$search_in
      $GREENHOUSE_EXPORT_DIR\"\n-\n-elif [ \"$GITLAB_CI\" != \"\" ];\n-then\n-  say
      \"$e==>$x GitLab CI detected.\"\n-  # http://doc.gitlab.com/ce/ci/variables/README.html\n-  service=\"gitlab\"\n-  branch=\"${CI_BUILD_REF_NAME:-$CI_COMMIT_REF_NAME}\"\n-  build=\"${CI_BUILD_ID:-$CI_JOB_ID}\"\n-  remote_addr=\"${CI_BUILD_REPO:-$CI_REPOSITORY_URL}\"\n-  commit=\"${CI_BUILD_REF:-$CI_COMMIT_SHA}\"\n-  slug=\"${CI_PROJECT_PATH}\"\n-\n-elif
      [ \"$GITHUB_ACTION\" != \"\" ];\n-then\n-  say \"$e==>$x GitHub Actions detected.\"\n-\n-  #
      https://github.com/features/actions\n-  service=\"github-actions\"\n-\n-  #
      https://help.github.com/en/articles/virtual-environments-for-github-actions#environment-variables\n-  branch=\"${GITHUB_REF#refs/heads/}\"\n-  commit=\"${GITHUB_SHA}\"\n-  slug=\"${GITHUB_REPOSITORY}\"\n-\n-elif
      [ \"$SYSTEM_TEAMFOUNDATIONSERVERURI\" != \"\" ];\n-then\n-  say \"$e==>$x Azure
      Pipelines detected.\"\n-  # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=vsts\n-  service=\"azure_pipelines\"\n-  commit=\"$BUILD_SOURCEVERSION\"\n-  build=\"$BUILD_BUILDNUMBER\"\n-  if
      [  -z \"$PULL_REQUEST_NUMBER\" ];\n-  then\n-    pr=\"$PULL_REQUEST_ID\"\n-  else\n-    pr=\"$PULL_REQUEST_NUMBER\"\n-  fi\n-  project=\"${SYSTEM_TEAMPROJECT}\"\n-  server_uri=\"${SYSTEM_TEAMFOUNDATIONSERVERURI}\"\n-  job=\"${BUILD_BUILDID}\"\n-  branch=\"$BUILD_SOURCEBRANCHNAME\"\n-  build_url=$(urlencode
      \"${SYSTEM_TEAMFOUNDATIONSERVERURI}${SYSTEM_TEAMPROJECT}/_build/results?buildId=${BUILD_BUILDID}\")\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$BITBUCKET_BUILD_NUMBER\" != \"\" ];\n-then\n-  say
      \"$e==>$x Bitbucket detected.\"\n-  # https://confluence.atlassian.com/bitbucket/variables-in-pipelines-794502608.html\n-  service=\"bitbucket\"\n-  branch=\"$BITBUCKET_BRANCH\"\n-  build=\"$BITBUCKET_BUILD_NUMBER\"\n-  slug=\"$BITBUCKET_REPO_OWNER/$BITBUCKET_REPO_SLUG\"\n-  job=\"$BITBUCKET_BUILD_NUMBER\"\n-  pr=\"$BITBUCKET_PR_ID\"\n-  commit=\"$BITBUCKET_COMMIT\"\n-  #
      See https://jira.atlassian.com/browse/BCLOUD-19393\n-  if [ \"${#commit}\" =
      12 ];\n-  then\n-    commit=$(git rev-parse \"$BITBUCKET_COMMIT\")\n-  fi\n-elif
      [ \"$CIRRUS_CI\" != \"\" ];\n-then\n-  say \"$e==>$x Cirrus CI detected.\"\n-  #
      https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n-  service=\"cirrus-ci\"\n-  slug=\"$CIRRUS_REPO_FULL_NAME\"\n-  branch=\"$CIRRUS_BRANCH\"\n-  pr=\"$CIRRUS_PR\"\n-  commit=\"$CIRRUS_CHANGE_IN_REPO\"\n-  build=\"$CIRRUS_TASK_ID\"\n-  job=\"$CIRRUS_TASK_NAME\"\n-else\n-  say
      \"${r}x>${x} No CI provider detected.\"\n-  say \"    Testing inside Docker?
      ${b}http://docs.codecov.io/docs/testing-with-docker${x}\"\n-  say \"    Testing
      with Tox? ${b}https://docs.codecov.io/docs/python#section-testing-with-tox${x}\"\n-\n-fi\n-\n-say
      \"    ${e}project root:${x} $git_root\"\n-\n-# find branch, commit, repo from
      git command\n-if [ \"$GIT_BRANCH\" != \"\" ];\n-then\n-  branch=\"$GIT_BRANCH\"\n-\n-elif
      [ \"$branch\" = \"\" ];\n-then\n-  branch=$(git rev-parse --abbrev-ref HEAD
      2>/dev/null || hg branch 2>/dev/null || echo \"\")\n-  if [ \"$branch\" = \"HEAD\"
      ];\n-  then\n-    branch=\"\"\n-  fi\n-fi\n-\n-if [ \"$commit_o\" = \"\" ];\n-then\n-  #
      merge commit -> actual commit\n-  mc=\n-  if [ -n \"$pr\" ] && [ \"$pr\" !=
      false ];\n-  then\n-    mc=$(git show --no-patch --format=\"%P\" 2>/dev/null
      || echo \"\")\n-  fi\n-  if [[ \"$mc\" =~ ^[a-z0-9]{40}[[:space:]][a-z0-9]{40}$
      ]];\n-  then\n-    say \"    Fixing merge commit SHA\"\n-    commit=$(echo \"$mc\"
      | cut -d'' '' -f2)\n-  elif [ \"$GIT_COMMIT\" != \"\" ];\n-  then\n-    commit=\"$GIT_COMMIT\"\n-  elif
      [ \"$commit\" = \"\" ];\n-  then\n-    commit=$(git log -1 --format=\"%H\" 2>/dev/null
      || hg id -i --debug 2>/dev/null | tr -d ''+'' || echo \"\")\n-  fi\n-else\n-  commit=\"$commit_o\"\n-fi\n-\n-if
      [ \"$CODECOV_TOKEN\" != \"\" ] && [ \"$token\" = \"\" ];\n-then\n-  say \"${e}-->${x}
      token set from env\"\n-  token=\"$CODECOV_TOKEN\"\n-fi\n-\n-if [ \"$CODECOV_URL\"
      != \"\" ] && [ \"$url_o\" = \"\" ];\n-then\n-  say \"${e}-->${x} url set from
      env\"\n-  url_o=$(echo \"$CODECOV_URL\" | sed -e ''s/\\/$//'')\n-fi\n-\n-if
      [ \"$CODECOV_SLUG\" != \"\" ];\n-then\n-  say \"${e}-->${x} slug set from env\"\n-  slug_o=\"$CODECOV_SLUG\"\n-\n-elif
      [ \"$slug\" = \"\" ];\n-then\n-  if [ \"$remote_addr\" = \"\" ];\n-  then\n-    remote_addr=$(git
      config --get remote.origin.url || hg paths default || echo '''')\n-  fi\n-  if
      [ \"$remote_addr\" != \"\" ];\n-  then\n-    if echo \"$remote_addr\" | grep
      -q \"//\"; then\n-      # https\n-      slug=$(echo \"$remote_addr\" | cut -d
      / -f 4,5 | sed -e ''s/\\.git$//'')\n-    else\n-      # ssh\n-      slug=$(echo
      \"$remote_addr\" | cut -d : -f 2 | sed -e ''s/\\.git$//'')\n-    fi\n-  fi\n-  if
      [ \"$slug\" = \"/\" ];\n-  then\n-    slug=\"\"\n-  fi\n-fi\n-\n-yaml=$(test
      -n \"$codecov_yml\" && echo \"$codecov_yml\" \\\n-       || cd \"$git_root\"
      && \\\n-          git ls-files \"*codecov.yml\" \"*codecov.yaml\" 2>/dev/null
      \\\n-       || hg locate \"*codecov.yml\" \"*codecov.yaml\" 2>/dev/null \\\n-       ||
      cd $proj_root && find . -type f -name ''*codecov.y*ml'' -depth 1 2>/dev/null
      \\\n-       || echo '''')\n-yaml=$(echo \"$yaml\" | head -1)\n-\n-if [ \"$yaml\"
      != \"\" ];\n-then\n-  say \"    ${e}Yaml found at:${x} $yaml\"\n-  config=$(parse_yaml
      \"$git_root/$yaml\" || echo '''')\n-\n-  # TODO validate the yaml here\n-\n-  if
      [ \"$(echo \"$config\" | grep ''codecov_token=\"'')\" != \"\" ] && [ \"$token\"
      = \"\" ];\n-  then\n-    say \"${e}-->${x} token set from yaml\"\n-    token=\"$(echo
      \"$config\" | grep ''codecov_token=\"'' | sed -e ''s/codecov_token=\"//'' |
      sed -e ''s/\"\\.*//'')\"\n-  fi\n-\n-  if [ \"$(echo \"$config\" | grep ''codecov_url=\"'')\"
      != \"\" ] && [ \"$url_o\" = \"\" ];\n-  then\n-    say \"${e}-->${x} url set
      from yaml\"\n-    url_o=\"$(echo \"$config\" | grep ''codecov_url=\"'' | sed
      -e ''s/codecov_url=\"//'' | sed -e ''s/\"\\.*//'')\"\n-  fi\n-\n-  if [ \"$(echo
      \"$config\" | grep ''codecov_slug=\"'')\" != \"\" ] && [ \"$slug_o\" = \"\"
      ];\n-  then\n-    say \"${e}-->${x} slug set from yaml\"\n-    slug_o=\"$(echo
      \"$config\" | grep ''codecov_slug=\"'' | sed -e ''s/codecov_slug=\"//'' | sed
      -e ''s/\"\\.*//'')\"\n-  fi\n-else\n-  say \"    ${g}Yaml not found, that''s
      ok! Learn more at${x} ${b}http://docs.codecov.io/docs/codecov-yaml${x}\"\n-\n-fi\n-\n-if
      [ \"$branch_o\" != \"\" ];\n-then\n-  branch=$(urlencode \"$branch_o\")\n-else\n-  branch=$(urlencode
      \"$branch\")\n-fi\n-\n-query=\"branch=$branch\\\n-       &commit=$commit\\\n-       &build=$([
      \"$build_o\" = \"\" ] && echo \"$build\" || echo \"$build_o\")\\\n-       &build_url=$build_url\\\n-       &name=$(urlencode
      \"$name\")\\\n-       &tag=$([ \"$tag_o\" = \"\" ] && echo \"$tag\" || echo
      \"$tag_o\")\\\n-       &slug=$([ \"$slug_o\" = \"\" ] && urlencode \"$slug\"
      || urlencode \"$slug_o\")\\\n-       &service=$service\\\n-       &flags=$flags\\\n-       &pr=$([
      \"$pr_o\" = \"\" ] && echo \"${pr##\\#}\" || echo \"${pr_o##\\#}\")\\\n-       &job=$job\"\n-\n-if
      [ ! -z \"$project\" ] && [ ! -z \"$server_uri\" ];\n-then\n-  query=$(echo \"$query&project=$project&server_uri=$server_uri\"
      | tr -d '' '')\n-fi\n-\n-if [ \"$parent\" != \"\" ];\n-then\n-  query=$(echo
      \"parent=$parent&$query\" | tr -d '' '')\n-fi\n-\n-if [ \"$ft_search\" = \"1\"
      ];\n-then\n-  # detect bower comoponents location\n-  bower_components=\"bower_components\"\n-  bower_rc=$(cd
      \"$git_root\" && cat .bowerrc 2>/dev/null || echo \"\")\n-  if [ \"$bower_rc\"
      != \"\" ];\n-  then\n-    bower_components=$(echo \"$bower_rc\" | tr -d ''\\n''
      | grep ''\"directory\"'' | cut -d''\"'' -f4 | sed -e ''s/\\/$//'')\n-    if
      [ \"$bower_components\" = \"\" ];\n-    then\n-      bower_components=\"bower_components\"\n-    fi\n-  fi\n-\n-  #
      Swift Coverage\n-  if [ \"$ft_xcodellvm\" = \"1\" ] && [ -d \"$ddp\" ];\n-  then\n-    say
      \"${e}==>${x} Processing Xcode reports via llvm-cov\"\n-    say \"    DerivedData
      folder: $ddp\"\n-    profdata_files=$(find \"$ddp\" -name ''*.profdata'' 2>/dev/null
      || echo '''')\n-    if [ \"$profdata_files\" != \"\" ];\n-    then\n-      #
      xcode via profdata\n-      if [ \"$xp\" = \"\" ];\n-      then\n-        # xp=$(xcodebuild
      -showBuildSettings 2>/dev/null | grep -i \"^\\s*PRODUCT_NAME\" | sed -e ''s/.*=
      \\(.*\\)/\\1/'')\n-        # say \" ${e}->${x} Speed up Xcode processing by
      adding ${e}-J ''$xp''${x}\"\n-        say \"    ${g}hint${x} Speed up Swift
      processing by using use ${g}-J ''AppName''${x} (regexp accepted)\"\n-        say
      \"    ${g}hint${x} This will remove Pods/ from your report. Also ${b}https://docs.codecov.io/docs/ignoring-paths${x}\"\n-      fi\n-      while
      read -r profdata;\n-      do\n-        if [ \"$profdata\" != \"\" ];\n-        then\n-          swiftcov
      \"$profdata\" \"$xp\"\n-        fi\n-      done <<< \"$profdata_files\"\n-    else\n-      say
      \"    ${e}->${x} No Swift coverage found\"\n-    fi\n-\n-    # Obj-C Gcov Coverage\n-    if
      [ \"$ft_gcov\" = \"1\" ];\n-    then\n-      say \"    ${e}->${x} Running $gcov_exe
      for Obj-C\"\n-      if [ \"$ft_gcovout\" = \"1\" ];\n-      then\n-        #
      suppress gcov output\n-        bash -c \"find $ddp -type f -name ''*.gcda''
      $gcov_include $gcov_ignore -exec $gcov_exe -p $gcov_arg {} +\" || true 2>/dev/null\n-      else\n-        bash
      -c \"find $ddp -type f -name ''*.gcda'' $gcov_include $gcov_ignore -exec $gcov_exe
      -p $gcov_arg {} +\" || true\n-      fi\n-    fi\n-  fi\n-\n-  if [ \"$ft_xcodeplist\"
      = \"1\" ] && [ -d \"$ddp\" ];\n-  then\n-    say \"${e}==>${x} Processing Xcode
      plists\"\n-    plists_files=$(find \"$ddp\" -name ''*.xccoverage'' 2>/dev/null
      || echo '''')\n-    if [ \"$plists_files\" != \"\" ];\n-    then\n-      while
      read -r plist;\n-      do\n-        if [ \"$plist\" != \"\" ];\n-        then\n-          say
      \"    ${g}Found${x} plist file at $plist\"\n-          plutil -convert xml1
      -o \"$(basename \"$plist\").plist\" -- $plist\n-        fi\n-      done <<<
      \"$plists_files\"\n-    fi\n-  fi\n-\n-  # Gcov Coverage\n-  if [ \"$ft_gcov\"
      = \"1\" ];\n-  then\n-    say \"${e}==>${x} Running gcov in $proj_root ${e}(disable
      via -X gcov)${x}\"\n-    bash -c \"find $proj_root -type f -name ''*.gcno''
      $gcov_include $gcov_ignore -execdir $gcov_exe -pb $gcov_arg {} +\" || true\n-  else\n-    say
      \"${e}==>${x} gcov disabled\"\n-  fi\n-\n-  # Python Coverage\n-  if [ \"$ft_coveragepy\"
      = \"1\" ];\n-  then\n-    if [ ! -f coverage.xml ];\n-    then\n-      if which
      coverage >/dev/null 2>&1;\n-      then\n-        say \"${e}==>${x} Python coveragepy
      exists ${e}disable via -X coveragepy${x}\"\n-\n-        dotcoverage=$(find \"$git_root\"
      -name ''.coverage'' -or -name ''.coverage.*'' | head -1 || echo '''')\n-        if
      [ \"$dotcoverage\" != \"\" ];\n-        then\n-          cd \"$(dirname \"$dotcoverage\")\"\n-          if
      [ ! -f .coverage ];\n-          then\n-            say \"    ${e}->${x} Running
      coverage combine\"\n-            coverage combine -a\n-          fi\n-          say
      \"    ${e}->${x} Running coverage xml\"\n-          if [ \"$(coverage xml -i)\"
      != \"No data to report.\" ];\n-          then\n-            files=\"$files\n-$PWD/coverage.xml\"\n-          else\n-            say
      \"    ${r}No data to report.${x}\"\n-          fi\n-          cd \"$proj_root\"\n-        else\n-          say
      \"    ${r}No .coverage file found.${x}\"\n-        fi\n-      else\n-        say
      \"${e}==>${x} Python coveragepy not found\"\n-      fi\n-    fi\n-  else\n-    say
      \"${e}==>${x} Python coveragepy disabled\"\n-  fi\n-\n-  if [ \"$search_in_o\"
      != \"\" ];\n-  then\n-    # location override\n-    search_in=\"$search_in_o\"\n-  fi\n-\n-  say
      \"$e==>$x Searching for coverage reports in:\"\n-  for _path in $search_in\n-  do\n-    say
      \"    ${g}+${x} $_path\"\n-  done\n-\n-  patterns=\"find $search_in \\( \\\n-                        -name
      vendor \\\n-                        -or -name htmlcov \\\n-                        -or
      -name virtualenv \\\n-                        -or -name js/generated/coverage
      \\\n-                        -or -name .virtualenv \\\n-                        -or
      -name virtualenvs \\\n-                        -or -name .virtualenvs \\\n-                        -or
      -name .env \\\n-                        -or -name .envs \\\n-                        -or
      -name env \\\n-                        -or -name .yarn-cache \\\n-                        -or
      -name envs \\\n-                        -or -name .venv \\\n-                        -or
      -name .venvs \\\n-                        -or -name venv \\\n-                        -or
      -name venvs \\\n-                        -or -name .git \\\n-                        -or
      -name .hg \\\n-                        -or -name .tox \\\n-                        -or
      -name __pycache__ \\\n-                        -or -name ''.egg-info*'' \\\n-                        -or
      -name ''$bower_components'' \\\n-                        -or -name node_modules
      \\\n-                        -or -name ''conftest_*.c.gcov'' \\\n-                    \\)
      -prune -or \\\n-                    -type f \\( -name ''*coverage*.*'' \\\n-                     -or
      -name ''nosetests.xml'' \\\n-                     -or -name ''jacoco*.xml''
      \\\n-                     -or -name ''clover.xml'' \\\n-                     -or
      -name ''report.xml'' \\\n-                     -or -name ''*.codecov.*'' \\\n-                     -or
      -name ''codecov.*'' \\\n-                     -or -name ''cobertura.xml'' \\\n-                     -or
      -name ''excoveralls.json'' \\\n-                     -or -name ''luacov.report.out''
      \\\n-                     -or -name ''coverage-final.json'' \\\n-                     -or
      -name ''naxsi.info'' \\\n-                     -or -name ''lcov.info'' \\\n-                     -or
      -name ''lcov.dat'' \\\n-                     -or -name ''*.lcov'' \\\n-                     -or
      -name ''*.clover'' \\\n-                     -or -name ''cover.out'' \\\n-                     -or
      -name ''gcov.info'' \\\n-                     -or -name ''*.gcov'' \\\n-                     -or
      -name ''*.lst'' \\\n-                     $include_cov \\) \\\n-                    $exclude_cov
      \\\n-                    -not -name ''*.profdata'' \\\n-                    -not
      -name ''coverage-summary.json'' \\\n-                    -not -name ''phpunit-code-coverage.xml''
      \\\n-                    -not -name ''*/classycle/report.xml'' \\\n-                    -not
      -name ''remapInstanbul.coverage*.json'' \\\n-                    -not -name
      ''phpunit-coverage.xml'' \\\n-                    -not -name ''*codecov.yml''
      \\\n-                    -not -name ''*.serialized'' \\\n-                    -not
      -name ''.coverage*'' \\\n-                    -not -name ''.*coveragerc'' \\\n-                    -not
      -name ''*.sh'' \\\n-                    -not -name ''*.bat'' \\\n-                    -not
      -name ''*.ps1'' \\\n-                    -not -name ''*.env'' \\\n-                    -not
      -name ''*.cmake'' \\\n-                    -not -name ''*.dox'' \\\n-                    -not
      -name ''*.ec'' \\\n-                    -not -name ''*.rst'' \\\n-                    -not
      -name ''*.h'' \\\n-                    -not -name ''*.scss'' \\\n-                    -not
      -name ''*.o'' \\\n-                    -not -name ''*.proto'' \\\n-                    -not
      -name ''*.sbt'' \\\n-                    -not -name ''*.xcoverage.*'' \\\n-                    -not
      -name ''*.gz'' \\\n-                    -not -name ''*.conf'' \\\n-                    -not
      -name ''*.p12'' \\\n-                    -not -name ''*.csv'' \\\n-                    -not
      -name ''*.rsp'' \\\n-                    -not -name ''*.m4'' \\\n-                    -not
      -name ''*.pem'' \\\n-                    -not -name ''*~'' \\\n-                    -not
      -name ''*.exe'' \\\n-                    -not -name ''*.am'' \\\n-                    -not
      -name ''*.template'' \\\n-                    -not -name ''*.cp'' \\\n-                    -not
      -name ''*.bw'' \\\n-                    -not -name ''*.crt'' \\\n-                    -not
      -name ''*.log'' \\\n-                    -not -name ''*.cmake'' \\\n-                    -not
      -name ''*.pth'' \\\n-                    -not -name ''*.in'' \\\n-                    -not
      -name ''*.jar*'' \\\n-                    -not -name ''*.pom*'' \\\n-                    -not
      -name ''*.png'' \\\n-                    -not -name ''*.jpg'' \\\n-                    -not
      -name ''*.sql'' \\\n-                    -not -name ''*.jpeg'' \\\n-                    -not
      -name ''*.svg'' \\\n-                    -not -name ''*.gif'' \\\n-                    -not
      -name ''*.csv'' \\\n-                    -not -name ''*.snapshot'' \\\n-                    -not
      -name ''*.mak*'' \\\n-                    -not -name ''*.bash'' \\\n-                    -not
      -name ''*.data'' \\\n-                    -not -name ''*.py'' \\\n-                    -not
      -name ''*.class'' \\\n-                    -not -name ''*.xcconfig'' \\\n-                    -not
      -name ''*.ec'' \\\n-                    -not -name ''*.coverage'' \\\n-                    -not
      -name ''*.pyc'' \\\n-                    -not -name ''*.cfg'' \\\n-                    -not
      -name ''*.egg'' \\\n-                    -not -name ''*.ru'' \\\n-                    -not
      -name ''*.css'' \\\n-                    -not -name ''*.less'' \\\n-                    -not
      -name ''*.pyo'' \\\n-                    -not -name ''*.whl'' \\\n-                    -not
      -name ''*.html'' \\\n-                    -not -name ''*.ftl'' \\\n-                    -not
      -name ''*.erb'' \\\n-                    -not -name ''*.rb'' \\\n-                    -not
      -name ''*.js'' \\\n-                    -not -name ''*.jade'' \\\n-                    -not
      -name ''*.db'' \\\n-                    -not -name ''*.md'' \\\n-                    -not
      -name ''*.cpp'' \\\n-                    -not -name ''*.gradle'' \\\n-                    -not
      -name ''*.tar.tz'' \\\n-                    -not -name ''*.scss'' \\\n-                    -not
      -name ''include.lst'' \\\n-                    -not -name ''fullLocaleNames.lst''
      \\\n-                    -not -name ''inputFiles.lst'' \\\n-                    -not
      -name ''createdFiles.lst'' \\\n-                    -not -name ''scoverage.measurements.*''
      \\\n-                    -not -name ''test_*_coverage.txt'' \\\n-                    -not
      -name ''testrunner-coverage*'' \\\n-                    -print 2>/dev/null\"\n-  files=$(eval
      \"$patterns\" || echo '''')\n-\n-elif [ \"$include_cov\" != \"\" ];\n-then\n-  files=$(eval
      \"find $search_in -type f \\( ${include_cov:5} \\)$exclude_cov 2>/dev/null\"
      || echo '''')\n-fi\n-\n-num_of_files=$(echo \"$files\" | wc -l | tr -d '' '')\n-if
      [ \"$num_of_files\" != '''' ] && [ \"$files\" != '''' ];\n-then\n-  say \"    ${e}->${x}
      Found $num_of_files reports\"\n-fi\n-\n-# no files found\n-if [ \"$files\" =
      \"\" ];\n-then\n-  say \"${r}-->${x} No coverage report found.\"\n-  say \"    Please
      visit ${b}http://docs.codecov.io/docs/supported-languages${x}\"\n-  exit ${exit_with};\n-fi\n-\n-if
      [ \"$ft_network\" == \"1\" ];\n-then\n-  say \"${e}==>${x} Detecting git/mercurial
      file structure\"\n-  network=$(cd \"$git_root\" && git ls-files 2>/dev/null
      || hg locate 2>/dev/null || echo \"\")\n-  if [ \"$network\" = \"\" ];\n-  then\n-    network=$(find
      \"$git_root\" \\( \\\n-                   -name virtualenv \\\n-                   -name
      .virtualenv \\\n-                   -name virtualenvs \\\n-                   -name
      .virtualenvs \\\n-                   -name ''*.png'' \\\n-                   -name
      ''*.gif'' \\\n-                   -name ''*.jpg'' \\\n-                   -name
      ''*.jpeg'' \\\n-                   -name ''*.md'' \\\n-                   -name
      .env \\\n-                   -name .envs \\\n-                   -name env \\\n-                   -name
      envs \\\n-                   -name .venv \\\n-                   -name .venvs
      \\\n-                   -name venv \\\n-                   -name venvs \\\n-                   -name
      .git \\\n-                   -name .egg-info \\\n-                   -name shunit2-2.1.6
      \\\n-                   -name vendor \\\n-                   -name __pycache__
      \\\n-                   -name node_modules \\\n-                   -path ''*/$bower_components/*''
      \\\n-                   -path ''*/target/delombok/*'' \\\n-                   -path
      ''*/build/lib/*'' \\\n-                   -path ''*/js/generated/coverage/*''
      \\\n-                    \\) -prune -or \\\n-                    -type f -print
      2>/dev/null || echo '''')\n-  fi\n-\n-  if [ \"$prefix_o\" != \"\" ];\n-  then\n-      network=$(echo
      \"$network\" | awk \"{print \\\"$prefix_o/\\\"\\$0}\")\n-  fi\n-fi\n-\n-upload_file=`mktemp
      /tmp/codecov.XXXXXX`\n-adjustments_file=`mktemp /tmp/codecov.adjustments.XXXXXX`\n-\n-cleanup()
      {\n-    rm -f $upload_file $adjustments_file $upload_file.gz\n-}\n-\n-trap cleanup
      INT ABRT TERM\n-\n-if [ \"$env\" != \"\" ];\n-then\n-  inc_env=\"\"\n-  say
      \"${e}==>${x} Appending build variables\"\n-  for varname in $(echo \"$env\"
      | tr '','' '' '')\n-  do\n-    if [ \"$varname\" != \"\" ];\n-    then\n-      say
      \"    ${g}+${x} $varname\"\n-      inc_env=\"${inc_env}${varname}=$(eval echo
      \"\\$${varname}\")\n-\"\n-    fi\n-  done\n-\n-echo \"$inc_env<<<<<< ENV\" >>
      $upload_file\n-fi\n-\n-# Append git file list\n-# write discovered yaml location\n-echo
      \"$yaml\" >> $upload_file\n-if [ \"$ft_network\" == \"1\" ];\n-then\n-  i=\"woff|eot|otf\"  #
      fonts\n-  i=\"$i|gif|png|jpg|jpeg|psd\"  # images\n-  i=\"$i|ptt|pptx|numbers|pages|md|txt|xlsx|docx|doc|pdf|html|csv\"  #
      docs\n-  i=\"$i|yml|yaml|.gitignore\"  # supporting docs\n-  echo \"$network\"
      | grep -vwE \"($i)$\" >> $upload_file\n-fi\n-echo \"<<<<<< network\" >> $upload_file\n-\n-fr=0\n-say
      \"${e}==>${x} Reading reports\"\n-while IFS='''' read -r file;\n-do\n-  # read
      the coverage file\n-  if [ \"$(echo \"$file\" | tr -d '' '')\" != '''' ];\n-  then\n-    if
      [ -f \"$file\" ];\n-    then\n-      report_len=$(wc -c < \"$file\")\n-      if
      [ \"$report_len\" -ne 0 ];\n-      then\n-        say \"    ${g}+${x} $file
      ${e}bytes=$(echo \"$report_len\" | tr -d '' '')${x}\"\n-        # append to
      to upload\n-        _filename=$(basename \"$file\")\n-        if [ \"${_filename##*.}\"
      = ''gcov'' ];\n-        then\n-          echo \"# path=$(echo \"$file.reduced\"
      | sed \"s|^$git_root/||\")\" >> $upload_file\n-          # get file name\n-          head
      -1 $file >> $upload_file\n-          # 1. remove source code\n-          # 2.
      remove ending bracket lines\n-          # 3. remove whitespace\n-          #
      4. remove contextual lines\n-          # 5. remove function names\n-          awk
      -F'': *'' ''{print $1\":\"$2\":\"}'' $file \\\n-            | sed ''\\/: *}
      *$/d'' \\\n-            | sed ''s/^ *//'' \\\n-            | sed ''/^-/d'' \\\n-            |
      sed ''s/^function.*/func/'' >> $upload_file\n-        else\n-          echo
      \"# path=$(echo \"$file\" | sed \"s|^$git_root/||\")\" >> $upload_file\n-          cat
      \"$file\" >> $upload_file\n-        fi\n-        echo \"<<<<<< EOF\" >> $upload_file\n-        fr=1\n-        if
      [ \"$clean\" = \"1\" ];\n-        then\n-          rm \"$file\"\n-        fi\n-      else\n-        say
      \"    ${r}-${x} Skipping empty file $file\"\n-      fi\n-    else\n-      say
      \"    ${r}-${x} file not found at $file\"\n-    fi\n-  fi\n-done <<< \"$(echo
      -e \"$files\")\"\n-\n-if [ \"$fr\" = \"0\" ];\n-then\n-  say \"${r}-->${x} No
      coverage data found.\"\n-  say \"    Please visit ${b}http://docs.codecov.io/docs/supported-languages${x}\"\n-  say
      \"    search for your projects language to learn how to collect reports.\"\n-  exit
      ${exit_with};\n-fi\n-\n-if [ \"$ft_fix\" = \"1\" ];\n-then\n-  say \"${e}==>${x}
      Appending adjustments\"\n-  say \"    ${b}http://docs.codecov.io/docs/fixing-reports${x}\"\n-\n-  empty_line=''^[[:space:]]*$''\n-  #
      //\n-  syntax_comment=''^[[:space:]]*//.*''\n-  # /* or */\n-  syntax_comment_block=''^[[:space:]]*(\\/\\*|\\*\\/)[[:space:]]*$''\n-  #
      { or }\n-  syntax_bracket=''^[[:space:]]*[\\{\\}][[:space:]]*(//.*)?$''\n-  #
      [ or ]\n-  syntax_list=''^[[:space:]]*[][][[:space:]]*(//.*)?$''\n-\n-  skip_dirs=\"-not
      -path ''*/$bower_components/*'' \\\n-             -not -path ''*/node_modules/*''\"\n-\n-  cut_and_join()
      {\n-    awk ''BEGIN { FS=\":\" }\n-         $3 ~ /\\/\\*/ || $3 ~ /\\*\\// {
      print $0 ; next }\n-         $1!=key { if (key!=\"\") print out ; key=$1 ; out=$1\":\"$2
      ; next }\n-         { out=out\",\"$2 }\n-         END { print out }'' 2>/dev/null\n-  }\n-\n-  if
      echo \"$network\" | grep -m1 ''.kt$'' 1>/dev/null;\n-  then\n-    # skip brackets
      and comments\n-    find \"$git_root\" -type f \\\n-                     -name
      ''*.kt'' \\\n-                     -exec \\\n-      grep -nIHE -e $syntax_bracket
      \\\n-                 -e $syntax_comment_block {} \\; \\\n-      | cut_and_join
      \\\n-      >> $adjustments_file \\\n-      || echo ''''\n-\n-    # last line
      in file\n-    find \"$git_root\" -type f \\\n-                     -name ''*.kt''
      -exec \\\n-      wc -l {} \\; \\\n-      | while read l; do echo \"EOF: $l\";
      done \\\n-      2>/dev/null \\\n-      >> $adjustments_file \\\n-      || echo
      ''''\n-\n-  fi\n-\n-  if echo \"$network\" | grep -m1 ''.go$'' 1>/dev/null;\n-  then\n-    #
      skip empty lines, comments, and brackets\n-    find \"$git_root\" -not -path
      ''*/vendor/*'' \\\n-                     -type f \\\n-                     -name
      ''*.go'' \\\n-                     -exec \\\n-      grep -nIHE \\\n-           -e
      $empty_line \\\n-           -e $syntax_comment \\\n-           -e $syntax_comment_block
      \\\n-           -e $syntax_bracket \\\n-           {} \\; \\\n-      | cut_and_join
      \\\n-      >> $adjustments_file \\\n-      || echo ''''\n-  fi\n-\n-  if echo
      \"$network\" | grep -m1 ''.dart$'' 1>/dev/null;\n-  then\n-    # skip brackets\n-    find
      \"$git_root\" -type f \\\n-                     -name ''*.dart'' \\\n-                     -exec
      \\\n-      grep -nIHE \\\n-           -e $syntax_bracket \\\n-           {}
      \\; \\\n-      | cut_and_join \\\n-      >> $adjustments_file \\\n-      ||
      echo ''''\n-  fi\n-\n-  if echo \"$network\" | grep -m1 ''.php$'' 1>/dev/null;\n-  then\n-    #
      skip empty lines, comments, and brackets\n-    find \"$git_root\" -not -path
      \"*/vendor/*\" \\\n-                     -type f \\\n-                     -name
      ''*.php'' \\\n-                     -exec \\\n-      grep -nIHE \\\n-           -e
      $syntax_list \\\n-           -e $syntax_bracket \\\n-           -e ''^[[:space:]]*\\);[[:space:]]*(//.*)?$''
      \\\n-           {} \\; \\\n-      | cut_and_join \\\n-      >> $adjustments_file
      \\\n-      || echo ''''\n-  fi\n-\n-  if echo \"$network\" | grep -m1 ''\\(.cpp\\|.h\\|.cxx\\|.c\\|.hpp\\|.m\\)$''
      1>/dev/null;\n-  then\n-    # skip brackets\n-    find \"$git_root\" -type f
      \\\n-                     $skip_dirs \\\n-         \\( \\\n-           -name
      ''*.h'' \\\n-           -or -name ''*.cpp'' \\\n-           -or -name ''*.cxx''
      \\\n-           -or -name ''*.m'' \\\n-           -or -name ''*.c'' \\\n-           -or
      -name ''*.hpp'' \\\n-         \\) -exec \\\n-      grep -nIHE \\\n-           -e
      $empty_line \\\n-           -e $syntax_bracket \\\n-           -e ''// LCOV_EXCL''
      \\\n-           {} \\; \\\n-      | cut_and_join \\\n-      >> $adjustments_file
      \\\n-      || echo ''''\n-\n-    # skip brackets\n-    find \"$git_root\" -type
      f \\\n-                     $skip_dirs \\\n-         \\( \\\n-           -name
      ''*.h'' \\\n-           -or -name ''*.cpp'' \\\n-           -or -name ''*.cxx''
      \\\n-           -or -name ''*.m'' \\\n-           -or -name ''*.c'' \\\n-           -or
      -name ''*.hpp'' \\\n-         \\) -exec \\\n-      grep -nIH ''// LCOV_EXCL''
      \\\n-           {} \\; \\\n-      >> $adjustments_file \\\n-      || echo ''''\n-\n-  fi\n-\n-  found=$(cat
      $adjustments_file | tr -d '' '')\n-\n-  if [ \"$found\" != \"\" ];\n-  then\n-    say
      \"    ${g}+${x} Found adjustments\"\n-    echo \"# path=fixes\" >> $upload_file\n-    cat
      $adjustments_file >> $upload_file\n-    echo \"<<<<<< EOF\" >> $upload_file\n-    rm
      -rf $adjustments_file\n-  else\n-    say \"    ${e}->${x} No adjustments found\"\n-  fi\n-fi\n-\n-if
      [ \"$url_o\" != \"\" ];\n-then\n-  url=\"$url_o\"\n-fi\n-\n-if [ \"$dump\" !=
      \"0\" ];\n-then\n-  # trim whitespace from query\n-  say \"    ${e}->${x} Dumping
      upload file (no upload)\"\n-  echo \"$url/upload/v4?$(echo \"package=bash-$VERSION&token=$token&$query\"
      | tr -d '' '')\"\n-  cat $upload_file\n-else\n-\n-  say \"${e}==>${x} Gzipping
      contents\"\n-  gzip -nf9 $upload_file\n-\n-  query=$(echo \"${query}\" | tr
      -d '' '')\n-  say \"${e}==>${x} Uploading reports\"\n-  say \"    ${e}url:${x}
      $url\"\n-  say \"    ${e}query:${x} $query\"\n-\n-  # Full query without token
      (to display on terminal output)\n-  queryNoToken=$(echo \"package=bash-$VERSION&token=secret&$query\"
      | tr -d '' '')\n-  # now add token to query\n-  query=$(echo \"package=bash-$VERSION&token=$token&$query\"
      | tr -d '' '')\n-\n-  if [ \"$ft_s3\" = \"1\" ];\n-  then\n-    i=\"0\"\n-    while
      [ $i -lt 4 ]\n-    do\n-      i=$[$i+1]\n-      say \"    ${e}->${x} Pinging
      Codecov\"\n-      say \"$url/upload/v4?$queryNoToken\"\n-      res=$(curl $curl_s
      -X POST $curlargs $cacert \\\n-            -H ''X-Reduced-Redundancy: false''
      \\\n-            -H ''X-Content-Type: text/plain'' \\\n-            \"$url/upload/v4?$query\"
      || true)\n-      # a good replay is \"https://codecov.io\" + \"\\n\" + \"https://codecov.s3.amazonaws.com/...\"\n-      status=$(echo
      \"$res\" | head -1 | grep ''HTTP '' | cut -d'' '' -f2)\n-      if [ \"$status\"
      = \"\" ];\n-      then\n-        s3target=$(echo \"$res\" | sed -n 2p)\n-        say
      \"    ${e}->${x} Uploading\"\n-\n-\n-        s3=$(curl $curl_s -fiX PUT $curlawsargs
      \\\n-            --data-binary @$upload_file.gz \\\n-            -H ''Content-Type:
      text/plain'' \\\n-            -H ''Content-Encoding: gzip'' \\\n-             -H
      ''x-amz-acl: public-read'' \\\n-            \"$s3target\" || true)\n-\n-\n-        if
      [ \"$s3\" != \"\" ];\n-        then\n-          say \"    ${g}->${x} View reports
      at ${b}$(echo \"$res\" | sed -n 1p)${x}\"\n-          exit 0\n-        else\n-          say
      \"    ${r}X>${x} Failed to upload\"\n-        fi\n-      elif [ \"$status\"
      = \"400\" ];\n-      then\n-          # 400 Error\n-          say \"${g}${res}${x}\"\n-          exit
      ${exit_with}\n-      fi\n-      say \"    ${e}->${x} Sleeping for 30s and trying
      again...\"\n-      sleep 30\n-    done\n-  fi\n-\n-  say \"    ${e}->${x} Uploading
      to Codecov\"\n-  i=\"0\"\n-  while [ $i -lt 4 ]\n-  do\n-    i=$[$i+1]\n-\n-    res=$(curl
      $curl_s -X POST $curlargs $cacert \\\n-          --data-binary @$upload_file.gz
      \\\n-          -H ''Content-Type: text/plain'' \\\n-          -H ''Content-Encoding:
      gzip'' \\\n-          -H ''X-Content-Encoding: gzip'' \\\n-          -H ''Accept:
      text/plain'' \\\n-          \"$url/upload/v2?$query\" || echo ''HTTP 500'')\n-    #
      HTTP 200\n-    # http://....\n-    status=$(echo \"$res\" | head -1 | cut -d''
      '' -f2)\n-    if [ \"$status\" = \"\" ];\n-    then\n-      say \"    View reports
      at ${b}$(echo \"$res\" | head -2 | tail -1)${x}\"\n-      exit 0\n-\n-    elif
      [ \"${status:0:1}\" = \"5\" ];\n-    then\n-      say \"    ${e}->${x} Sleeping
      for 30s and trying again...\"\n-      sleep 30\n-\n-    else\n-      say \"    ${g}${res}${x}\"\n-      exit
      0\n-      exit ${exit_with}\n-    fi\n-\n-  done\n-\n-  say \"    ${r}X> Failed
      to upload coverage reports${x}\"\n-fi\n-\n-exit ${exit_with}"},{"sha":"e14ecab9403dfb32d16ac5db3eff4b5dac940e2b","filename":"codecov.yaml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/ThiagoCodecov/example-python/blob/75f355d8d14ba3d7761c728b4d2607cde0eef065/codecov.yaml","raw_url":"https://github.com/ThiagoCodecov/example-python/raw/75f355d8d14ba3d7761c728b4d2607cde0eef065/codecov.yaml","contents_url":"https://api.github.com/repos/ThiagoCodecov/example-python/contents/codecov.yaml?ref=75f355d8d14ba3d7761c728b4d2607cde0eef065","patch":"@@
      -22,7 +22,9 @@ parsers:\n       macro: no\n \n flags:\n-  flagone:\n+  flag:\n+    carryforward:
      true\n+  flagonebaby:\n     carryforward: true\n \n comment:"},{"sha":"e87e3022e9306b6b38192509918377b9cf8f6310","filename":"dev.sh","status":"removed","additions":0,"deletions":1644,"changes":1644,"blob_url":"https://github.com/ThiagoCodecov/example-python/blob/f0895290dc26668faeeb20ee5ccd4cc995925775/dev.sh","raw_url":"https://github.com/ThiagoCodecov/example-python/raw/f0895290dc26668faeeb20ee5ccd4cc995925775/dev.sh","contents_url":"https://api.github.com/repos/ThiagoCodecov/example-python/contents/dev.sh?ref=f0895290dc26668faeeb20ee5ccd4cc995925775","patch":"@@
      -1,1644 +0,0 @@\n-#!/usr/bin/env bash\n-\n-# Apache License Version 2.0, January
      2004\n-# https://github.com/codecov/codecov-bash/blob/main/LICENSE\n-\n-\n-set
      -e +o pipefail\n-\n-VERSION=\"tbd\"\n-\n-url=\"http://localhost\"\n-env=\"$CODECOV_ENV\"\n-service=\"\"\n-token=\"\"\n-search_in=\"\"\n-flags=\"\"\n-exit_with=0\n-curlargs=\"\"\n-curlawsargs=\"\"\n-dump=\"0\"\n-clean=\"0\"\n-curl_s=\"-s\"\n-name=\"$CODECOV_NAME\"\n-include_cov=\"\"\n-exclude_cov=\"\"\n-ddp=\"$(echo
      ~)/Library/Developer/Xcode/DerivedData\"\n-xp=\"\"\n-files=\"\"\n-cacert=\"$CODECOV_CA_BUNDLE\"\n-gcov_ignore=\"-not
      -path ''./bower_components/**'' -not -path ''./node_modules/**'' -not -path
      ''./vendor/**''\"\n-gcov_include=\"\"\n-\n-ft_gcov=\"1\"\n-ft_coveragepy=\"1\"\n-ft_fix=\"1\"\n-ft_search=\"1\"\n-ft_s3=\"1\"\n-ft_network=\"1\"\n-ft_xcodellvm=\"1\"\n-ft_xcodeplist=\"0\"\n-ft_gcovout=\"1\"\n-\n-_git_root=$(git
      rev-parse --show-toplevel 2>/dev/null || hg root 2>/dev/null || echo $PWD)\n-git_root=\"$_git_root\"\n-codecov_yml=\"\"\n-remote_addr=\"\"\n-if
      [ \"$git_root\" = \"$PWD\" ];\n-then\n-  git_root=\".\"\n-fi\n-\n-url_o=\"\"\n-pr_o=\"\"\n-build_o=\"\"\n-commit_o=\"\"\n-search_in_o=\"\"\n-tag_o=\"\"\n-branch_o=\"\"\n-slug_o=\"\"\n-prefix_o=\"\"\n-\n-commit=\"$VCS_COMMIT_ID\"\n-branch=\"$VCS_BRANCH_NAME\"\n-pr=\"$VCS_PULL_REQUEST\"\n-slug=\"$VCS_SLUG\"\n-tag=\"$VCS_TAG\"\n-build_url=\"$CI_BUILD_URL\"\n-build=\"$CI_BUILD_ID\"\n-job=\"$CI_JOB_ID\"\n-\n-beta_xcode_partials=\"\"\n-\n-proj_root=\"$git_root\"\n-gcov_exe=\"gcov\"\n-gcov_arg=\"\"\n-\n-b=\"\\033[0;36m\"\n-g=\"\\033[0;32m\"\n-r=\"\\033[0;31m\"\n-e=\"\\033[0;90m\"\n-x=\"\\033[0m\"\n-\n-show_help()
      {\n-cat << EOF\n-\n-                Codecov Bash $VERSION\n-\n-          Global
      report uploading tool for Codecov\n-       Documentation at https://docs.codecov.io/docs\n-    Contribute
      at https://github.com/codecov/codecov-bash\n-\n-\n-    -h          Display this
      help and exit\n-    -f FILE     Target file(s) to upload\n-\n-                 -f
      \"path/to/file\"     only upload this file\n-                                       skips
      searching unless provided patterns below\n-\n-                 -f ''!*.bar''           ignore
      all files at pattern *.bar\n-                 -f ''*.foo''            include
      all files at pattern *.foo\n-                 Must use single quotes.\n-                 This
      is non-exclusive, use -s \"*.foo\" to match specific paths.\n-\n-    -s DIR       Directory
      to search for coverage reports.\n-                 Already searches project
      root and artifact folders.\n-    -t TOKEN     Set the private repository token\n-                 (option)
      set environment variable CODECOV_TOKEN=:uuid\n-\n-                 -t @/path/to/token_file\n-                 -t
      uuid\n-\n-    -n NAME      Custom defined name of the upload. Visible in Codecov
      UI\n-\n-    -e ENV       Specify environment variables to be included with this
      build\n-                 Also accepting environment variables: CODECOV_ENV=VAR,VAR2\n-\n-                 -e
      VAR,VAR2\n-\n-    -X feature   Toggle functionalities\n-\n-                 -X
      gcov          Disable gcov\n-                 -X coveragepy    Disable python
      coverage\n-                 -X fix           Disable report fixing\n-                 -X
      search        Disable searching for reports\n-                 -X xcode         Disable
      xcode processing\n-                 -X network       Disable uploading the file
      network\n-                 -X gcovout       Disable gcov output\n-\n-    -N           The
      commit SHA of the parent for which you are uploading coverage. If not present,\n-                 the
      parent will be determined using the API of your repository provider.\n-                 When
      using the repository provider''s API, the parent is determined via finding\n-                 the
      closest ancestor to the commit.\n-\n-    -R root dir  Used when not in git/hg
      project to identify project root directory\n-    -y conf file Used to specify
      the location of the .codecov.yml config file\n-    -F flag      Flag the upload
      to group coverage metrics\n-\n-                 -F unittests        This upload
      is only unittests\n-                 -F integration      This upload is only
      integration tests\n-                 -F ui,chrome        This upload is Chrome
      - UI tests\n-\n-    -c           Move discovered coverage reports to the trash\n-    -Z           Exit
      with 1 if not successful. Default will Exit with 0\n-\n-    -- xcode --\n-    -D           Custom
      Derived Data Path for Coverage.profdata and gcov processing\n-                 Default
      ''~/Library/Developer/Xcode/DerivedData''\n-    -J           Specify packages
      to build coverage.\n-                 This can significantly reduces time to
      build coverage reports.\n-\n-                 -J ''MyAppName''      Will match
      \"MyAppName\" and \"MyAppNameTests\"\n-                 -J ''^ExampleApp$''   Will
      match only \"ExampleApp\" not \"ExampleAppTests\"\n-\n-    -- gcov --\n-    -g
      GLOB      Paths to ignore during gcov gathering\n-    -G GLOB      Paths to
      include during gcov gathering\n-    -p dir       Project root directory\n-                 Also
      used when preparing gcov\n-    -k prefix    Prefix filepaths to help resolve
      path fixing: https://github.com/codecov/support/issues/472\n-    -x gcovexe   gcov
      executable to run. Defaults to ''gcov''\n-    -a gcovargs  extra arguments to
      pass to gcov\n-\n-    -- Override CI Environment Variables --\n-       These
      variables are automatically detected by popular CI providers\n-\n-    -B branch    Specify
      the branch name\n-    -C sha       Specify the commit sha\n-    -P pr        Specify
      the pull request number\n-    -b build     Specify the build number\n-    -T
      tag       Specify the git tag\n-\n-    -- Enterprise --\n-    -u URL       Set
      the target url for Enterprise customers\n-                 Not required when
      retrieving the bash uploader from your CCE\n-                 (option) Set environment
      variable CODECOV_URL=https://my-hosted-codecov.com\n-    -r SLUG      owner/repo
      slug used instead of the private repo token in Enterprise\n-                 (option)
      set environment variable CODECOV_SLUG=:owner/:repo\n-                 (option)
      set in your codecov.yml \"codecov.slug\"\n-    -S PATH      File path to your
      cacert.pem file used to verify ssl with Codecov Enterprise (optional)\n-                 (option)
      Set environment variable: CODECOV_CA_BUNDLE=\"/path/to/ca.pem\"\n-    -U curlargs  Extra
      curl arguments to communicate with Codecov. e.g., -U \"--proxy http://http-proxy\"\n-    -A
      curlargs  Extra curl arguments to communicate with AWS.\n-\n-    -- Debugging
      --\n-    -d           Don''t upload, but dump upload file to stdout\n-    -K           Remove
      color from the output\n-    -v           Verbose mode\n-\n-EOF\n-}\n-\n-\n-say()
      {\n-  echo -e \"$1\"\n-}\n-\n-\n-urlencode() {\n-  echo \"$1\" | curl -Gso /dev/null
      -w %{url_effective} --data-urlencode @- \"\" | cut -c 3- | sed -e ''s/%0A//''\n-}\n-\n-\n-swiftcov()
      {\n-  _dir=$(dirname \"$1\" | sed ''s/\\(Build\\).*/\\1/g'')\n-  for _type in
      app framework xctest\n-  do\n-    find \"$_dir\" -name \"*.$_type\" | while
      read f\n-    do\n-      _proj=${f##*/}\n-      _proj=${_proj%.\"$_type\"}\n-      if
      [ \"$2\" = \"\" ] || [ \"$(echo \"$_proj\" | grep -i \"$2\")\" != \"\" ];\n-      then\n-        say
      \"    $g+$x Building reports for $_proj $_type\"\n-        dest=$([ -f \"$f/$_proj\"
      ] && echo \"$f/$_proj\" || echo \"$f/Contents/MacOS/$_proj\")\n-        _proj_name=$(echo
      \"$_proj\" | sed -e ''s/[[:space:]]//g'')\n-        xcrun llvm-cov show $beta_xcode_partials
      -instr-profile \"$1\" \"$dest\" > \"$_proj_name.$_type.coverage.txt\" \\\n-         ||
      say \"    ${r}x>${x} llvm-cov failed to produce results for $dest\"\n-      fi\n-    done\n-  done\n-}\n-\n-\n-#
      Credits to: https://gist.github.com/pkuczynski/8665367\n-parse_yaml() {\n-   local
      prefix=$2\n-   local s=''[[:space:]]*'' w=''[a-zA-Z0-9_]*'' fs=$(echo @|tr @
      ''\\034'')\n-   sed -ne \"s|^\\($s\\)\\($w\\)$s:$s\\\"\\(.*\\)\\\"$s\\$|\\1$fs\\2$fs\\3|p\"
      \\\n-        -e \"s|^\\($s\\)\\($w\\)$s:$s\\(.*\\)$s\\$|\\1$fs\\2$fs\\3|p\"
      $1 |\n-   awk -F$fs ''{\n-      indent = length($1)/2;\n-      vname[indent]
      = $2;\n-      for (i in vname) {if (i > indent) {delete vname[i]}}\n-      if
      (length($3) > 0) {\n-         vn=\"\"; if (indent > 0) {vn=(vn)(vname[0])(\"_\")}\n-         printf(\"%s%s%s=\\\"%s\\\"\\n\",
      \"''$prefix''\",vn, $2, $3);\n-      }\n-   }''\n-}\n-\n-\n-if [ $# != 0 ];\n-then\n-  while
      getopts \"a:A:b:B:cC:dD:e:f:F:g:G:hJ:k:Kn:p:P:r:R:y:s:S:t:T:u:U:vx:X:ZN:\" o\n-  do\n-    case
      \"$o\" in\n-      \"N\")\n-        parent=$OPTARG\n-        ;;\n-      \"a\")\n-        gcov_arg=$OPTARG\n-        ;;\n-      \"A\")\n-        curlawsargs=\"$OPTARG\"\n-        ;;\n-      \"b\")\n-        build_o=\"$OPTARG\"\n-        ;;\n-      \"B\")\n-        branch_o=\"$OPTARG\"\n-        ;;\n-      \"c\")\n-        clean=\"1\"\n-        ;;\n-      \"C\")\n-        commit_o=\"$OPTARG\"\n-        ;;\n-      \"d\")\n-        dump=\"1\"\n-        ;;\n-      \"D\")\n-        ddp=\"$OPTARG\"\n-        ;;\n-      \"e\")\n-        env=\"$env,$OPTARG\"\n-        ;;\n-      \"f\")\n-        if
      [ \"${OPTARG::1}\" = \"!\" ];\n-        then\n-          exclude_cov=\"$exclude_cov
      -not -path ''${OPTARG:1}''\"\n-\n-        elif [[ \"$OPTARG\" = *\"*\"* ]];\n-        then\n-          include_cov=\"$include_cov
      -or -name ''$OPTARG''\"\n-\n-        else\n-          ft_search=0\n-          if
      [ \"$files\" = \"\" ];\n-          then\n-            files=\"$OPTARG\"\n-          else\n-            files=\"$files\n-$OPTARG\"\n-          fi\n-        fi\n-        ;;\n-      \"F\")\n-        if
      [ \"$flags\" = \"\" ];\n-        then\n-          flags=\"$OPTARG\"\n-        else\n-          flags=\"$flags,$OPTARG\"\n-        fi\n-        ;;\n-      \"g\")\n-        gcov_ignore=\"$gcov_ignore
      -not -path ''$OPTARG''\"\n-        ;;\n-      \"G\")\n-        gcov_include=\"$gcov_include
      -path ''$OPTARG''\"\n-        ;;\n-      \"h\")\n-        show_help\n-        exit
      0;\n-        ;;\n-      \"J\")\n-        ft_xcodellvm=\"1\"\n-        ft_xcodeplist=\"0\"\n-        if
      [ \"$xp\" = \"\" ];\n-        then\n-          xp=\"$OPTARG\"\n-        else\n-          xp=\"$xp\\|$OPTARG\"\n-        fi\n-        ;;\n-      \"k\")\n-        prefix_o=$(echo
      \"$OPTARG\" | sed -e ''s:^/*::'' -e ''s:/*$::'')\n-        ;;\n-      \"K\")\n-        b=\"\"\n-        g=\"\"\n-        r=\"\"\n-        e=\"\"\n-        x=\"\"\n-        ;;\n-      \"n\")\n-        name=\"$OPTARG\"\n-        ;;\n-      \"p\")\n-        proj_root=\"$OPTARG\"\n-        ;;\n-      \"P\")\n-        pr_o=\"$OPTARG\"\n-        ;;\n-      \"r\")\n-        slug_o=\"$OPTARG\"\n-        ;;\n-      \"R\")\n-        git_root=\"$OPTARG\"\n-        ;;\n-      \"s\")\n-        if
      [ \"$search_in_o\" = \"\" ];\n-        then\n-          search_in_o=\"$OPTARG\"\n-        else\n-          search_in_o=\"$search_in_o
      $OPTARG\"\n-        fi\n-        ;;\n-      \"S\")\n-        cacert=\"--cacert
      \\\"$OPTARG\\\"\"\n-        ;;\n-      \"t\")\n-        if [ \"${OPTARG::1}\"
      = \"@\" ];\n-        then\n-          token=$(cat \"${OPTARG:1}\" | tr -d ''
      \\n'')\n-        else\n-          token=\"$OPTARG\"\n-        fi\n-        ;;\n-      \"T\")\n-        tag_o=\"$OPTARG\"\n-        ;;\n-      \"u\")\n-        url_o=$(echo
      \"$OPTARG\" | sed -e ''s/\\/$//'')\n-        ;;\n-      \"U\")\n-        curlargs=\"$OPTARG\"\n-        ;;\n-      \"v\")\n-        set
      -x\n-        curl_s=\"\"\n-        ;;\n-      \"x\")\n-        gcov_exe=$OPTARG\n-        ;;\n-      \"X\")\n-        if
      [ \"$OPTARG\" = \"gcov\" ];\n-        then\n-          ft_gcov=\"0\"\n-        elif
      [ \"$OPTARG\" = \"coveragepy\" ] || [ \"$OPTARG\" = \"py\" ];\n-        then\n-          ft_coveragepy=\"0\"\n-        elif
      [ \"$OPTARG\" = \"gcovout\" ];\n-        then\n-          ft_gcovout=\"0\"\n-        elif
      [ \"$OPTARG\" = \"xcodellvm\" ];\n-        then\n-          ft_xcodellvm=\"1\"\n-          ft_xcodeplist=\"0\"\n-        elif
      [ \"$OPTARG\" = \"fix\" ] || [ \"$OPTARG\" = \"fixes\" ];\n-        then\n-          ft_fix=\"0\"\n-        elif
      [ \"$OPTARG\" = \"xcode\" ];\n-        then\n-          ft_xcodellvm=\"0\"\n-          ft_xcodeplist=\"0\"\n-        elif
      [ \"$OPTARG\" = \"search\" ];\n-        then\n-          ft_search=\"0\"\n-        elif
      [ \"$OPTARG\" = \"xcodepartials\" ];\n-        then\n-          beta_xcode_partials=\"-use-color\"\n-        elif
      [ \"$OPTARG\" = \"network\" ];\n-        then\n-          ft_network=\"0\"\n-        elif
      [ \"$OPTARG\" = \"s3\" ];\n-        then\n-          ft_s3=\"0\"\n-        fi\n-        ;;\n-      \"y\")\n-        codecov_yml=\"$OPTARG\"\n-        ;;\n-      \"Z\")\n-        exit_with=1\n-        ;;\n-    esac\n-  done\n-fi\n-\n-say
      \"\n-  _____          _\n- / ____|        | |\n-| |     ___   __| | ___  ___
      _____   __\n-| |    / _ \\\\ / _\\` |/ _ \\\\/ __/ _ \\\\ \\\\ / /\n-| |___|
      (_) | (_| |  __/ (_| (_) \\\\ V /\n- \\\\_____\\\\___/ \\\\__,_|\\\\___|\\\\___\\\\___/
      \\\\_/\n-                              Bash-$VERSION\n-\n-\"\n-\n-search_in=\"$proj_root\"\n-\n-if
      [ \"$JENKINS_URL\" != \"\" ];\n-then\n-  say \"$e==>$x Jenkins CI detected.\"\n-  #
      https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project\n-  #
      https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin#GitHubpullrequestbuilderplugin-EnvironmentVariables\n-  service=\"jenkins\"\n-\n-  if
      [ \"$ghprbSourceBranch\" != \"\" ];\n-  then\n-     branch=\"$ghprbSourceBranch\"\n-  elif
      [ \"$GIT_BRANCH\" != \"\" ];\n-  then\n-     branch=\"$GIT_BRANCH\"\n-  elif
      [ \"$BRANCH_NAME\" != \"\" ];\n-  then\n-    branch=\"$BRANCH_NAME\"\n-  fi\n-\n-  if
      [ \"$ghprbActualCommit\" != \"\" ];\n-  then\n-    commit=\"$ghprbActualCommit\"\n-  elif
      [ \"$GIT_COMMIT\" != \"\" ];\n-  then\n-    commit=\"$GIT_COMMIT\"\n-  fi\n-\n-  if
      [ \"$ghprbPullId\" != \"\" ];\n-  then\n-    pr=\"$ghprbPullId\"\n-  elif [
      \"$CHANGE_ID\" != \"\" ];\n-  then\n-    pr=\"$CHANGE_ID\"\n-  fi\n-\n-  build=\"$BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$BUILD_URL\")\n-\n-elif [ \"$CI\" = \"true\" ] && [ \"$TRAVIS\" = \"true\"
      ] && [ \"$SHIPPABLE\" != \"true\" ];\n-then\n-  say \"$e==>$x Travis CI detected.\"\n-  #
      https://docs.travis-ci.com/user/environment-variables/\n-  service=\"travis\"\n-  commit=\"${TRAVIS_PULL_REQUEST_SHA:-$TRAVIS_COMMIT}\"\n-  build=\"$TRAVIS_JOB_NUMBER\"\n-  pr=\"$TRAVIS_PULL_REQUEST\"\n-  job=\"$TRAVIS_JOB_ID\"\n-  slug=\"$TRAVIS_REPO_SLUG\"\n-  env=\"$env,TRAVIS_OS_NAME\"\n-  tag=\"$TRAVIS_TAG\"\n-  if
      [ \"$TRAVIS_BRANCH\" != \"$TRAVIS_TAG\" ];\n-  then\n-    branch=\"$TRAVIS_BRANCH\"\n-  fi\n-\n-  language=$(compgen
      -A variable | grep \"^TRAVIS_.*_VERSION$\" | head -1)\n-  if [ \"$language\"
      != \"\" ];\n-  then\n-    env=\"$env,${!language}\"\n-  fi\n-\n-elif [ \"$CODEBUILD_BUILD_ARN\"
      != \"\" ];\n-then\n-  say \"$e==>$x AWS Codebuild detected.\"\n-  # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n-  service=\"codebuild\"\n-  commit=\"$CODEBUILD_RESOLVED_SOURCE_VERSION\"\n-  build=\"$CODEBUILD_BUILD_ID\"\n-  branch=\"$(echo
      $CODEBUILD_WEBHOOK_HEAD_REF | sed ''s/^refs\\/heads\\///'')\"\n-  if [ \"${CODEBUILD_SOURCE_VERSION/pr}\"
      = \"$CODEBUILD_SOURCE_VERSION\" ] ; then\n-    pr=\"false\"\n-  else\n-    pr=\"$(echo
      $CODEBUILD_SOURCE_VERSION | sed ''s/^pr\\///'')\"\n-  fi\n-  job=\"$CODEBUILD_BUILD_ID\"\n-  slug=\"$(echo
      $CODEBUILD_SOURCE_REPO_URL | sed ''s/^.*github.com\\///'' | sed ''s/\\.git$//'')\"\n-\n-elif
      [ \"$DOCKER_REPO\" != \"\" ];\n-then\n-  say \"$e==>$x Docker detected.\"\n-  #
      https://docs.docker.com/docker-cloud/builds/advanced/\n-  service=\"docker\"\n-  branch=\"$SOURCE_BRANCH\"\n-  commit=\"$SOURCE_COMMIT\"\n-  slug=\"$DOCKER_REPO\"\n-  tag=\"$CACHE_TAG\"\n-  env=\"$env,IMAGE_NAME\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$CI_NAME\" = \"codeship\" ];\n-then\n-  say \"$e==>$x
      Codeship CI detected.\"\n-  # https://www.codeship.io/documentation/continuous-integration/set-environment-variables/\n-  service=\"codeship\"\n-  branch=\"$CI_BRANCH\"\n-  build=\"$CI_BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$CI_BUILD_URL\")\n-  commit=\"$CI_COMMIT_ID\"\n-\n-elif [ ! -z \"$CF_BUILD_URL\"
      ] && [ ! -z \"$CF_BUILD_ID\" ];\n-then\n-  say \"$e==>$x Codefresh CI detected.\"\n-  #
      https://docs.codefresh.io/v1.0/docs/variables\n-  service=\"codefresh\"\n-  branch=\"$CF_BRANCH\"\n-  build=\"$CF_BUILD_ID\"\n-  build_url=$(urlencode
      \"$CF_BUILD_URL\")\n-  commit=\"$CF_REVISION\"\n-\n-elif [ \"$TEAMCITY_VERSION\"
      != \"\" ];\n-then\n-  say \"$e==>$x TeamCity CI detected.\"\n-  # https://confluence.jetbrains.com/display/TCD8/Predefined+Build+Parameters\n-  #
      https://confluence.jetbrains.com/plugins/servlet/mobile#content/view/74847298\n-  if
      [ \"$TEAMCITY_BUILD_BRANCH\" = '''' ];\n-  then\n-    echo \"    Teamcity does
      not automatically make build parameters available as environment variables.\"\n-    echo
      \"    Add the following environment parameters to the build configuration\"\n-    echo
      \"    env.TEAMCITY_BUILD_BRANCH = %teamcity.build.branch%\"\n-    echo \"    env.TEAMCITY_BUILD_ID
      = %teamcity.build.id%\"\n-    echo \"    env.TEAMCITY_BUILD_URL = %teamcity.serverUrl%/viewLog.html?buildId=%teamcity.build.id%\"\n-    echo
      \"    env.TEAMCITY_BUILD_COMMIT = %system.build.vcs.number%\"\n-    echo \"    env.TEAMCITY_BUILD_REPOSITORY
      = %vcsroot.<YOUR TEAMCITY VCS NAME>.url%\"\n-  fi\n-  service=\"teamcity\"\n-  branch=\"$TEAMCITY_BUILD_BRANCH\"\n-  build=\"$TEAMCITY_BUILD_ID\"\n-  build_url=$(urlencode
      \"$TEAMCITY_BUILD_URL\")\n-  if [ \"$TEAMCITY_BUILD_COMMIT\" != \"\" ];\n-  then\n-    commit=\"$TEAMCITY_BUILD_COMMIT\"\n-  else\n-    commit=\"$BUILD_VCS_NUMBER\"\n-  fi\n-  remote_addr=\"$TEAMCITY_BUILD_REPOSITORY\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$CIRCLECI\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Circle CI detected.\"\n-  # https://circleci.com/docs/environment-variables\n-  service=\"circleci\"\n-  branch=\"$CIRCLE_BRANCH\"\n-  build=\"$CIRCLE_BUILD_NUM\"\n-  job=\"$CIRCLE_NODE_INDEX\"\n-  if
      [ \"$CIRCLE_PROJECT_REPONAME\" != \"\" ];\n-  then\n-    slug=\"$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME\"\n-  else\n-    #
      git@github.com:owner/repo.git\n-    slug=\"${CIRCLE_REPOSITORY_URL##*:}\"\n-    #
      owner/repo.git\n-    slug=\"${slug%%.git}\"\n-  fi\n-  pr=\"$CIRCLE_PR_NUMBER\"\n-  commit=\"$CIRCLE_SHA1\"\n-  search_in=\"$search_in
      $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS\"\n-\n-elif [ \"$BUDDYBUILD_BRANCH\"
      != \"\" ];\n-then\n-  say \"$e==>$x buddybuild detected\"\n-  # http://docs.buddybuild.com/v6/docs/custom-prebuild-and-postbuild-steps\n-  service=\"buddybuild\"\n-  branch=\"$BUDDYBUILD_BRANCH\"\n-  build=\"$BUDDYBUILD_BUILD_NUMBER\"\n-  build_url=\"https://dashboard.buddybuild.com/public/apps/$BUDDYBUILD_APP_ID/build/$BUDDYBUILD_BUILD_ID\"\n-  #
      BUDDYBUILD_TRIGGERED_BY\n-  if [ \"$ddp\" = \"$(echo ~)/Library/Developer/Xcode/DerivedData\"
      ];\n-  then\n-    ddp=\"/private/tmp/sandbox/${BUDDYBUILD_APP_ID}/bbtest\"\n-  fi\n-\n-elif
      [ \"${bamboo_planRepository_revision}\" != \"\" ];\n-then\n-  say \"$e==>$x
      Bamboo detected\"\n-  # https://confluence.atlassian.com/bamboo/bamboo-variables-289277087.html#Bamboovariables-Build-specificvariables\n-  service=\"bamboo\"\n-  commit=\"${bamboo_planRepository_revision}\"\n-  branch=\"${bamboo_planRepository_branch}\"\n-  build=\"${bamboo_buildNumber}\"\n-  build_url=\"${bamboo_buildResultsUrl}\"\n-  remote_addr=\"${bamboo_planRepository_repositoryUrl}\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$BITRISE_IO\" = \"true\" ];\n-then\n-  # http://devcenter.bitrise.io/faq/available-environment-variables/\n-  say
      \"$e==>$x Bitrise CI detected.\"\n-  service=\"bitrise\"\n-  branch=\"$BITRISE_GIT_BRANCH\"\n-  build=\"$BITRISE_BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$BITRISE_BUILD_URL\")\n-  pr=\"$BITRISE_PULL_REQUEST\"\n-  if [ \"$GIT_CLONE_COMMIT_HASH\"
      != \"\" ];\n-  then\n-    commit=\"$GIT_CLONE_COMMIT_HASH\"\n-  fi\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$SEMAPHORE\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Semaphore CI detected.\"\n-  # https://semaphoreapp.com/docs/available-environment-variables.html\n-  service=\"semaphore\"\n-  branch=\"$BRANCH_NAME\"\n-  build=\"$SEMAPHORE_BUILD_NUMBER\"\n-  job=\"$SEMAPHORE_CURRENT_THREAD\"\n-  pr=\"$PULL_REQUEST_NUMBER\"\n-  slug=\"$SEMAPHORE_REPO_SLUG\"\n-  commit=\"$REVISION\"\n-  env=\"$env,SEMAPHORE_TRIGGER_SOURCE\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$BUILDKITE\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Buildkite CI detected.\"\n-  # https://buildkite.com/docs/guides/environment-variables\n-  service=\"buildkite\"\n-  branch=\"$BUILDKITE_BRANCH\"\n-  build=\"$BUILDKITE_BUILD_NUMBER\"\n-  job=\"$BUILDKITE_JOB_ID\"\n-  build_url=$(urlencode
      \"$BUILDKITE_BUILD_URL\")\n-  slug=\"$BUILDKITE_PROJECT_SLUG\"\n-  commit=\"$BUILDKITE_COMMIT\"\n-  if
      [[ \"$BUILDKITE_PULL_REQUEST\" != \"false\" ]]; then\n-    pr=\"$BUILDKITE_PULL_REQUEST\"\n-  fi\n-  tag=\"$BUILDKITE_TAG\"\n-\n-elif
      [ \"$CI\" = \"drone\" ] || [ \"$DRONE\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Drone CI detected.\"\n-  # http://docs.drone.io/env.html\n-  # drone commits
      are not full shas\n-  service=\"drone.io\"\n-  branch=\"$DRONE_BRANCH\"\n-  build=\"$DRONE_BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"${DRONE_BUILD_LINK}\")\n-  pr=\"$DRONE_PULL_REQUEST\"\n-  job=\"$DRONE_JOB_NUMBER\"\n-  tag=\"$DRONE_TAG\"\n-\n-elif
      [ \"$HEROKU_TEST_RUN_BRANCH\" != \"\" ];\n-then\n-  say \"$e==>$x Heroku CI
      detected.\"\n-  # https://devcenter.heroku.com/articles/heroku-ci#environment-variables\n-  service=\"heroku\"\n-  branch=\"$HEROKU_TEST_RUN_BRANCH\"\n-  build=\"$HEROKU_TEST_RUN_ID\"\n-\n-elif
      [ \"$CI\" = \"True\" ] && [ \"$APPVEYOR\" = \"True\" ];\n-then\n-  say \"$e==>$x
      Appveyor CI detected.\"\n-  # http://www.appveyor.com/docs/environment-variables\n-  service=\"appveyor\"\n-  branch=\"$APPVEYOR_REPO_BRANCH\"\n-  build=$(urlencode
      \"$APPVEYOR_JOB_ID\")\n-  pr=\"$APPVEYOR_PULL_REQUEST_NUMBER\"\n-  job=\"$APPVEYOR_ACCOUNT_NAME%2F$APPVEYOR_PROJECT_SLUG%2F$APPVEYOR_BUILD_VERSION\"\n-  slug=\"$APPVEYOR_REPO_NAME\"\n-  commit=\"$APPVEYOR_REPO_COMMIT\"\n-  build_url=$(urlencode
      \"${APPVEYOR_URL}/project/${APPVEYOR_REPO_NAME}/builds/$APPVEYOR_BUILD_ID/job/${APPVEYOR_JOB_ID}\")\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$WERCKER_GIT_BRANCH\" != \"\" ];\n-then\n-  say
      \"$e==>$x Wercker CI detected.\"\n-  # http://devcenter.wercker.com/articles/steps/variables.html\n-  service=\"wercker\"\n-  branch=\"$WERCKER_GIT_BRANCH\"\n-  build=\"$WERCKER_MAIN_PIPELINE_STARTED\"\n-  slug=\"$WERCKER_GIT_OWNER/$WERCKER_GIT_REPOSITORY\"\n-  commit=\"$WERCKER_GIT_COMMIT\"\n-\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$MAGNUM\" = \"true\" ];\n-then\n-  say \"$e==>$x
      Magnum CI detected.\"\n-  # https://magnum-ci.com/docs/environment\n-  service=\"magnum\"\n-  branch=\"$CI_BRANCH\"\n-  build=\"$CI_BUILD_NUMBER\"\n-  commit=\"$CI_COMMIT\"\n-\n-elif
      [ \"$SHIPPABLE\" = \"true\" ];\n-then\n-  say \"$e==>$x Shippable CI detected.\"\n-  #
      http://docs.shippable.com/ci_configure/\n-  service=\"shippable\"\n-  branch=$([
      \"$HEAD_BRANCH\" != \"\" ] && echo \"$HEAD_BRANCH\" || echo \"$BRANCH\")\n-  build=\"$BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$BUILD_URL\")\n-  pr=\"$PULL_REQUEST\"\n-  slug=\"$REPO_FULL_NAME\"\n-  commit=\"$COMMIT\"\n-\n-elif
      [ \"$TDDIUM\" = \"true\" ];\n-then\n-  say \"Solano CI detected.\"\n-  # http://docs.solanolabs.com/Setup/tddium-set-environment-variables/\n-  service=\"solano\"\n-  commit=\"$TDDIUM_CURRENT_COMMIT\"\n-  branch=\"$TDDIUM_CURRENT_BRANCH\"\n-  build=\"$TDDIUM_TID\"\n-  pr=\"$TDDIUM_PR_ID\"\n-\n-elif
      [ \"$GREENHOUSE\" = \"true\" ];\n-then\n-  say \"$e==>$x Greenhouse CI detected.\"\n-  #
      http://docs.greenhouseci.com/docs/environment-variables-files\n-  service=\"greenhouse\"\n-  branch=\"$GREENHOUSE_BRANCH\"\n-  build=\"$GREENHOUSE_BUILD_NUMBER\"\n-  build_url=$(urlencode
      \"$GREENHOUSE_BUILD_URL\")\n-  pr=\"$GREENHOUSE_PULL_REQUEST\"\n-  commit=\"$GREENHOUSE_COMMIT\"\n-  search_in=\"$search_in
      $GREENHOUSE_EXPORT_DIR\"\n-\n-elif [ \"$GITLAB_CI\" != \"\" ];\n-then\n-  say
      \"$e==>$x GitLab CI detected.\"\n-  # http://doc.gitlab.com/ce/ci/variables/README.html\n-  service=\"gitlab\"\n-  branch=\"${CI_BUILD_REF_NAME:-$CI_COMMIT_REF_NAME}\"\n-  build=\"${CI_BUILD_ID:-$CI_JOB_ID}\"\n-  remote_addr=\"${CI_BUILD_REPO:-$CI_REPOSITORY_URL}\"\n-  commit=\"${CI_BUILD_REF:-$CI_COMMIT_SHA}\"\n-  slug=\"${CI_PROJECT_PATH}\"\n-\n-elif
      [ \"$GITHUB_ACTION\" != \"\" ];\n-then\n-  say \"$e==>$x GitHub Actions detected.\"\n-\n-  #
      https://github.com/features/actions\n-  service=\"github-actions\"\n-\n-  #
      https://help.github.com/en/articles/virtual-environments-for-github-actions#environment-variables\n-  branch=\"${GITHUB_REF#refs/heads/}\"\n-  commit=\"${GITHUB_SHA}\"\n-  slug=\"${GITHUB_REPOSITORY}\"\n-  job=\"${GITHUB_ACTION}\"\n-\n-elif
      [ \"$SYSTEM_TEAMFOUNDATIONSERVERURI\" != \"\" ];\n-then\n-  say \"$e==>$x Azure
      Pipelines detected.\"\n-  # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=vsts\n-  service=\"azure_pipelines\"\n-  commit=\"$BUILD_SOURCEVERSION\"\n-  build=\"$BUILD_BUILDNUMBER\"\n-  if
      [  -z \"$PULL_REQUEST_NUMBER\" ];\n-  then\n-    pr=\"$PULL_REQUEST_ID\"\n-  else\n-    pr=\"$PULL_REQUEST_NUMBER\"\n-  fi\n-  project=\"${SYSTEM_TEAMPROJECT}\"\n-  server_uri=\"${SYSTEM_TEAMFOUNDATIONSERVERURI}\"\n-  job=\"${BUILD_BUILDID}\"\n-  branch=\"$BUILD_SOURCEBRANCHNAME\"\n-  build_url=$(urlencode
      \"${SYSTEM_TEAMFOUNDATIONSERVERURI}${SYSTEM_TEAMPROJECT}/_build/results?buildId=${BUILD_BUILDID}\")\n-elif
      [ \"$CI\" = \"true\" ] && [ \"$BITBUCKET_BUILD_NUMBER\" != \"\" ];\n-then\n-  say
      \"$e==>$x Bitbucket detected.\"\n-  # https://confluence.atlassian.com/bitbucket/variables-in-pipelines-794502608.html\n-  service=\"bitbucket\"\n-  branch=\"$BITBUCKET_BRANCH\"\n-  build=\"$BITBUCKET_BUILD_NUMBER\"\n-  slug=\"$BITBUCKET_REPO_OWNER/$BITBUCKET_REPO_SLUG\"\n-  job=\"$BITBUCKET_BUILD_NUMBER\"\n-  pr=\"$BITBUCKET_PR_ID\"\n-else\n-  say
      \"${r}x>${x} No CI provider detected.\"\n-  say \"    Testing inside Docker?
      ${b}http://docs.codecov.io/docs/testing-with-docker${x}\"\n-  say \"    Testing
      with Tox? ${b}https://docs.codecov.io/docs/python#section-testing-with-tox${x}\"\n-\n-fi\n-\n-say
      \"    ${e}project root:${x} $git_root\"\n-\n-# find branch, commit, repo from
      git command\n-if [ \"$GIT_BRANCH\" != \"\" ];\n-then\n-  branch=\"$GIT_BRANCH\"\n-\n-elif
      [ \"$branch\" = \"\" ];\n-then\n-  branch=$(git rev-parse --abbrev-ref HEAD
      2>/dev/null || hg branch 2>/dev/null || echo \"\")\n-  if [ \"$branch\" = \"HEAD\"
      ];\n-  then\n-    branch=\"\"\n-  fi\n-fi\n-\n-if [ \"$commit_o\" = \"\" ];\n-then\n-  #
      merge commit -> actual commit\n-  mc=\n-  if [ -n \"$pr\" ] && [ \"$pr\" !=
      false ];\n-  then\n-    mc=$(git show --no-patch --format=\"%P\" 2>/dev/null
      || echo \"\")\n-  fi\n-  if [[ \"$mc\" =~ ^[a-z0-9]{40}[[:space:]][a-z0-9]{40}$
      ]];\n-  then\n-    say \"    Fixing merge commit SHA\"\n-    commit=$(echo \"$mc\"
      | cut -d'' '' -f2)\n-  elif [ \"$GIT_COMMIT\" != \"\" ];\n-  then\n-    commit=\"$GIT_COMMIT\"\n-  elif
      [ \"$commit\" = \"\" ];\n-  then\n-    commit=$(git log -1 --format=\"%H\" 2>/dev/null
      || hg id -i --debug 2>/dev/null | tr -d ''+'' || echo \"\")\n-  fi\n-else\n-  commit=\"$commit_o\"\n-fi\n-\n-if
      [ \"$CODECOV_TOKEN\" != \"\" ] && [ \"$token\" = \"\" ];\n-then\n-  say \"${e}-->${x}
      token set from env\"\n-  token=\"$CODECOV_TOKEN\"\n-fi\n-\n-if [ \"$CODECOV_URL\"
      != \"\" ] && [ \"$url_o\" = \"\" ];\n-then\n-  say \"${e}-->${x} url set from
      env\"\n-  url_o=$(echo \"$CODECOV_URL\" | sed -e ''s/\\/$//'')\n-fi\n-\n-if
      [ \"$CODECOV_SLUG\" != \"\" ];\n-then\n-  say \"${e}-->${x} slug set from env\"\n-  slug_o=\"$CODECOV_SLUG\"\n-\n-elif
      [ \"$slug\" = \"\" ];\n-then\n-  if [ \"$remote_addr\" = \"\" ];\n-  then\n-    remote_addr=$(git
      config --get remote.origin.url || hg paths default || echo '''')\n-  fi\n-  if
      [ \"$remote_addr\" != \"\" ];\n-  then\n-    if echo \"$remote_addr\" | grep
      -q \"//\"; then\n-      # https\n-      slug=$(echo \"$remote_addr\" | cut -d
      / -f 4,5 | sed -e ''s/\\.git$//'')\n-    else\n-      # ssh\n-      slug=$(echo
      \"$remote_addr\" | cut -d : -f 2 | sed -e ''s/\\.git$//'')\n-    fi\n-  fi\n-  if
      [ \"$slug\" = \"/\" ];\n-  then\n-    slug=\"\"\n-  fi\n-fi\n-\n-yaml=$(test
      -n \"$codecov_yml\" && echo \"$codecov_yml\" \\\n-       || cd \"$git_root\"
      && \\\n-          git ls-files \"*codecov.yml\" \"*codecov.yaml\" 2>/dev/null
      \\\n-       || hg locate \"*codecov.yml\" \"*codecov.yaml\" 2>/dev/null \\\n-       ||
      cd $proj_root && find . -type f -name ''*codecov.y*ml'' -depth 1 2>/dev/null
      \\\n-       || echo '''')\n-yaml=$(echo \"$yaml\" | head -1)\n-\n-if [ \"$yaml\"
      != \"\" ];\n-then\n-  say \"    ${e}Yaml found at:${x} $yaml\"\n-  config=$(parse_yaml
      \"$git_root/$yaml\" || echo '''')\n-\n-  # TODO validate the yaml here\n-\n-  if
      [ \"$(echo \"$config\" | grep ''codecov_token=\"'')\" != \"\" ] && [ \"$token\"
      = \"\" ];\n-  then\n-    say \"${e}-->${x} token set from yaml\"\n-    token=\"$(echo
      \"$config\" | grep ''codecov_token=\"'' | sed -e ''s/codecov_token=\"//'' |
      sed -e ''s/\"\\.*//'')\"\n-  fi\n-\n-  if [ \"$(echo \"$config\" | grep ''codecov_url=\"'')\"
      != \"\" ] && [ \"$url_o\" = \"\" ];\n-  then\n-    say \"${e}-->${x} url set
      from yaml\"\n-    url_o=\"$(echo \"$config\" | grep ''codecov_url=\"'' | sed
      -e ''s/codecov_url=\"//'' | sed -e ''s/\"\\.*//'')\"\n-  fi\n-\n-  if [ \"$(echo
      \"$config\" | grep ''codecov_slug=\"'')\" != \"\" ] && [ \"$slug_o\" = \"\"
      ];\n-  then\n-    say \"${e}-->${x} slug set from yaml\"\n-    slug_o=\"$(echo
      \"$config\" | grep ''codecov_slug=\"'' | sed -e ''s/codecov_slug=\"//'' | sed
      -e ''s/\"\\.*//'')\"\n-  fi\n-else\n-  say \"    ${g}Yaml not found, that''s
      ok! Learn more at${x} ${b}http://docs.codecov.io/docs/codecov-yaml${x}\"\n-\n-fi\n-\n-if
      [ \"$branch_o\" != \"\" ];\n-then\n-  branch=$(urlencode \"$branch_o\")\n-else\n-  branch=$(urlencode
      \"$branch\")\n-fi\n-\n-query=\"branch=$branch\\\n-       &commit=$commit\\\n-       &build=$([
      \"$build_o\" = \"\" ] && echo \"$build\" || echo \"$build_o\")\\\n-       &build_url=$build_url\\\n-       &name=$(urlencode
      \"$name\")\\\n-       &tag=$([ \"$tag_o\" = \"\" ] && echo \"$tag\" || echo
      \"$tag_o\")\\\n-       &slug=$([ \"$slug_o\" = \"\" ] && urlencode \"$slug\"
      || urlencode \"$slug_o\")\\\n-       &service=$service\\\n-       &flags=$flags\\\n-       &pr=$([
      \"$pr_o\" = \"\" ] && echo \"${pr##\\#}\" || echo \"${pr_o##\\#}\")\\\n-       &job=$job\"\n-\n-if
      [ ! -z \"$project\" ] && [ ! -z \"$server_uri\" ];\n-then\n-  query=$(echo \"$query&project=$project&server_uri=$server_uri\"
      | tr -d '' '')\n-fi\n-\n-if [ \"$parent\" != \"\" ];\n-then\n-  query=$(echo
      \"parent=$parent&$query\" | tr -d '' '')\n-fi\n-\n-if [ \"$ft_search\" = \"1\"
      ];\n-then\n-  # detect bower comoponents location\n-  bower_components=\"bower_components\"\n-  bower_rc=$(cd
      \"$git_root\" && cat .bowerrc 2>/dev/null || echo \"\")\n-  if [ \"$bower_rc\"
      != \"\" ];\n-  then\n-    bower_components=$(echo \"$bower_rc\" | tr -d ''\\n''
      | grep ''\"directory\"'' | cut -d''\"'' -f4 | sed -e ''s/\\/$//'')\n-    if
      [ \"$bower_components\" = \"\" ];\n-    then\n-      bower_components=\"bower_components\"\n-    fi\n-  fi\n-\n-  #
      Swift Coverage\n-  if [ \"$ft_xcodellvm\" = \"1\" ] && [ -d \"$ddp\" ];\n-  then\n-    say
      \"${e}==>${x} Processing Xcode reports via llvm-cov\"\n-    say \"    DerivedData
      folder: $ddp\"\n-    profdata_files=$(find \"$ddp\" -name ''*.profdata'' 2>/dev/null
      || echo '''')\n-    if [ \"$profdata_files\" != \"\" ];\n-    then\n-      #
      xcode via profdata\n-      if [ \"$xp\" = \"\" ];\n-      then\n-        # xp=$(xcodebuild
      -showBuildSettings 2>/dev/null | grep -i \"^\\s*PRODUCT_NAME\" | sed -e ''s/.*=
      \\(.*\\)/\\1/'')\n-        # say \" ${e}->${x} Speed up Xcode processing by
      adding ${e}-J ''$xp''${x}\"\n-        say \"    ${g}hint${x} Speed up Swift
      processing by using use ${g}-J ''AppName''${x} (regexp accepted)\"\n-        say
      \"    ${g}hint${x} This will remove Pods/ from your report. Also ${b}https://docs.codecov.io/docs/ignoring-paths${x}\"\n-      fi\n-      while
      read -r profdata;\n-      do\n-        if [ \"$profdata\" != \"\" ];\n-        then\n-          swiftcov
      \"$profdata\" \"$xp\"\n-        fi\n-      done <<< \"$profdata_files\"\n-    else\n-      say
      \"    ${e}->${x} No Swift coverage found\"\n-    fi\n-\n-    # Obj-C Gcov Coverage\n-    if
      [ \"$ft_gcov\" = \"1\" ];\n-    then\n-      say \"    ${e}->${x} Running $gcov_exe
      for Obj-C\"\n-      if [ \"$ft_gcovout\" = \"1\" ];\n-      then\n-        #
      suppress gcov output\n-        bash -c \"find $ddp -type f -name ''*.gcda''
      $gcov_include $gcov_ignore -exec $gcov_exe -p $gcov_arg {} +\" || true 2>/dev/null\n-      else\n-        bash
      -c \"find $ddp -type f -name ''*.gcda'' $gcov_include $gcov_ignore -exec $gcov_exe
      -p $gcov_arg {} +\" || true\n-      fi\n-    fi\n-  fi\n-\n-  if [ \"$ft_xcodeplist\"
      = \"1\" ] && [ -d \"$ddp\" ];\n-  then\n-    say \"${e}==>${x} Processing Xcode
      plists\"\n-    plists_files=$(find \"$ddp\" -name ''*.xccoverage'' 2>/dev/null
      || echo '''')\n-    if [ \"$plists_files\" != \"\" ];\n-    then\n-      while
      read -r plist;\n-      do\n-        if [ \"$plist\" != \"\" ];\n-        then\n-          say
      \"    ${g}Found${x} plist file at $plist\"\n-          plutil -convert xml1
      -o \"$(basename \"$plist\").plist\" -- $plist\n-        fi\n-      done <<<
      \"$plists_files\"\n-    fi\n-  fi\n-\n-  # Gcov Coverage\n-  if [ \"$ft_gcov\"
      = \"1\" ];\n-  then\n-    say \"${e}==>${x} Running gcov in $proj_root ${e}(disable
      via -X gcov)${x}\"\n-    bash -c \"find $proj_root -type f -name ''*.gcno''
      $gcov_include $gcov_ignore -execdir $gcov_exe -pb $gcov_arg {} +\" || true\n-  else\n-    say
      \"${e}==>${x} gcov disabled\"\n-  fi\n-\n-  # Python Coverage\n-  if [ \"$ft_coveragepy\"
      = \"1\" ];\n-  then\n-    if [ ! -f coverage.xml ];\n-    then\n-      if which
      coverage >/dev/null 2>&1;\n-      then\n-        say \"${e}==>${x} Python coveragepy
      exists ${e}disable via -X coveragepy${x}\"\n-\n-        dotcoverage=$(find \"$git_root\"
      -name ''.coverage'' -or -name ''.coverage.*'' | head -1 || echo '''')\n-        if
      [ \"$dotcoverage\" != \"\" ];\n-        then\n-          cd \"$(dirname \"$dotcoverage\")\"\n-          if
      [ ! -f .coverage ];\n-          then\n-            say \"    ${e}->${x} Running
      coverage combine\"\n-            coverage combine -a\n-          fi\n-          say
      \"    ${e}->${x} Running coverage xml\"\n-          if [ \"$(coverage xml -i)\"
      != \"No data to report.\" ];\n-          then\n-            files=\"$files\n-$PWD/coverage.xml\"\n-          else\n-            say
      \"    ${r}No data to report.${x}\"\n-          fi\n-          cd \"$proj_root\"\n-        else\n-          say
      \"    ${r}No .coverage file found.${x}\"\n-        fi\n-      else\n-        say
      \"${e}==>${x} Python coveragepy not found\"\n-      fi\n-    fi\n-  else\n-    say
      \"${e}==>${x} Python coveragepy disabled\"\n-  fi\n-\n-  if [ \"$search_in_o\"
      != \"\" ];\n-  then\n-    # location override\n-    search_in=\"$search_in_o\"\n-  fi\n-\n-  say
      \"$e==>$x Searching for coverage reports in:\"\n-  for _path in $search_in\n-  do\n-    say
      \"    ${g}+${x} $_path\"\n-  done\n-\n-  patterns=\"find $search_in \\( \\\n-                        -name
      vendor \\\n-                        -or -name htmlcov \\\n-                        -or
      -name virtualenv \\\n-                        -or -name js/generated/coverage
      \\\n-                        -or -name .virtualenv \\\n-                        -or
      -name virtualenvs \\\n-                        -or -name .virtualenvs \\\n-                        -or
      -name .env \\\n-                        -or -name .envs \\\n-                        -or
      -name env \\\n-                        -or -name .yarn-cache \\\n-                        -or
      -name envs \\\n-                        -or -name .venv \\\n-                        -or
      -name .venvs \\\n-                        -or -name venv \\\n-                        -or
      -name venvs \\\n-                        -or -name .git \\\n-                        -or
      -name .hg \\\n-                        -or -name .tox \\\n-                        -or
      -name __pycache__ \\\n-                        -or -name ''.egg-info*'' \\\n-                        -or
      -name ''$bower_components'' \\\n-                        -or -name node_modules
      \\\n-                        -or -name ''conftest_*.c.gcov'' \\\n-                    \\)
      -prune -or \\\n-                    -type f \\( -name ''*coverage*.*'' \\\n-                     -or
      -name ''nosetests.xml'' \\\n-                     -or -name ''jacoco*.xml''
      \\\n-                     -or -name ''clover.xml'' \\\n-                     -or
      -name ''report.xml'' \\\n-                     -or -name ''*.codecov.*'' \\\n-                     -or
      -name ''codecov.*'' \\\n-                     -or -name ''cobertura.xml'' \\\n-                     -or
      -name ''excoveralls.json'' \\\n-                     -or -name ''luacov.report.out''
      \\\n-                     -or -name ''coverage-final.json'' \\\n-                     -or
      -name ''naxsi.info'' \\\n-                     -or -name ''lcov.info'' \\\n-                     -or
      -name ''lcov.dat'' \\\n-                     -or -name ''*.lcov'' \\\n-                     -or
      -name ''*.clover'' \\\n-                     -or -name ''cover.out'' \\\n-                     -or
      -name ''gcov.info'' \\\n-                     -or -name ''*.gcov'' \\\n-                     -or
      -name ''*.lst'' \\\n-                     $include_cov \\) \\\n-                    $exclude_cov
      \\\n-                    -not -name ''*.profdata'' \\\n-                    -not
      -name ''coverage-summary.json'' \\\n-                    -not -name ''phpunit-code-coverage.xml''
      \\\n-                    -not -name ''*/classycle/report.xml'' \\\n-                    -not
      -name ''remapInstanbul.coverage*.json'' \\\n-                    -not -name
      ''phpunit-coverage.xml'' \\\n-                    -not -name ''*codecov.yml''
      \\\n-                    -not -name ''*.serialized'' \\\n-                    -not
      -name ''.coverage*'' \\\n-                    -not -name ''.*coveragerc'' \\\n-                    -not
      -name ''*.sh'' \\\n-                    -not -name ''*.bat'' \\\n-                    -not
      -name ''*.ps1'' \\\n-                    -not -name ''*.env'' \\\n-                    -not
      -name ''*.cmake'' \\\n-                    -not -name ''*.dox'' \\\n-                    -not
      -name ''*.ec'' \\\n-                    -not -name ''*.rst'' \\\n-                    -not
      -name ''*.h'' \\\n-                    -not -name ''*.scss'' \\\n-                    -not
      -name ''*.o'' \\\n-                    -not -name ''*.proto'' \\\n-                    -not
      -name ''*.sbt'' \\\n-                    -not -name ''*.xcoverage.*'' \\\n-                    -not
      -name ''*.gz'' \\\n-                    -not -name ''*.conf'' \\\n-                    -not
      -name ''*.p12'' \\\n-                    -not -name ''*.csv'' \\\n-                    -not
      -name ''*.rsp'' \\\n-                    -not -name ''*.m4'' \\\n-                    -not
      -name ''*.pem'' \\\n-                    -not -name ''*~'' \\\n-                    -not
      -name ''*.exe'' \\\n-                    -not -name ''*.am'' \\\n-                    -not
      -name ''*.template'' \\\n-                    -not -name ''*.cp'' \\\n-                    -not
      -name ''*.bw'' \\\n-                    -not -name ''*.crt'' \\\n-                    -not
      -name ''*.log'' \\\n-                    -not -name ''*.cmake'' \\\n-                    -not
      -name ''*.pth'' \\\n-                    -not -name ''*.in'' \\\n-                    -not
      -name ''*.jar*'' \\\n-                    -not -name ''*.pom*'' \\\n-                    -not
      -name ''*.png'' \\\n-                    -not -name ''*.jpg'' \\\n-                    -not
      -name ''*.sql'' \\\n-                    -not -name ''*.jpeg'' \\\n-                    -not
      -name ''*.svg'' \\\n-                    -not -name ''*.gif'' \\\n-                    -not
      -name ''*.csv'' \\\n-                    -not -name ''*.snapshot'' \\\n-                    -not
      -name ''*.mak*'' \\\n-                    -not -name ''*.bash'' \\\n-                    -not
      -name ''*.data'' \\\n-                    -not -name ''*.py'' \\\n-                    -not
      -name ''*.class'' \\\n-                    -not -name ''*.xcconfig'' \\\n-                    -not
      -name ''*.ec'' \\\n-                    -not -name ''*.coverage'' \\\n-                    -not
      -name ''*.pyc'' \\\n-                    -not -name ''*.cfg'' \\\n-                    -not
      -name ''*.egg'' \\\n-                    -not -name ''*.ru'' \\\n-                    -not
      -name ''*.css'' \\\n-                    -not -name ''*.less'' \\\n-                    -not
      -name ''*.pyo'' \\\n-                    -not -name ''*.whl'' \\\n-                    -not
      -name ''*.html'' \\\n-                    -not -name ''*.ftl'' \\\n-                    -not
      -name ''*.erb'' \\\n-                    -not -name ''*.rb'' \\\n-                    -not
      -name ''*.js'' \\\n-                    -not -name ''*.jade'' \\\n-                    -not
      -name ''*.db'' \\\n-                    -not -name ''*.md'' \\\n-                    -not
      -name ''*.cpp'' \\\n-                    -not -name ''*.gradle'' \\\n-                    -not
      -name ''*.tar.tz'' \\\n-                    -not -name ''*.scss'' \\\n-                    -not
      -name ''include.lst'' \\\n-                    -not -name ''fullLocaleNames.lst''
      \\\n-                    -not -name ''inputFiles.lst'' \\\n-                    -not
      -name ''createdFiles.lst'' \\\n-                    -not -name ''scoverage.measurements.*''
      \\\n-                    -not -name ''test_*_coverage.txt'' \\\n-                    -not
      -name ''testrunner-coverage*'' \\\n-                    -print 2>/dev/null\"\n-  files=$(eval
      \"$patterns\" || echo '''')\n-\n-elif [ \"$include_cov\" != \"\" ];\n-then\n-  files=$(eval
      \"find $search_in -type f \\( ${include_cov:5} \\)$exclude_cov 2>/dev/null\"
      || echo '''')\n-fi\n-\n-num_of_files=$(echo \"$files\" | wc -l | tr -d '' '')\n-if
      [ \"$num_of_files\" != '''' ] && [ \"$files\" != '''' ];\n-then\n-  say \"    ${e}->${x}
      Found $num_of_files reports\"\n-fi\n-\n-# no files found\n-if [ \"$files\" =
      \"\" ];\n-then\n-  say \"${r}-->${x} No coverage report found.\"\n-  say \"    Please
      visit ${b}http://docs.codecov.io/docs/supported-languages${x}\"\n-  exit ${exit_with};\n-fi\n-\n-if
      [ \"$ft_network\" == \"1\" ];\n-then\n-  say \"${e}==>${x} Detecting git/mercurial
      file structure\"\n-  network=$(cd \"$git_root\" && git ls-files 2>/dev/null
      || hg locate 2>/dev/null || echo \"\")\n-  if [ \"$network\" = \"\" ];\n-  then\n-    network=$(find
      \"$git_root\" \\( \\\n-                   -name virtualenv \\\n-                   -name
      .virtualenv \\\n-                   -name virtualenvs \\\n-                   -name
      .virtualenvs \\\n-                   -name ''*.png'' \\\n-                   -name
      ''*.gif'' \\\n-                   -name ''*.jpg'' \\\n-                   -name
      ''*.jpeg'' \\\n-                   -name ''*.md'' \\\n-                   -name
      .env \\\n-                   -name .envs \\\n-                   -name env \\\n-                   -name
      envs \\\n-                   -name .venv \\\n-                   -name .venvs
      \\\n-                   -name venv \\\n-                   -name venvs \\\n-                   -name
      .git \\\n-                   -name .egg-info \\\n-                   -name shunit2-2.1.6
      \\\n-                   -name vendor \\\n-                   -name __pycache__
      \\\n-                   -name node_modules \\\n-                   -path ''*/$bower_components/*''
      \\\n-                   -path ''*/target/delombok/*'' \\\n-                   -path
      ''*/build/lib/*'' \\\n-                   -path ''*/js/generated/coverage/*''
      \\\n-                    \\) -prune -or \\\n-                    -type f -print
      2>/dev/null || echo '''')\n-  fi\n-\n-  if [ \"$prefix_o\" != \"\" ];\n-  then\n-      network=$(echo
      \"$network\" | awk \"{print \\\"$prefix_o/\\\"\\$0}\")\n-  fi\n-fi\n-\n-upload_file=`mktemp
      /tmp/codecov.XXXXXX`\n-adjustments_file=`mktemp /tmp/codecov.adjustments.XXXXXX`\n-\n-cleanup()
      {\n-    rm -f $upload_file $adjustments_file $upload_file.gz\n-}\n-\n-trap cleanup
      INT ABRT TERM\n-\n-if [ \"$env\" != \"\" ];\n-then\n-  inc_env=\"\"\n-  say
      \"${e}==>${x} Appending build variables\"\n-  for varname in $(echo \"$env\"
      | tr '','' '' '')\n-  do\n-    if [ \"$varname\" != \"\" ];\n-    then\n-      say
      \"    ${g}+${x} $varname\"\n-      inc_env=\"${inc_env}${varname}=$(eval echo
      \"\\$${varname}\")\n-\"\n-    fi\n-  done\n-\n-echo \"$inc_env<<<<<< ENV\" >>
      $upload_file\n-fi\n-\n-# Append git file list\n-# write discovered yaml location\n-echo
      \"$yaml\" >> $upload_file\n-if [ \"$ft_network\" == \"1\" ];\n-then\n-  i=\"woff|eot|otf\"  #
      fonts\n-  i=\"$i|gif|png|jpg|jpeg|psd\"  # images\n-  i=\"$i|ptt|pptx|numbers|pages|md|txt|xlsx|docx|doc|pdf|html|csv\"  #
      docs\n-  i=\"$i|yml|yaml|.gitignore\"  # supporting docs\n-  echo \"$network\"
      | grep -vwE \"($i)$\" >> $upload_file\n-fi\n-echo \"<<<<<< network\" >> $upload_file\n-\n-fr=0\n-say
      \"${e}==>${x} Reading reports\"\n-while IFS='''' read -r file;\n-do\n-  # read
      the coverage file\n-  if [ \"$(echo \"$file\" | tr -d '' '')\" != '''' ];\n-  then\n-    if
      [ -f \"$file\" ];\n-    then\n-      report_len=$(wc -c < \"$file\")\n-      if
      [ \"$report_len\" -ne 0 ];\n-      then\n-        say \"    ${g}+${x} $file
      ${e}bytes=$(echo \"$report_len\" | tr -d '' '')${x}\"\n-        # append to
      to upload\n-        _filename=$(basename \"$file\")\n-        if [ \"${_filename##*.}\"
      = ''gcov'' ];\n-        then\n-          echo \"# path=$(echo \"$file.reduced\"
      | sed \"s|^$git_root/||\")\" >> $upload_file\n-          # get file name\n-          head
      -1 $file >> $upload_file\n-          # 1. remove source code\n-          # 2.
      remove ending bracket lines\n-          # 3. remove whitespace\n-          #
      4. remove contextual lines\n-          # 5. remove function names\n-          awk
      -F'': *'' ''{print $1\":\"$2\":\"}'' $file \\\n-            | sed ''\\/: *}
      *$/d'' \\\n-            | sed ''s/^ *//'' \\\n-            | sed ''/^-/d'' \\\n-            |
      sed ''s/^function.*/func/'' >> $upload_file\n-        else\n-          echo
      \"# path=$(echo \"$file\" | sed \"s|^$git_root/||\")\" >> $upload_file\n-          cat
      \"$file\" >> $upload_file\n-        fi\n-        echo \"<<<<<< EOF\" >> $upload_file\n-        fr=1\n-        if
      [ \"$clean\" = \"1\" ];\n-        then\n-          rm \"$file\"\n-        fi\n-      else\n-        say
      \"    ${r}-${x} Skipping empty file $file\"\n-      fi\n-    else\n-      say
      \"    ${r}-${x} file not found at $file\"\n-    fi\n-  fi\n-done <<< \"$(echo
      -e \"$files\")\"\n-\n-if [ \"$fr\" = \"0\" ];\n-then\n-  say \"${r}-->${x} No
      coverage data found.\"\n-  say \"    Please visit ${b}http://docs.codecov.io/docs/supported-languages${x}\"\n-  say
      \"    search for your projects language to learn how to collect reports.\"\n-  exit
      ${exit_with};\n-fi\n-\n-if [ \"$ft_fix\" = \"1\" ];\n-then\n-  say \"${e}==>${x}
      Appending adjustments\"\n-  say \"    ${b}http://docs.codecov.io/docs/fixing-reports${x}\"\n-\n-  empty_line=''^[[:space:]]*$''\n-  #
      //\n-  syntax_comment=''^[[:space:]]*//.*''\n-  # /* or */\n-  syntax_comment_block=''^[[:space:]]*(\\/\\*|\\*\\/)[[:space:]]*$''\n-  #
      { or }\n-  syntax_bracket=''^[[:space:]]*[\\{\\}][[:space:]]*(//.*)?$''\n-  #
      [ or ]\n-  syntax_list=''^[[:space:]]*[][][[:space:]]*(//.*)?$''\n-\n-  skip_dirs=\"-not
      -path ''*/$bower_components/*'' \\\n-             -not -path ''*/node_modules/*''\"\n-\n-  cut_and_join()
      {\n-    awk ''BEGIN { FS=\":\" }\n-         $3 ~ /\\/\\*/ || $3 ~ /\\*\\// {
      print $0 ; next }\n-         $1!=key { if (key!=\"\") print out ; key=$1 ; out=$1\":\"$2
      ; next }\n-         { out=out\",\"$2 }\n-         END { print out }'' 2>/dev/null\n-  }\n-\n-  if
      echo \"$network\" | grep -m1 ''.kt$'' 1>/dev/null;\n-  then\n-    # skip brackets
      and comments\n-    find \"$git_root\" -type f \\\n-                     -name
      ''*.kt'' \\\n-                     -exec \\\n-      grep -nIHE -e $syntax_bracket
      \\\n-                 -e $syntax_comment_block {} \\; \\\n-      | cut_and_join
      \\\n-      >> $adjustments_file \\\n-      || echo ''''\n-\n-    # last line
      in file\n-    find \"$git_root\" -type f \\\n-                     -name ''*.kt''
      -exec \\\n-      wc -l {} \\; \\\n-      | while read l; do echo \"EOF: $l\";
      done \\\n-      2>/dev/null \\\n-      >> $adjustments_file \\\n-      || echo
      ''''\n-\n-  fi\n-\n-  if echo \"$network\" | grep -m1 ''.go$'' 1>/dev/null;\n-  then\n-    #
      skip empty lines, comments, and brackets\n-    find \"$git_root\" -not -path
      ''*/vendor/*'' \\\n-                     -type f \\\n-                     -name
      ''*.go'' \\\n-                     -exec \\\n-      grep -nIHE \\\n-           -e
      $empty_line \\\n-           -e $syntax_comment \\\n-           -e $syntax_comment_block
      \\\n-           -e $syntax_bracket \\\n-           {} \\; \\\n-      | cut_and_join
      \\\n-      >> $adjustments_file \\\n-      || echo ''''\n-  fi\n-\n-  if echo
      \"$network\" | grep -m1 ''.dart$'' 1>/dev/null;\n-  then\n-    # skip brackets\n-    find
      \"$git_root\" -type f \\\n-                     -name ''*.dart'' \\\n-                     -exec
      \\\n-      grep -nIHE \\\n-           -e $syntax_bracket \\\n-           {}
      \\; \\\n-      | cut_and_join \\\n-      >> $adjustments_file \\\n-      ||
      echo ''''\n-  fi\n-\n-  if echo \"$network\" | grep -m1 ''.php$'' 1>/dev/null;\n-  then\n-    #
      skip empty lines, comments, and brackets\n-    find \"$git_root\" -not -path
      \"*/vendor/*\" \\\n-                     -type f \\\n-                     -name
      ''*.php'' \\\n-                     -exec \\\n-      grep -nIHE \\\n-           -e
      $syntax_list \\\n-           -e $syntax_bracket \\\n-           -e ''^[[:space:]]*\\);[[:space:]]*(//.*)?$''
      \\\n-           {} \\; \\\n-      | cut_and_join \\\n-      >> $adjustments_file
      \\\n-      || echo ''''\n-  fi\n-\n-  if echo \"$network\" | grep -m1 ''\\(.cpp\\|.h\\|.cxx\\|.c\\|.hpp\\|.m\\)$''
      1>/dev/null;\n-  then\n-    # skip brackets\n-    find \"$git_root\" -type f
      \\\n-                     $skip_dirs \\\n-         \\( \\\n-           -name
      ''*.h'' \\\n-           -or -name ''*.cpp'' \\\n-           -or -name ''*.cxx''
      \\\n-           -or -name ''*.m'' \\\n-           -or -name ''*.c'' \\\n-           -or
      -name ''*.hpp'' \\\n-         \\) -exec \\\n-      grep -nIHE \\\n-           -e
      $empty_line \\\n-           -e $syntax_bracket \\\n-           -e ''// LCOV_EXCL''
      \\\n-           {} \\; \\\n-      | cut_and_join \\\n-      >> $adjustments_file
      \\\n-      || echo ''''\n-\n-    # skip brackets\n-    find \"$git_root\" -type
      f \\\n-                     $skip_dirs \\\n-         \\( \\\n-           -name
      ''*.h'' \\\n-           -or -name ''*.cpp'' \\\n-           -or -name ''*.cxx''
      \\\n-           -or -name ''*.m'' \\\n-           -or -name ''*.c'' \\\n-           -or
      -name ''*.hpp'' \\\n-         \\) -exec \\\n-      grep -nIH ''// LCOV_EXCL''
      \\\n-           {} \\; \\\n-      >> $adjustments_file \\\n-      || echo ''''\n-\n-  fi\n-\n-  found=$(cat
      $adjustments_file | tr -d '' '')\n-\n-  if [ \"$found\" != \"\" ];\n-  then\n-    say
      \"    ${g}+${x} Found adjustments\"\n-    echo \"# path=fixes\" >> $upload_file\n-    cat
      $adjustments_file >> $upload_file\n-    echo \"<<<<<< EOF\" >> $upload_file\n-    rm
      -rf $adjustments_file\n-  else\n-    say \"    ${e}->${x} No adjustments found\"\n-  fi\n-fi\n-\n-if
      [ \"$url_o\" != \"\" ];\n-then\n-  url=\"$url_o\"\n-fi\n-\n-if [ \"$dump\" !=
      \"0\" ];\n-then\n-  # trim whitespace from query\n-  say \"    ${e}->${x} Dumping
      upload file (no upload)\"\n-  echo \"$url/upload/v4?$(echo \"package=bash-$VERSION&token=$token&$query\"
      | tr -d '' '')\"\n-  cat $upload_file\n-else\n-\n-  say \"${e}==>${x} Gzipping
      contents\"\n-  gzip -nf9 $upload_file\n-\n-  query=$(echo \"${query}\" | tr
      -d '' '')\n-  say \"${e}==>${x} Uploading reports\"\n-  say \"    ${e}url:${x}
      $url\"\n-  say \"    ${e}query:${x} $query\"\n-\n-  # Full query without token
      (to display on terminal output)\n-  queryNoToken=$(echo \"package=bash-$VERSION&token=secret&$query\"
      | tr -d '' '')\n-  # now add token to query\n-  query=$(echo \"package=bash-$VERSION&token=$token&$query\"
      | tr -d '' '')\n-\n-  if [ \"$ft_s3\" = \"1\" ];\n-  then\n-    i=\"0\"\n-    while
      [ $i -lt 4 ]\n-    do\n-      i=$[$i+1]\n-      say \"    ${e}->${x} Pinging
      Codecov\"\n-      say \"$url/upload/v4?$queryNoToken\"\n-      res=$(curl $curl_s
      -X POST $curlargs $cacert \\\n-            -H ''X-Reduced-Redundancy: false''
      \\\n-            -H ''X-Content-Type: application/x-gzip'' \\\n-            \"$url/upload/v4?$query\"
      || true)\n-      # a good replay is \"https://codecov.io\" + \"\\n\" + \"https://codecov.s3.amazonaws.com/...\"\n-      status=$(echo
      \"$res\" | head -1 | grep ''HTTP '' | cut -d'' '' -f2)\n-      if [ \"$status\"
      = \"\" ];\n-      then\n-        s3target=$(echo \"$res\" | sed -n 2p)\n-        say
      \"    ${e}->${x} Uploading\"\n-        \n-        \n-        s3=$(curl $curl_s
      -fiX PUT $curlawsargs \\\n-            --data-binary @$upload_file.gz \\\n-            -H
      ''Content-Type: application/x-gzip'' \\\n-            -H ''Content-Encoding:
      gzip'' \\\n-             -H ''x-amz-acl: public-read'' \\\n-            \"$s3target\"
      || true)\n-  \n-\n-        if [ \"$s3\" != \"\" ];\n-        then\n-          say
      \"    ${g}->${x} View reports at ${b}$(echo \"$res\" | sed -n 1p)${x}\"\n-          exit
      0\n-        else\n-          say \"    ${r}X>${x} Failed to upload\"\n-        fi\n-      elif
      [ \"$status\" = \"400\" ];\n-      then\n-          # 400 Error\n-          say
      \"${g}${res}${x}\"\n-          exit ${exit_with}\n-      fi\n-      say \"    ${e}->${x}
      Sleeping for 30s and trying again...\"\n-      sleep 30\n-    done\n-  fi\n-\n-  say
      \"    ${e}->${x} Uploading to Codecov\"\n-  i=\"0\"\n-  while [ $i -lt 4 ]\n-  do\n-    i=$[$i+1]\n-\n-    res=$(curl
      $curl_s -X POST $curlargs $cacert \\\n-          --data-binary @$upload_file.gz
      \\\n-          -H ''Content-Type: text/plain'' \\\n-          -H ''Content-Encoding:
      gzip'' \\\n-          -H ''X-Content-Encoding: gzip'' \\\n-          -H ''Accept:
      text/plain'' \\\n-          \"$url/upload/v2?$query\" || echo ''HTTP 500'')\n-    #
      HTTP 200\n-    # http://....\n-    status=$(echo \"$res\" | head -1 | cut -d''
      '' -f2)\n-    if [ \"$status\" = \"\" ];\n-    then\n-      say \"    View reports
      at ${b}$(echo \"$res\" | head -2 | tail -1)${x}\"\n-      exit 0\n-\n-    elif
      [ \"${status:0:1}\" = \"5\" ];\n-    then\n-      say \"    ${e}->${x} Sleeping
      for 30s and trying again...\"\n-      sleep 30\n-\n-    else\n-      say \"    ${g}${res}${x}\"\n-      exit
      0\n-      exit ${exit_with}\n-    fi\n-\n-  done\n-\n-  say \"    ${r}X> Failed
      to upload coverage reports${x}\"\n-fi\n-\n-exit ${exit_with}"},{"sha":"49532268d6565b973ef58adcf63971f5a9e47898","filename":"flagone.coverage.xml","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/ThiagoCodecov/example-python/blob/f0895290dc26668faeeb20ee5ccd4cc995925775/flagone.coverage.xml","raw_url":"https://github.com/ThiagoCodecov/example-python/raw/f0895290dc26668faeeb20ee5ccd4cc995925775/flagone.coverage.xml","contents_url":"https://api.github.com/repos/ThiagoCodecov/example-python/contents/flagone.coverage.xml?ref=f0895290dc26668faeeb20ee5ccd4cc995925775","patch":"@@
      -1,86 +0,0 @@\n-<?xml version=\"1.0\" ?>\n-<coverage branch-rate=\"0\" branches-covered=\"0\"
      branches-valid=\"0\" complexity=\"0\" line-rate=\"0.5\" lines-covered=\"22\"
      lines-valid=\"44\" timestamp=\"1583299803870\" version=\"4.5.4\">\n-\t<!-- Generated
      by coverage.py: https://coverage.readthedocs.io -->\n-\t<!-- Based on https://raw.githubusercontent.com/cobertura/web/main/htdocs/xml/coverage-04.dtd
      -->\n-\t<sources>\n-\t\t<source>/Users/thiagorramos/Projects/clientenv/example-python</source>\n-\t</sources>\n-\t<packages>\n-\t\t<package
      branch-rate=\"0\" complexity=\"0\" line-rate=\"0.5833\" name=\"awesome\">\n-\t\t\t<classes>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"awesome/__init__.py\" line-rate=\"0.5\"
      name=\"__init__.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"1\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"2\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"5\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"6\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"9\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"10\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"13\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"14\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"15\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"16\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"19\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"20\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"23\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"24\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"27\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"28\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"31\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"32\"/>\n-\t\t\t\t\t</lines>\n-\t\t\t\t</class>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"awesome/code_fib.py\" line-rate=\"0.8333\"
      name=\"code_fib.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"1\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"2\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"3\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"4\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"7\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"8\"/>\n-\t\t\t\t\t</lines>\n-\t\t\t\t</class>\n-\t\t\t</classes>\n-\t\t</package>\n-\t\t<package
      branch-rate=\"0\" complexity=\"0\" line-rate=\"0.4\" name=\"tests\">\n-\t\t\t<classes>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"tests/__init__.py\" line-rate=\"1\"
      name=\"__init__.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines/>\n-\t\t\t\t</class>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"tests/test_number_two.py\" line-rate=\"1\"
      name=\"test_number_two.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"1\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"2\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"5\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"6\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"9\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"10\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"13\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"14\"/>\n-\t\t\t\t\t</lines>\n-\t\t\t\t</class>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"tests/test_sample.py\" line-rate=\"0\"
      name=\"test_sample.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"1\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"4\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"5\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"8\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"9\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"12\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"13\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"14\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"17\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"18\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"21\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"22\"/>\n-\t\t\t\t\t</lines>\n-\t\t\t\t</class>\n-\t\t\t</classes>\n-\t\t</package>\n-\t</packages>\n-</coverage>"},{"sha":"ae0db9038664db16b44e63c772de96bc0a8092d0","filename":"flagtwo.coverage.xml","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/ThiagoCodecov/example-python/blob/f0895290dc26668faeeb20ee5ccd4cc995925775/flagtwo.coverage.xml","raw_url":"https://github.com/ThiagoCodecov/example-python/raw/f0895290dc26668faeeb20ee5ccd4cc995925775/flagtwo.coverage.xml","contents_url":"https://api.github.com/repos/ThiagoCodecov/example-python/contents/flagtwo.coverage.xml?ref=f0895290dc26668faeeb20ee5ccd4cc995925775","patch":"@@
      -1,86 +0,0 @@\n-<?xml version=\"1.0\" ?>\n-<coverage branch-rate=\"0\" branches-covered=\"0\"
      branches-valid=\"0\" complexity=\"0\" line-rate=\"0.5682\" lines-covered=\"25\"
      lines-valid=\"44\" timestamp=\"1583299802830\" version=\"4.5.4\">\n-\t<!-- Generated
      by coverage.py: https://coverage.readthedocs.io -->\n-\t<!-- Based on https://raw.githubusercontent.com/cobertura/web/main/htdocs/xml/coverage-04.dtd
      -->\n-\t<sources>\n-\t\t<source>/Users/thiagorramos/Projects/clientenv/example-python</source>\n-\t</sources>\n-\t<packages>\n-\t\t<package
      branch-rate=\"0\" complexity=\"0\" line-rate=\"0.5417\" name=\"awesome\">\n-\t\t\t<classes>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"awesome/__init__.py\" line-rate=\"0.7222\"
      name=\"__init__.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"1\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"2\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"5\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"6\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"9\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"10\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"13\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"14\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"15\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"16\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"19\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"20\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"23\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"24\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"27\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"28\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"31\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"32\"/>\n-\t\t\t\t\t</lines>\n-\t\t\t\t</class>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"awesome/code_fib.py\" line-rate=\"0\"
      name=\"code_fib.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"1\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"2\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"3\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"4\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"7\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"8\"/>\n-\t\t\t\t\t</lines>\n-\t\t\t\t</class>\n-\t\t\t</classes>\n-\t\t</package>\n-\t\t<package
      branch-rate=\"0\" complexity=\"0\" line-rate=\"0.6\" name=\"tests\">\n-\t\t\t<classes>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"tests/__init__.py\" line-rate=\"1\"
      name=\"__init__.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines/>\n-\t\t\t\t</class>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"tests/test_number_two.py\" line-rate=\"0\"
      name=\"test_number_two.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"1\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"2\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"5\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"6\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"9\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"10\"/>\n-\t\t\t\t\t\t<line
      hits=\"0\" number=\"13\"/>\n-\t\t\t\t\t\t<line hits=\"0\" number=\"14\"/>\n-\t\t\t\t\t</lines>\n-\t\t\t\t</class>\n-\t\t\t\t<class
      branch-rate=\"0\" complexity=\"0\" filename=\"tests/test_sample.py\" line-rate=\"1\"
      name=\"test_sample.py\">\n-\t\t\t\t\t<methods/>\n-\t\t\t\t\t<lines>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"1\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"4\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"5\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"8\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"9\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"12\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"13\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"14\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"17\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"18\"/>\n-\t\t\t\t\t\t<line
      hits=\"1\" number=\"21\"/>\n-\t\t\t\t\t\t<line hits=\"1\" number=\"22\"/>\n-\t\t\t\t\t</lines>\n-\t\t\t\t</class>\n-\t\t\t</classes>\n-\t\t</package>\n-\t</packages>\n-</coverage>"}]}'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes,
        X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 14 Oct 2020 21:35:04 GMT
      ETag:
      - W/"b742e173229ed17156e3dfac7a65d1cab37c8648ad893cad9823a2044e61c746"
      Last-Modified:
      - Tue, 13 Oct 2020 15:15:31 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3
      X-GitHub-Request-Id:
      - D7F0:4EA7:4D0CC:A4BF0:5F876F08
      X-OAuth-Scopes:
      - admin:org, admin:public_key, admin:repo_hook, repo, user, write:discussion
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4996'
      X-RateLimit-Reset:
      - '1602714521'
      X-RateLimit-Used:
      - '4'
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
version: 1
