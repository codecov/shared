version: 2.1

jobs:
  codecovstartup:
    docker:
      - image: cimg/python:3.10.10
    working_directory: ~/repo
    steps:
      - checkout
      - run: &preparation
          name: install dependencies
          command: |
            sudo apt-get update
            sudo apt install cargo
            python3 -m venv ../venv
            . ../venv/bin/activate
            pip install -r tests/requirements.txt
            pip install setuptools_rust
            python setup.py develop
      - run:
          name: Install CLI
          command: |
            . ../venv/bin/activate
            pip install git+ssh://git@github.com/codecov/codecov-cli.git@9a8498ab43772d6508a703c1d5360387ec525974#egg=codecov-cli
      - run:
          name: Save commit info 
          command: |
            . ../venv/bin/activate
            codecovcli --auto-load-params-from circleci create-commit --service=github
      - run: 
          name: Create report
          command: |
            . ../venv/bin/activate
            codecovcli --auto-load-params-from circleci create-report --service=github
      - run:
          name: Run Static Analysis
          command: |
            . ../venv/bin/activate
            codecovcli static-analysis --token=$STATIC_TOKEN
  iterativetesting:
    docker:
      - image: cimg/python:3.10.10
    steps:
      - checkout
      - run: *preparation
      - run:
          name: Setup
          command: |
            . ../venv/bin/activate
            pip install git+ssh://git@github.com/codecov/codecov-cli.git@9a8498ab43772d6508a703c1d5360387ec525974#egg=codecov-cli
      - run:
          name: Run Predictor Analysis
          command: |
            . ../venv/bin/activate
            codecovcli label-analysis --token=$STATIC_TOKEN --base-sha=$(git merge-base HEAD^ master)
            coverage json --show-contexts -o label.coverage.json
            codecovcli --auto-load-params-from circleci do-upload --flag onlysomelabels --file=label.coverage.json
  linter:
    docker:
      - image: cimg/python:3.10.10
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Running linter
          command: |
            pip3 install black==22.3.0 isort
            black --check .
            isort --profile black --check .
  mutations:
    docker:
      - image: cimg/python:3.10.10
    working_directory: ~/repo
    steps:
      - checkout
      - run: *preparation
      - run:
          name: Run Mutations
          command: |
            . ../venv/bin/activate
            pip install setuptools_rust mutmut[patch]
            git diff master $CIRCLE_SHA1 > data.patch
            mutmut run --use-patch-file data.patch || true
            mkdir /tmp/artifacts;
            mutmut junitxml > /tmp/artifacts/mut.xml
      - store_test_results:
          path: /tmp/artifacts/mut.xml
  build:
    parameters:
      imagename:
        type: string
    docker:
      - image: cimg/python:<< parameters.imagename >>
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v07-dependencies-<< parameters.imagename >>-{{ checksum "setup.py" }}
          # fallback to using the latest cache if no exact match is found
          - v07-dependencies-<< parameters.imagename >>
      - run: *preparation
      - save_cache:
          paths:
            - ../venv
          key: v07-dependencies-<< parameters.imagename >>-{{ checksum "setup.py" }}

      - run:
          name: run tests
          command: |
            . ../venv/bin/activate
            python -m pytest --cov=./
        
      - run:
          name: codecov
          command: |
            . ../venv/bin/activate
            pip install codecov
            codecov --required --flags python<< parameters.imagename >>
          
  rust:
    docker:
      - image: cimg/python:3.10.10
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Rust tests
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly
            source $HOME/.cargo/env
            sudo apt-get update
            sudo apt-get install gcc lsb-release wget software-properties-common
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 15
            RUSTFLAGS="-Z instrument-coverage" LLVM_PROFILE_FILE="ribs-%m.profraw" cargo +nightly test --no-default-features
            llvm-profdata-15 merge -sparse ribs-*.profraw -o ribs.profdata
            llvm-cov-15 show --ignore-filename-regex='/.cargo/registry' --instr-profile=ribs.profdata --object `ls target/debug/deps/ribs-* | grep -v "\.d" | grep -v "\.o"` > app.coverage.txt
            pip install codecov
            codecov --required --flags rust
workflows:
  version: 2
  lint-test:
    jobs:
      - codecovstartup
      - mutations
      - iterativetesting:
          requires:
            - codecovstartup
      - rust:
          filters:
            tags:
              only: /.*/
      - linter:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - codecovstartup
          matrix:
            parameters:
              imagename: ["3.7.13", "3.8.13", "3.9.12", "3.10.5"]
          filters:
            tags:
              only: /.*/
